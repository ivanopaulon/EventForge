@inject ITranslationService TranslationService
@inject IHelpService HelpService

@* Enhanced MudTooltip with help content and ARIA support *@
<MudTooltip Text="@TooltipText" 
            Placement="@Placement" 
            Color="@Color" 
            Arrow="true"
            Duration="@Duration"
            Delay="@Delay">
    <ChildContent>
        <div class="d-inline-flex align-center">
            @ChildContent
            @if (ShowHelpIcon)
            {
                <MudIconButton Icon="@Icons.Material.Filled.Help" 
                               Size="@IconSize" 
                               Color="@IconColor"
                               Class="@($"ml-1 {IconClass}")"
                               OnClick="@HandleHelpClick"
                               aria-label="@AriaLabel"
                               title="@TooltipText" />
            }
        </div>
    </ChildContent>
    <TooltipContent>
        <div class="pa-2 max-width-300">
            @if (!string.IsNullOrEmpty(Title))
            {
                <MudText Typo="Typo.subtitle2" Class="mb-1 font-weight-bold">
                    @Title
                </MudText>
            }
            <MudText Typo="Typo.body2" Class="line-height-normal">
                @TooltipText
            </MudText>
            @if (ShowMoreInfoLink && !string.IsNullOrEmpty(MoreInfoKey))
            {
                <MudButton Size="Size.Small" 
                           Variant="Variant.Text" 
                           Color="Color.Primary"
                           Class="mt-1 pa-0"
                           OnClick="@HandleMoreInfoClick"
                           aria-label="@TranslationService.GetTranslation("help.moreInfo", "More information")">
                    @TranslationService.GetTranslation("help.moreInfo", "More Info")
                </MudButton>
            }
        </div>
    </TooltipContent>
</MudTooltip>

@code {
    /// <summary>
    /// Translation key for the tooltip text.
    /// </summary>
    [Parameter] public string TranslationKey { get; set; } = string.Empty;

    /// <summary>
    /// Fallback text if translation is not found.
    /// </summary>
    [Parameter] public string FallbackText { get; set; } = string.Empty;

    /// <summary>
    /// Optional title for the tooltip.
    /// </summary>
    [Parameter] public string? Title { get; set; }

    /// <summary>
    /// Translation key for the title.
    /// </summary>
    [Parameter] public string? TitleKey { get; set; }

    /// <summary>
    /// Content to wrap with the tooltip.
    /// </summary>
    [Parameter] public RenderFragment? ChildContent { get; set; }

    /// <summary>
    /// Tooltip placement.
    /// </summary>
    [Parameter] public Placement Placement { get; set; } = Placement.Top;

    /// <summary>
    /// Tooltip color.
    /// </summary>
    [Parameter] public Color Color { get; set; } = Color.Default;

    /// <summary>
    /// Show help icon next to content.
    /// </summary>
    [Parameter] public bool ShowHelpIcon { get; set; } = false;

    /// <summary>
    /// Help icon size.
    /// </summary>
    [Parameter] public Size IconSize { get; set; } = Size.Small;

    /// <summary>
    /// Help icon color.
    /// </summary>
    [Parameter] public Color IconColor { get; set; } = Color.Primary;

    /// <summary>
    /// Additional CSS classes for the help icon.
    /// </summary>
    [Parameter] public string IconClass { get; set; } = string.Empty;

    /// <summary>
    /// Duration to show tooltip.
    /// </summary>
    [Parameter] public double Duration { get; set; } = 0;

    /// <summary>
    /// Delay before showing tooltip.
    /// </summary>
    [Parameter] public double Delay { get; set; } = 300;

    /// <summary>
    /// Show "More Info" link in tooltip.
    /// </summary>
    [Parameter] public bool ShowMoreInfoLink { get; set; } = false;

    /// <summary>
    /// Translation key for additional help content.
    /// </summary>
    [Parameter] public string? MoreInfoKey { get; set; }

    /// <summary>
    /// Callback when help icon is clicked.
    /// </summary>
    [Parameter] public EventCallback OnHelpClick { get; set; }

    /// <summary>
    /// Callback when "More Info" is clicked.
    /// </summary>
    [Parameter] public EventCallback OnMoreInfoClick { get; set; }

    private string TooltipText => !string.IsNullOrEmpty(TranslationKey) 
        ? TranslationService.GetTranslation(TranslationKey, FallbackText)
        : FallbackText;

    private string AriaLabel => TranslationService.GetTranslation("help.iconAriaLabel", "Get help for this feature");

    protected override void OnInitialized()
    {
        if (!string.IsNullOrEmpty(TitleKey))
        {
            Title = TranslationService.GetTranslation(TitleKey, Title ?? string.Empty);
        }
    }

    private async Task HandleHelpClick()
    {
        if (OnHelpClick.HasDelegate)
        {
            await OnHelpClick.InvokeAsync();
        }
    }

    private async Task HandleMoreInfoClick()
    {
        if (OnMoreInfoClick.HasDelegate)
        {
            await OnMoreInfoClick.InvokeAsync();
        }
    }
}