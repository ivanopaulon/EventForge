@inject ITranslationService TranslationService

<MudPaper Elevation="2" Class="pa-4 mb-4">
    <MudText Typo="Typo.h6" Class="mb-3">
        <MudIcon Icon="@Icons.Material.Outlined.QrCodeScanner" Class="mr-2" />
        @TranslationService.GetTranslation("warehouse.scanBarcode", "Scansiona Codice a Barre")
    </MudText>

    <MudGrid Spacing="3">
        <MudItem xs="12" md="8">
            <MudTextField @bind-Value="BarcodeValue"
                          Label="@TranslationService.GetTranslation("warehouse.barcodeInput", "Codice a Barre")"
                          Variant="Variant.Outlined"
                          @onkeydown="@OnKeyDown"
                          @ref="_barcodeInput"
                          Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Outlined.QrCode"
                          HelperText="@TranslationService.GetTranslation("warehouse.scanOrTypeBarcode", "Scansiona o digita il codice a barre e premi Invio")" />
        </MudItem>
        <MudItem xs="12" md="4">
            <MudButton StartIcon="@Icons.Material.Outlined.Search"
                       Color="Color.Primary"
                       Variant="Variant.Filled"
                       FullWidth="true"
                       OnClick="@(() => OnSearch.InvokeAsync(BarcodeValue))"
                       Disabled="@string.IsNullOrWhiteSpace(BarcodeValue)">
                @TranslationService.GetTranslation("common.search", "Cerca")
            </MudButton>
        </MudItem>
        <MudItem xs="12">
            <MudSwitch @bind-Value="FastConfirmEnabledValue" 
                      Color="Color.Primary"
                      Label="@TranslationService.GetTranslation("warehouse.fastConfirm", "Conferma rapida")"
                      UnCheckedColor="Color.Default" />
            <MudText Typo="Typo.caption" Color="Color.Secondary">
                @TranslationService.GetTranslation("warehouse.fastConfirmHelp", "Quando attivo, le scansioni ripetute dello stesso prodotto vengono confermate automaticamente")
            </MudText>
        </MudItem>
    </MudGrid>
</MudPaper>

@code {
    private MudTextField<string>? _barcodeInput;
    private bool _scanLock = false;
    private DateTime _lastScanAt = DateTime.MinValue;
    
    [Parameter] public string BarcodeValue { get; set; } = string.Empty;
    [Parameter] public EventCallback<string> BarcodeValueChanged { get; set; }
    [Parameter] public bool FastConfirmEnabledValue { get; set; } = true;
    [Parameter] public EventCallback<bool> FastConfirmEnabledValueChanged { get; set; }
    [Parameter] public TimeSpan DebounceTime { get; set; } = TimeSpan.FromMilliseconds(150);
    [Parameter] public EventCallback<string> OnBarcodeScanned { get; set; }
    [Parameter] public EventCallback<string> OnSearch { get; set; }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && _barcodeInput != null)
        {
            await _barcodeInput.FocusAsync();
        }
    }
    
    public async Task FocusAsync()
    {
        if (_barcodeInput != null)
        {
            await _barcodeInput.FocusAsync();
        }
    }
    
    public void ClearBarcode()
    {
        BarcodeValue = string.Empty;
        StateHasChanged();
    }
    
    private async Task OnKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            // Sanitize barcode input
            var sanitized = SanitizeBarcode(BarcodeValue);
            if (string.IsNullOrWhiteSpace(sanitized))
                return;
            
            // Apply debouncing and re-entrancy lock
            if (_scanLock)
                return;
            
            var now = DateTime.UtcNow;
            if ((now - _lastScanAt) < DebounceTime)
                return;
            
            _scanLock = true;
            _lastScanAt = now;
            
            try
            {
                BarcodeValue = sanitized;
                await BarcodeValueChanged.InvokeAsync(BarcodeValue);
                await OnBarcodeScanned.InvokeAsync(sanitized);
            }
            finally
            {
                _scanLock = false;
            }
        }
    }
    
    private static string SanitizeBarcode(string raw) => raw?.Trim().Trim('\r', '\n') ?? string.Empty;
}
