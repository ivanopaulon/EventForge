@using EventForge.Client.Shared.Components.Warehouse
@inject ITranslationService TranslationService

@if (OperationLog?.Any() == true)
{
    <MudPaper Elevation="2" Class="pa-4">
        <div style="cursor: pointer;" @onclick="@(() => ExpandedValue = !ExpandedValue)">
            <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="mb-2">
                <div>
                    <MudText Typo="Typo.h6">
                        <MudIcon Icon="@Icons.Material.Outlined.History" Class="mr-2" />
                        @TranslationService.GetTranslation("warehouse.operationLog", "Registro Operazioni")
                        <MudChip T="string" Size="Size.Small" Color="Color.Secondary" Class="ml-2">@OperationLog.Count</MudChip>
                    </MudText>
                </div>
                <MudIconButton Icon="@(ExpandedValue ? Icons.Material.Outlined.ExpandLess : Icons.Material.Outlined.ExpandMore)"
                               Color="Color.Default"
                               Size="Size.Small" />
            </MudStack>
        </div>

        <MudCollapse Expanded="@ExpandedValue">
            <MudTimeline TimelineOrientation="TimelineOrientation.Vertical" TimelinePosition="TimelinePosition.Start" Class="mt-3">
                @foreach (var log in OperationLog.OrderByDescending(l => l.Timestamp).Take(MaxItemsToShow))
                {
                    <MudTimelineItem Color="@GetLogColor(log.Type)" Size="Size.Small">
                        <ItemContent>
                            <MudText Typo="Typo.body2" Style="font-weight: 600;">@log.Message</MudText>
                            <MudText Typo="Typo.caption" Color="Color.Secondary">
                                @log.Timestamp.ToLocalTime().ToString("dd/MM/yyyy HH:mm:ss")
                            </MudText>
                            @if (!string.IsNullOrEmpty(log.Details))
                            {
                                <MudText Typo="Typo.caption" Color="Color.Secondary" Class="mt-1">
                                    @log.Details
                                </MudText>
                            }
                        </ItemContent>
                    </MudTimelineItem>
                }
            </MudTimeline>

            @if (OperationLog.Count > MaxItemsToShow)
            {
                <MudText Typo="Typo.caption" Color="Color.Secondary" Class="mt-2">
                    @TranslationService.GetTranslation("warehouse.showingRecent", "Mostrando le ultime {0} operazioni su {1} totali", MaxItemsToShow, OperationLog.Count)
                </MudText>
            }
        </MudCollapse>
    </MudPaper>
}

@code {
    [Parameter] public List<OperationLogEntry>? OperationLog { get; set; }
    [Parameter] public bool ExpandedValue { get; set; } = false;
    [Parameter] public EventCallback<bool> ExpandedValueChanged { get; set; }
    [Parameter] public int MaxItemsToShow { get; set; } = 20;
    
    private Color GetLogColor(string type) => type switch
    {
        "Success" => Color.Success,
        "Warning" => Color.Warning,
        "Error" => Color.Error,
        _ => Color.Info
    };
}
