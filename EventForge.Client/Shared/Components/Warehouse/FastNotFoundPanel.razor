@using EventForge.DTOs.Products
@inject ITranslationService TranslationService

<MudPaper Elevation="2" Class="pa-4 mb-4">
    <MudStack Spacing="3">
        <!-- Header -->
        <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
            <MudText Typo="Typo.h6">
                <MudIcon Icon="@Icons.Material.Outlined.SearchOff" Class="mr-2" />
                @TranslationService.GetTranslation("warehouse.productNotFound", "Prodotto non trovato")
            </MudText>
            <MudIconButton Icon="@Icons.Material.Outlined.Close"
                          Color="Color.Default"
                          Size="Size.Small"
                          OnClick="@(() => OnSkip.InvokeAsync())" />
        </MudStack>

        <!-- Barcode Chip -->
        <MudPaper Elevation="0" Class="pa-3" Style="background-color: var(--mud-palette-info-lighten);">
            <MudText Typo="Typo.body2" Class="mb-2">
                @TranslationService.GetTranslation("warehouse.barcodeToAssign", "Codice da Assegnare")
            </MudText>
            <MudChip T="string" Icon="@Icons.Material.Outlined.QrCode" Color="Color.Primary">@ScannedBarcode</MudChip>
        </MudPaper>

        <!-- Product Search Autocomplete -->
        <MudAutocomplete T="ProductDto"
                         @bind-Value="SelectedProduct"
                         Label="@TranslationService.GetTranslation("products.searchProduct", "Cerca Prodotto")"
                         Variant="Variant.Outlined"
                         SearchFunc="@OnSearchProducts"
                         ToStringFunc="@(p => p?.Name ?? string.Empty)"
                         Immediate="true"
                         ResetValueOnEmptyText="true"
                         CoerceText="true"
                         CoerceValue="false"
                         Adornment="Adornment.Start"
                         AdornmentIcon="@Icons.Material.Outlined.Search"
                         HelperText="@TranslationService.GetTranslation("products.searchByCodeOrDescription", "Cerca per codice o descrizione")">
            <ItemTemplate Context="product">
                <MudText Typo="Typo.body2">@product.Name</MudText>
                <MudText Typo="Typo.caption" Color="Color.Secondary">@product.Code @(!string.IsNullOrEmpty(product.ShortDescription) ? " - " + product.ShortDescription : "")</MudText>
            </ItemTemplate>
            <NoItemsTemplate>
                <MudText Typo="Typo.body2" Color="Color.Secondary">
                    @TranslationService.GetTranslation("products.noProductsFound", "Nessun prodotto trovato")
                </MudText>
            </NoItemsTemplate>
        </MudAutocomplete>

        <!-- Assignment Form (shown when product is selected) -->
        @if (SelectedProduct != null)
        {
            <MudPaper Elevation="1" Class="pa-3">
                <MudText Typo="Typo.subtitle2" Class="mb-3">
                    @TranslationService.GetTranslation("products.selectedProduct", "Prodotto Selezionato")
                </MudText>

                <MudGrid Spacing="2" Class="mb-3">
                    <MudItem xs="12" md="6">
                        <MudText Typo="Typo.body2" Color="Color.Secondary">@TranslationService.GetTranslation("products.productName", "Nome Prodotto")</MudText>
                        <MudText Typo="Typo.body1" Style="font-weight: 600;">@SelectedProduct.Name</MudText>
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <MudText Typo="Typo.body2" Color="Color.Secondary">@TranslationService.GetTranslation("products.productCode", "Codice Prodotto")</MudText>
                        <MudText Typo="Typo.body1" Style="font-weight: 600;">@SelectedProduct.Code</MudText>
                    </MudItem>
                </MudGrid>

                <!-- Code Assignment Fields -->
                <MudForm @ref="_assignForm" @bind-IsValid="@_assignFormValid">
                    <MudGrid Spacing="2">
                        <MudItem xs="12" md="6">
                            <MudSelect @bind-Value="CodeType"
                                       Label="@TranslationService.GetTranslation("products.codeType", "Tipo Codice")"
                                       Variant="Variant.Outlined"
                                       Required="true">
                                <MudSelectItem Value="@("EAN")">EAN</MudSelectItem>
                                <MudSelectItem Value="@("UPC")">UPC</MudSelectItem>
                                <MudSelectItem Value="@("SKU")">SKU</MudSelectItem>
                                <MudSelectItem Value="@("QR")">QR Code</MudSelectItem>
                                <MudSelectItem Value="@("Barcode")">@TranslationService.GetTranslation("products.barcode", "Codice a Barre")</MudSelectItem>
                                <MudSelectItem Value="@("Other")">@TranslationService.GetTranslation("products.other", "Altro")</MudSelectItem>
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="12" md="6">
                            <MudTextField @bind-Value="Code"
                                          Label="@TranslationService.GetTranslation("field.code", "Codice")"
                                          Variant="Variant.Outlined"
                                          Required="true"
                                          MaxLength="100" />
                        </MudItem>
                        <MudItem xs="12">
                            <MudTextField @bind-Value="AlternativeDescription"
                                          Label="@TranslationService.GetTranslation("products.alternativeDescription", "Descrizione Alternativa (opzionale)")"
                                          Variant="Variant.Outlined"
                                          Lines="2"
                                          MaxLength="200" />
                        </MudItem>
                    </MudGrid>
                </MudForm>
            </MudPaper>
        }

        <!-- Action Buttons -->
        <MudStack Row="true" Justify="Justify.FlexEnd" Spacing="2">
            <MudButton StartIcon="@Icons.Material.Outlined.SkipNext"
                      Color="Color.Default"
                      Variant="Variant.Outlined"
                      OnClick="@(() => OnSkip.InvokeAsync())">
                @TranslationService.GetTranslation("warehouse.skipProduct", "Salta")
            </MudButton>
            <MudButton StartIcon="@Icons.Material.Outlined.Inventory"
                      Color="Color.Info"
                      Variant="Variant.Outlined"
                      OnClick="@(() => OnOpenProducts.InvokeAsync())">
                @TranslationService.GetTranslation("warehouse.openProductManagement", "Apri gestione prodotti")
            </MudButton>
            @if (SelectedProduct != null)
            {
                <MudButton StartIcon="@Icons.Material.Outlined.Link"
                          Color="Color.Primary"
                          Variant="Variant.Filled"
                          OnClick="@HandleAssign"
                          Disabled="@(!_assignFormValid || IsLoading)">
                    @TranslationService.GetTranslation("warehouse.assignAndContinue", "Assegna e continua")
                </MudButton>
            }
        </MudStack>
    </MudStack>
</MudPaper>

@code {
    private MudForm? _assignForm;
    private bool _assignFormValid = false;
    
    [Parameter] public string ScannedBarcode { get; set; } = string.Empty;
    [Parameter] public ProductDto? SelectedProduct { get; set; }
    [Parameter] public EventCallback<ProductDto?> SelectedProductChanged { get; set; }
    [Parameter] public string CodeType { get; set; } = "Barcode";
    [Parameter] public EventCallback<string> CodeTypeChanged { get; set; }
    [Parameter] public string Code { get; set; } = string.Empty;
    [Parameter] public EventCallback<string> CodeChanged { get; set; }
    [Parameter] public string? AlternativeDescription { get; set; }
    [Parameter] public EventCallback<string?> AlternativeDescriptionChanged { get; set; }
    [Parameter] public bool IsLoading { get; set; }
    
    [Parameter] public Func<string, CancellationToken, Task<IEnumerable<ProductDto>>>? OnSearchProducts { get; set; }
    [Parameter] public EventCallback<(Guid productId, string codeType, string code, string? altDesc)> OnAssign { get; set; }
    [Parameter] public EventCallback OnSkip { get; set; }
    [Parameter] public EventCallback OnOpenProducts { get; set; }
    
    private async Task HandleAssign()
    {
        if (SelectedProduct == null || !_assignFormValid)
            return;
            
        await OnAssign.InvokeAsync((SelectedProduct.Id, CodeType, Code, AlternativeDescription));
    }
}
