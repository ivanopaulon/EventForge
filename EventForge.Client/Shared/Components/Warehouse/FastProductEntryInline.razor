@using EventForge.DTOs.Products
@using EventForge.DTOs.Warehouse
@inject ITranslationService TranslationService

<MudPaper Elevation="3" Class="pa-4 mb-4 product-entry-inline" Style="border: 2px solid var(--mud-palette-success); background-color: var(--mud-palette-background-grey);">
    <MudStack Spacing="2">
        <!-- Product Information Display with Undo Button -->
        <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
            <MudAlert Severity="Severity.Success" Dense="true" NoIcon="false" Variant="Variant.Text" Style="flex: 1;">
                <MudStack Row="true" Spacing="2" AlignItems="AlignItems.Center">
                    <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success" Size="Size.Large" />
                    <div>
                        <MudText Typo="Typo.h6" Style="font-weight: 600;">@CurrentProduct?.Name</MudText>
                        <MudText Typo="Typo.caption" Color="Color.Secondary">@TranslationService.GetTranslation("warehouse.productCode", "Codice"): @CurrentProduct?.Code</MudText>
                    </div>
                </MudStack>
            </MudAlert>
            @if (ShowUndo && LastAddedRow != null)
            {
                <MudButton StartIcon="@Icons.Material.Outlined.Undo"
                          Color="Color.Warning"
                          Variant="Variant.Outlined"
                          Size="Size.Small"
                          OnClick="@(() => OnUndo.InvokeAsync())">
                    @TranslationService.GetTranslation("warehouse.undoLast", "Annulla ultima")
                </MudButton>
            }
        </MudStack>

        <!-- Entry Form -->
        <MudGrid Spacing="2">
            <MudItem xs="12" sm="5">
                <MudAutocomplete T="StorageLocationDto"
                               Value="SelectedLocation"
                               Label="@TranslationService.GetTranslation("warehouse.storageLocation", "Ubicazione")"
                               Variant="Variant.Outlined"
                               Required="true"
                               SearchFunc="@OnSearchLocations"
                               ToStringFunc="@(l => l != null ? $"{l.Code} - {l.Description}" : string.Empty)"
                               Adornment="Adornment.Start"
                               AdornmentIcon="@Icons.Material.Outlined.LocationOn"
                               @ref="_locationAutocomplete"
                               @onkeydown="@OnLocationKeyDown"
                               ValueChanged="@HandleLocationChanged"
                               Immediate="true"
                               ResetValueOnEmptyText="true"
                               CoerceText="false"
                               CoerceValue="false">
                    <ItemTemplate Context="location">
                        <MudText Typo="Typo.body2">@location.Code</MudText>
                        @if (!string.IsNullOrEmpty(location.Description))
                        {
                            <MudText Typo="Typo.caption" Color="Color.Secondary">@location.Description</MudText>
                        }
                    </ItemTemplate>
                </MudAutocomplete>
            </MudItem>
            <MudItem xs="12" sm="4">
                <MudNumericField @bind-Value="QuantityValue"
                               Label="@TranslationService.GetTranslation("warehouse.quantity", "Quantità")"
                               Variant="Variant.Outlined"
                               Min="0"
                               Required="true"
                               Adornment="Adornment.Start"
                               AdornmentIcon="@Icons.Material.Outlined.Numbers"
                               @ref="_quantityField"
                               @onkeydown="@OnQuantityKeyDown" />
            </MudItem>
            <MudItem xs="12" sm="3">
                <MudButton Variant="Variant.Filled" 
                          Color="Color.Success"
                          FullWidth="true"
                          Size="Size.Large"
                          StartIcon="@Icons.Material.Filled.Add"
                          OnClick="@(() => OnConfirm.InvokeAsync())"
                          Disabled="@(!SelectedLocationId.HasValue || QuantityValue < 0)">
                    @TranslationService.GetTranslation("warehouse.confirmAdd", "✓ Conferma")
                </MudButton>
            </MudItem>
            <MudItem xs="12">
                <MudTextField @bind-Value="NotesValue"
                            Label="@TranslationService.GetTranslation("warehouse.notes", "Note (opzionale)")"
                            Variant="Variant.Outlined"
                            Lines="1"
                            MaxLength="200"
                            Adornment="Adornment.Start"
                            AdornmentIcon="@Icons.Material.Outlined.Comment" />
            </MudItem>
        </MudGrid>

        <!-- Quick Tips -->
        <MudAlert Severity="Severity.Info" Dense="true" NoIcon="false" Variant="Variant.Text">
            <MudText Typo="Typo.caption">
                <MudIcon Icon="@Icons.Material.Outlined.Keyboard" Size="Size.Small" Class="mr-1" />
                <strong>Suggerimento:</strong> Usa Tab per passare al campo successivo | Invio su Quantità = Conferma rapida | Esc = Annulla
            </MudText>
        </MudAlert>
    </MudStack>
</MudPaper>

@code {
    private MudAutocomplete<StorageLocationDto>? _locationAutocomplete;
    private MudNumericField<decimal>? _quantityField;
    
    [Parameter] public ProductDto? CurrentProduct { get; set; }
    [Parameter] public StorageLocationDto? SelectedLocation { get; set; }
    [Parameter] public EventCallback<StorageLocationDto?> SelectedLocationChanged { get; set; }
    [Parameter] public Guid? SelectedLocationId { get; set; }
    [Parameter] public EventCallback<Guid?> SelectedLocationIdChanged { get; set; }
    [Parameter] public decimal QuantityValue { get; set; } = 1;
    [Parameter] public EventCallback<decimal> QuantityValueChanged { get; set; }
    [Parameter] public string NotesValue { get; set; } = string.Empty;
    [Parameter] public EventCallback<string> NotesValueChanged { get; set; }
    [Parameter] public bool ShowUndo { get; set; } = true;
    [Parameter] public InventoryDocumentRowDto? LastAddedRow { get; set; }
    
    [Parameter] public Func<string, CancellationToken, Task<IEnumerable<StorageLocationDto>>>? OnSearchLocations { get; set; }
    [Parameter] public EventCallback OnConfirm { get; set; }
    [Parameter] public EventCallback OnUndo { get; set; }
    
    public async Task FocusLocationAsync()
    {
        if (_locationAutocomplete != null)
        {
            await Task.Delay(100);
            await _locationAutocomplete.FocusAsync();
        }
    }
    
    public async Task FocusQuantityAsync()
    {
        if (_quantityField != null)
        {
            await Task.Delay(100);
            await _quantityField.FocusAsync();
        }
    }
    
    private async Task OnLocationKeyDown(KeyboardEventArgs e)
    {
        // Tab or Enter to move to quantity field
        if ((e.Key == "Tab" || e.Key == "Enter") && SelectedLocationId.HasValue)
        {
            await FocusQuantityAsync();
        }
    }
    
    private async Task OnQuantityKeyDown(KeyboardEventArgs e)
    {
        // Enter to submit if form is valid
        if (e.Key == "Enter" && !e.ShiftKey && SelectedLocationId.HasValue && QuantityValue >= 0)
        {
            await OnConfirm.InvokeAsync();
        }
        else if (e.Key == "Escape")
        {
            // Cancel - let parent handle clearing
            StateHasChanged();
        }
    }
    
    private async Task HandleLocationChanged(StorageLocationDto? location)
    {
        SelectedLocation = location;
        await SelectedLocationChanged.InvokeAsync(location);
        await SelectedLocationIdChanged.InvokeAsync(location?.Id);
    }
}
