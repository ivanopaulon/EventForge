@inject ITranslationService TranslationService

<div class="sf-card p-4 mb-4">
    <h6 class="mb-3">
        <span class="e-icons e-barcode-scanner"></span>
        @TranslationService.GetTranslation("warehouse.scanBarcode", "Scansiona Codice a Barre")
    </h6>

    <div class="row g-3">
        <div class="col-md-8">
            <SfTextBox Value="@BarcodeValue"
                      Placeholder="@TranslationService.GetTranslation("warehouse.barcodeInput", "Codice a Barre")"
                      FloatLabelType="FloatLabelType.Auto"
                      @ref="_barcodeInput"
                      @bind-Value="@BarcodeValue"
                      @onkeydown="@OnKeyDown">
            </SfTextBox>
            <small class="text-muted">@TranslationService.GetTranslation("warehouse.scanOrTypeBarcode", "Scansiona o digita il codice a barre e premi Invio")</small>
        </div>
        <div class="col-md-4">
            <SfButton CssClass="e-primary w-100" IconCss="e-icons e-search"
                     OnClick="@(() => OnSearch.InvokeAsync(BarcodeValue))"
                     Disabled="@string.IsNullOrWhiteSpace(BarcodeValue)">
                @TranslationService.GetTranslation("common.search", "Cerca")
            </SfButton>
        </div>
        <div class="col-12">
            <div class="d-flex align-items-center">
                <SfSwitch Checked="@FastConfirmEnabledValue"
                         OnLabel="ON" OffLabel="OFF"
                         ValueChange="@OnToggleFastConfirm">
                </SfSwitch>
                <span class="ms-2">@TranslationService.GetTranslation("warehouse.fastConfirm", "Conferma rapida")</span>
            </div>
            <small class="text-muted">
                @TranslationService.GetTranslation("warehouse.fastConfirmHelp", "Quando attivo, le scansioni ripetute dello stesso prodotto vengono confermate automaticamente")
            </small>
        </div>
    </div>
</div>

@code {
    private SfTextBox? _barcodeInput;
    private bool _scanLock = false;
    private DateTime _lastScanAt = DateTime.MinValue;
    
    [Parameter] public string BarcodeValue { get; set; } = string.Empty;
    [Parameter] public EventCallback<string> BarcodeValueChanged { get; set; }
    [Parameter] public bool FastConfirmEnabledValue { get; set; } = true;
    [Parameter] public EventCallback<bool> FastConfirmEnabledValueChanged { get; set; }
    [Parameter] public TimeSpan DebounceTime { get; set; } = TimeSpan.FromMilliseconds(150);
    [Parameter] public EventCallback<string> OnBarcodeScanned { get; set; }
    [Parameter] public EventCallback<string> OnSearch { get; set; }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && _barcodeInput != null)
        {
            await _barcodeInput.FocusAsync();
        }
    }
    
    public async Task FocusAsync()
    {
        if (_barcodeInput != null)
        {
            await _barcodeInput.FocusAsync();
        }
    }
    
    public void ClearBarcode()
    {
        BarcodeValue = string.Empty;
        StateHasChanged();
    }
    
    private async Task OnKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            // Sanitize barcode input
            var sanitized = SanitizeBarcode(BarcodeValue);
            if (string.IsNullOrWhiteSpace(sanitized))
                return;
            
            // Apply debouncing and re-entrancy lock
            if (_scanLock)
                return;
            
            var now = DateTime.UtcNow;
            if ((now - _lastScanAt) < DebounceTime)
                return;
            
            _scanLock = true;
            _lastScanAt = now;
            
            try
            {
                BarcodeValue = sanitized;
                await BarcodeValueChanged.InvokeAsync(BarcodeValue);
                await OnBarcodeScanned.InvokeAsync(sanitized);
            }
            finally
            {
                _scanLock = false;
            }
        }
    }
    
    private async Task OnToggleFastConfirm(global::Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> args)
    {
        FastConfirmEnabledValue = args.Checked;
        await FastConfirmEnabledValueChanged.InvokeAsync(args.Checked);
    }
    
    private static string SanitizeBarcode(string raw) => raw?.Trim().Trim('\r', '\n') ?? string.Empty;
}
