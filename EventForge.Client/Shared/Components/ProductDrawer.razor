@using MudBlazor
@using EventForge.DTOs.Products
@using EventForge.DTOs.Common
@using EventForge.DTOs.Business
@using EventForge.DTOs.VatRates
@using EventForge.DTOs.UnitOfMeasures
@using EventForge.DTOs.Station
@using EventForge.Client.Shared.Components
@inject IProductService ProductService
@inject IBusinessPartyService BusinessPartyService
@inject IBrandService BrandService
@inject IModelService ModelService
@inject IFinancialService FinancialService
@inject IUMService UMService
@inject IEntityManagementService EntityManagementService
@inject ISnackbar Snackbar
@inject ILogger<ProductDrawer> Logger
@inject ITranslationService TranslationService
@inject IDialogService DialogService

<EntityDrawer @bind-IsOpen="@IsOpen"
              @bind-Mode="@Mode"
              EntityName="@TranslationService.GetTranslation("entity.product", "Prodotto")"
              Model="@_model"
              OnSave="@HandleSave"
              OnCancel="@HandleCancel"
              OnClose="@HandleClose"
              CustomTitle="@_customTitle"
              AllowEdit="@AllowEdit"
              Width="60%">
    
    <FormContent>
        <MudGrid>
            <!-- Basic Information Section -->
            <MudItem xs="12">
                <MudText Typo="Typo.h6" Class="mb-2">
                    <MudIcon Icon="@Icons.Material.Filled.Info" Class="mr-2" />
                    @TranslationService.GetTranslation("product.basicInfo", "Informazioni di Base")
                </MudText>
                <MudDivider Class="mb-3" />
            </MudItem>
            
            <MudItem xs="12" md="6">
                <MudTextField @bind-Value="_model.Name"
                              Label="@($"{TranslationService.GetTranslation("field.name", "Nome")} *")"
                              Variant="Variant.Outlined"
                              Required="true"
                              RequiredError="@TranslationService.GetTranslation("validation.nameRequired", "Il nome è obbligatorio")"
                              MaxLength="100"
                              Immediate="true"
                              aria-describedby="name-help" />
                <MudText id="name-help" Typo="Typo.caption" Class="mud-input-helper-text">
                    @TranslationService.GetTranslation("drawer.helperText.productName", "Nome del prodotto")
                </MudText>
            </MudItem>
            
            <MudItem xs="12" md="6">
                <MudTextField @bind-Value="_model.Code"
                              Label="@($"{TranslationService.GetTranslation("field.code", "Codice")} *")"
                              Variant="Variant.Outlined"
                              Required="true"
                              RequiredError="@TranslationService.GetTranslation("validation.codeRequired", "Il codice è obbligatorio")"
                              MaxLength="100"
                              Disabled="@(Mode == EntityDrawerMode.Edit)"
                              aria-describedby="code-help" />
                <MudText id="code-help" Typo="Typo.caption" Class="mud-input-helper-text">
                    @TranslationService.GetTranslation("drawer.helperText.productCode", "Codice identificativo del prodotto (immutabile dopo la creazione)")
                </MudText>
            </MudItem>
            
            <MudItem xs="12" md="6">
                <MudTextField @bind-Value="_model.ShortDescription"
                              Label="@TranslationService.GetTranslation("field.shortDescription", "Descrizione Breve")"
                              Variant="Variant.Outlined"
                              MaxLength="50"
                              aria-describedby="shortDesc-help" />
                <MudText id="shortDesc-help" Typo="Typo.caption" Class="mud-input-helper-text">
                    @TranslationService.GetTranslation("drawer.helperText.shortDescription", "Descrizione breve del prodotto")
                </MudText>
            </MudItem>
            
            <MudItem xs="12" md="6">
                <MudSelect @bind-Value="_model.Status"
                           Label="@($"{TranslationService.GetTranslation("field.status", "Stato")} *")"
                           Variant="Variant.Outlined"
                           Required="true"
                           aria-describedby="status-help">
                    <MudSelectItem Value="@ProductStatus.Active">@TranslationService.GetTranslation("status.active", "Attivo")</MudSelectItem>
                    <MudSelectItem Value="@ProductStatus.Suspended">@TranslationService.GetTranslation("status.suspended", "Sospeso")</MudSelectItem>
                    <MudSelectItem Value="@ProductStatus.OutOfStock">@TranslationService.GetTranslation("status.outOfStock", "Esaurito")</MudSelectItem>
                    <MudSelectItem Value="@ProductStatus.Deleted">@TranslationService.GetTranslation("status.deleted", "Eliminato")</MudSelectItem>
                </MudSelect>
                <MudText id="status-help" Typo="Typo.caption" Class="mud-input-helper-text">
                    @TranslationService.GetTranslation("drawer.helperText.status", "Stato corrente del prodotto")
                </MudText>
            </MudItem>
            
            <MudItem xs="12">
                <MudTextField @bind-Value="_model.Description"
                              Label="@TranslationService.GetTranslation("field.description", "Descrizione")"
                              Variant="Variant.Outlined"
                              Lines="3"
                              MaxLength="500"
                              aria-describedby="description-help" />
                <MudText id="description-help" Typo="Typo.caption" Class="mud-input-helper-text">
                    @TranslationService.GetTranslation("drawer.helperText.description", "Descrizione dettagliata del prodotto")
                </MudText>
            </MudItem>
            
            <!-- Pricing Section -->
            <MudItem xs="12" Class="mt-4">
                <MudText Typo="Typo.h6" Class="mb-2">
                    <MudIcon Icon="@Icons.Material.Filled.Euro" Class="mr-2" />
                    @TranslationService.GetTranslation("product.pricingInfo", "Informazioni Prezzo")
                </MudText>
                <MudDivider Class="mb-3" />
            </MudItem>
            
            <MudItem xs="12" md="4">
                <MudNumericField @bind-Value="_model.DefaultPrice"
                                 Label="@TranslationService.GetTranslation("field.defaultPrice", "Prezzo Predefinito")"
                                 Variant="Variant.Outlined"
                                 Min="0"
                                 Format="N2"
                                 aria-describedby="price-help" />
                <MudText id="price-help" Typo="Typo.caption" Class="mud-input-helper-text">
                    @TranslationService.GetTranslation("drawer.helperText.defaultPrice", "Prezzo predefinito del prodotto")
                </MudText>
            </MudItem>
            
            <MudItem xs="12" md="4">
                <MudSelect @bind-Value="_model.VatRateId"
                           Label="@TranslationService.GetTranslation("field.vatRate", "Aliquota IVA")"
                           Variant="Variant.Outlined"
                           Clearable="true"
                           aria-describedby="vatRate-help">
                    @if (_vatRates != null)
                    {
                        @foreach (var vat in _vatRates)
                        {
                            <MudSelectItem Value="@((Guid?)vat.Id)">@($"{vat.Name} ({vat.Percentage}%)")</MudSelectItem>
                        }
                    }
                </MudSelect>
                <MudText id="vatRate-help" Typo="Typo.caption" Class="mud-input-helper-text">
                    @TranslationService.GetTranslation("drawer.helperText.vatRate", "Aliquota IVA applicabile")
                </MudText>
            </MudItem>
            
            <MudItem xs="12" md="4">
                <MudCheckBox @bind-Value="_model.IsVatIncluded"
                             Label="@TranslationService.GetTranslation("field.isVatIncluded", "IVA Inclusa")"
                             Color="Color.Primary"
                             aria-describedby="vatIncluded-help" />
                <MudText id="vatIncluded-help" Typo="Typo.caption" Class="mud-input-helper-text">
                    @TranslationService.GetTranslation("drawer.helperText.isVatIncluded", "Indica se il prezzo include l'IVA")
                </MudText>
            </MudItem>
            
            <!-- Units and Classification Section -->
            <MudItem xs="12" Class="mt-4">
                <MudText Typo="Typo.h6" Class="mb-2">
                    <MudIcon Icon="@Icons.Material.Filled.Category" Class="mr-2" />
                    @TranslationService.GetTranslation("product.classification", "Classificazione e Unità")
                </MudText>
                <MudDivider Class="mb-3" />
            </MudItem>
            
            <MudItem xs="12" md="6">
                <MudSelect @bind-Value="_model.UnitOfMeasureId"
                           Label="@TranslationService.GetTranslation("field.unitOfMeasure", "Unità di Misura")"
                           Variant="Variant.Outlined"
                           Clearable="true"
                           aria-describedby="um-help">
                    @if (_unitsMeasure != null)
                    {
                        @foreach (var um in _unitsMeasure)
                        {
                            <MudSelectItem Value="@((Guid?)um.Id)">@($"{um.Name} ({um.Symbol})")</MudSelectItem>
                        }
                    }
                </MudSelect>
                <MudText id="um-help" Typo="Typo.caption" Class="mud-input-helper-text">
                    @TranslationService.GetTranslation("drawer.helperText.unitOfMeasure", "Unità di misura predefinita")
                </MudText>
            </MudItem>
            
            <MudItem xs="12" md="6">
                <MudSelect @bind-Value="_model.StationId"
                           Label="@TranslationService.GetTranslation("field.station", "Stazione")"
                           Variant="Variant.Outlined"
                           Clearable="true"
                           aria-describedby="station-help">
                    @if (_stations != null)
                    {
                        @foreach (var station in _stations)
                        {
                            <MudSelectItem Value="@((Guid?)station.Id)">@station.Name</MudSelectItem>
                        }
                    }
                </MudSelect>
                <MudText id="station-help" Typo="Typo.caption" Class="mud-input-helper-text">
                    @TranslationService.GetTranslation("drawer.helperText.station", "Stazione associata al prodotto")
                </MudText>
            </MudItem>
            
            <MudItem xs="12" md="4">
                <MudSelect @bind-Value="_model.CategoryNodeId"
                           Label="@TranslationService.GetTranslation("field.category", "Categoria")"
                           Variant="Variant.Outlined"
                           Clearable="true"
                           aria-describedby="category-help">
                    @if (_classificationNodes != null)
                    {
                        @foreach (var node in _classificationNodes.Where(n => n.Type == ProductClassificationType.Category))
                        {
                            <MudSelectItem Value="@((Guid?)node.Id)">@node.Name</MudSelectItem>
                        }
                    }
                </MudSelect>
                <MudText id="category-help" Typo="Typo.caption" Class="mud-input-helper-text">
                    @TranslationService.GetTranslation("drawer.helperText.category", "Categoria principale")
                </MudText>
            </MudItem>
            
            <MudItem xs="12" md="4">
                <MudSelect @bind-Value="_model.FamilyNodeId"
                           Label="@TranslationService.GetTranslation("field.subcategory", "Sottocategoria")"
                           Variant="Variant.Outlined"
                           Clearable="true"
                           aria-describedby="subcategory-help">
                    @if (_classificationNodes != null)
                    {
                        @foreach (var node in _classificationNodes.Where(n => n.Type == ProductClassificationType.Subcategory))
                        {
                            <MudSelectItem Value="@((Guid?)node.Id)">@node.Name</MudSelectItem>
                        }
                    }
                </MudSelect>
                <MudText id="subcategory-help" Typo="Typo.caption" Class="mud-input-helper-text">
                    @TranslationService.GetTranslation("drawer.helperText.subcategory", "Sottocategoria di prodotti")
                </MudText>
            </MudItem>
            
            <MudItem xs="12" md="4">
                <MudSelect @bind-Value="_model.GroupNodeId"
                           Label="@TranslationService.GetTranslation("field.line", "Linea")"
                           Variant="Variant.Outlined"
                           Clearable="true"
                           aria-describedby="line-help">
                    @if (_classificationNodes != null)
                    {
                        @foreach (var node in _classificationNodes.Where(n => n.Type == ProductClassificationType.Line))
                        {
                            <MudSelectItem Value="@((Guid?)node.Id)">@node.Name</MudSelectItem>
                        }
                    }
                </MudSelect>
                <MudText id="line-help" Typo="Typo.caption" Class="mud-input-helper-text">
                    @TranslationService.GetTranslation("drawer.helperText.line", "Linea di prodotti")
                </MudText>
            </MudItem>
            
            <!-- Brand and Model Section -->
            <MudItem xs="12" Class="mt-4">
                <MudText Typo="Typo.h6" Class="mb-2">
                    <MudIcon Icon="@Icons.Material.Filled.BrandingWatermark" Class="mr-2" />
                    @TranslationService.GetTranslation("product.brandModel", "Marchio e Modello")
                </MudText>
                <MudDivider Class="mb-3" />
            </MudItem>
            
            <MudItem xs="12" md="6">
                <MudSelect T="Guid?" 
                           Value="_model.BrandId"
                           ValueChanged="@OnBrandChanged"
                           Label="@TranslationService.GetTranslation("field.brand", "Marchio")"
                           Variant="Variant.Outlined"
                           Clearable="true"
                           aria-describedby="brand-help">
                    @if (_brands != null)
                    {
                        @foreach (var brand in _brands)
                        {
                            <MudSelectItem T="Guid?" Value="@((Guid?)brand.Id)">@brand.Name</MudSelectItem>
                        }
                    }
                </MudSelect>
                <MudText id="brand-help" Typo="Typo.caption" Class="mud-input-helper-text">
                    @TranslationService.GetTranslation("drawer.helperText.brand", "Marchio del prodotto")
                </MudText>
            </MudItem>
            
            <MudItem xs="12" md="6">
                <MudSelect @bind-Value="_model.ModelId"
                           Label="@TranslationService.GetTranslation("field.model", "Modello")"
                           Variant="Variant.Outlined"
                           Clearable="true"
                           Disabled="@(_model.BrandId == null || _models == null || !_models.Any())"
                           aria-describedby="model-help">
                    @if (_models != null && _model.BrandId != null)
                    {
                        @foreach (var model in _models)
                        {
                            <MudSelectItem Value="@((Guid?)model.Id)">@model.Name</MudSelectItem>
                        }
                    }
                </MudSelect>
                <MudText id="model-help" Typo="Typo.caption" Class="mud-input-helper-text">
                    @TranslationService.GetTranslation("drawer.helperText.model", "Modello del prodotto (seleziona prima un marchio)")
                </MudText>
            </MudItem>
            
            <!-- Supplier Section -->
            <MudItem xs="12" Class="mt-4">
                <MudText Typo="Typo.h6" Class="mb-2">
                    <MudIcon Icon="@Icons.Material.Filled.Store" Class="mr-2" />
                    @TranslationService.GetTranslation("product.supplier", "Fornitore")
                </MudText>
                <MudDivider Class="mb-3" />
            </MudItem>
            
            <MudItem xs="12">
                <MudSelect @bind-Value="_model.PreferredSupplierId"
                           Label="@TranslationService.GetTranslation("field.preferredSupplier", "Fornitore Preferito")"
                           Variant="Variant.Outlined"
                           Clearable="true"
                           aria-describedby="supplier-help">
                    @if (_businessParties != null)
                    {
                        @foreach (var supplier in _businessParties.Where(bp => bp.PartyType == BusinessPartyType.Supplier || bp.PartyType == BusinessPartyType.Both))
                        {
                            <MudSelectItem Value="@((Guid?)supplier.Id)">@supplier.Name</MudSelectItem>
                        }
                    }
                </MudSelect>
                <MudText id="supplier-help" Typo="Typo.caption" Class="mud-input-helper-text">
                    @TranslationService.GetTranslation("drawer.helperText.preferredSupplier", "Fornitore preferito per questo prodotto")
                </MudText>
            </MudItem>
            
            <!-- Inventory Section -->
            <MudItem xs="12" Class="mt-4">
                <MudText Typo="Typo.h6" Class="mb-2">
                    <MudIcon Icon="@Icons.Material.Filled.Inventory" Class="mr-2" />
                    @TranslationService.GetTranslation("product.inventory", "Gestione Inventario")
                </MudText>
                <MudDivider Class="mb-3" />
            </MudItem>
            
            <MudItem xs="12" md="6">
                <MudNumericField @bind-Value="_model.ReorderPoint"
                                 Label="@TranslationService.GetTranslation("field.reorderPoint", "Punto di Riordino")"
                                 Variant="Variant.Outlined"
                                 Min="0"
                                 Format="N2"
                                 aria-describedby="reorder-help" />
                <MudText id="reorder-help" Typo="Typo.caption" Class="mud-input-helper-text">
                    @TranslationService.GetTranslation("drawer.helperText.reorderPoint", "Livello di inventario al quale riordinare")
                </MudText>
            </MudItem>
            
            <MudItem xs="12" md="6">
                <MudNumericField @bind-Value="_model.SafetyStock"
                                 Label="@TranslationService.GetTranslation("field.safetyStock", "Stock di Sicurezza")"
                                 Variant="Variant.Outlined"
                                 Min="0"
                                 Format="N2"
                                 aria-describedby="safety-help" />
                <MudText id="safety-help" Typo="Typo.caption" Class="mud-input-helper-text">
                    @TranslationService.GetTranslation("drawer.helperText.safetyStock", "Stock minimo di sicurezza da mantenere")
                </MudText>
            </MudItem>
            
            <MudItem xs="12" md="6">
                <MudNumericField @bind-Value="_model.TargetStockLevel"
                                 Label="@TranslationService.GetTranslation("field.targetStockLevel", "Livello Stock Obiettivo")"
                                 Variant="Variant.Outlined"
                                 Min="0"
                                 Format="N2"
                                 aria-describedby="target-help" />
                <MudText id="target-help" Typo="Typo.caption" Class="mud-input-helper-text">
                    @TranslationService.GetTranslation("drawer.helperText.targetStockLevel", "Livello di inventario desiderato")
                </MudText>
            </MudItem>
            
            <MudItem xs="12" md="6">
                <MudNumericField @bind-Value="_model.AverageDailyDemand"
                                 Label="@TranslationService.GetTranslation("field.averageDailyDemand", "Domanda Media Giornaliera")"
                                 Variant="Variant.Outlined"
                                 Min="0"
                                 Format="N2"
                                 aria-describedby="demand-help" />
                <MudText id="demand-help" Typo="Typo.caption" Class="mud-input-helper-text">
                    @TranslationService.GetTranslation("drawer.helperText.averageDailyDemand", "Domanda media giornaliera per pianificazione inventario")
                </MudText>
            </MudItem>
            
            <!-- Bundle Section -->
            <MudItem xs="12" Class="mt-4">
                <MudCheckBox @bind-Value="_model.IsBundle"
                             Label="@TranslationService.GetTranslation("field.isBundle", "È un Bundle")"
                             Color="Color.Primary"
                             Disabled="@(Mode == EntityDrawerMode.Edit)"
                             aria-describedby="bundle-help" />
                <MudText id="bundle-help" Typo="Typo.caption" Class="mud-input-helper-text">
                    @TranslationService.GetTranslation("drawer.helperText.isBundle", "Indica se il prodotto è composto da altri prodotti (immutabile dopo la creazione)")
                </MudText>
            </MudItem>
            
            @if (Mode == EntityDrawerMode.Edit && OriginalProduct != null)
            {
                <MudItem xs="12" md="6">
                    <MudTextField Value="@OriginalProduct.Id.ToString()"
                                  Label="@TranslationService.GetTranslation("field.id", "ID")"
                                  Variant="Variant.Outlined"
                                  ReadOnly="true"
                                  aria-label="@TranslationService.GetTranslation("drawer.aria.id", "Identificativo unico")" />
                </MudItem>
                
                <MudItem xs="12" md="6">
                    <MudTextField Value="@OriginalProduct.CreatedAt.ToString("dd/MM/yyyy HH:mm")"
                                  Label="@TranslationService.GetTranslation("field.createdAt", "Data Creazione")"
                                  Variant="Variant.Outlined"
                                  ReadOnly="true"
                                  aria-label="@TranslationService.GetTranslation("drawer.aria.createdAt", "Data e ora di creazione")" />
                </MudItem>
                
                @* Suppliers Section with Actions *@
                @if (_loadingSuppliers)
                {
                    <MudItem xs="12" Class="mt-4">
                        <MudProgressLinear Color="Color.Primary" Indeterminate="true" />
                        <MudText Typo="Typo.caption" Align="Align.Center" Class="mt-2">
                            @TranslationService.GetTranslation("common.loading", "Caricamento...")
                        </MudText>
                    </MudItem>
                }
                else
                {
                    <MudItem xs="12" Class="mt-4">
                        <MudExpansionPanels>
                            <MudExpansionPanel>
                                <TitleContent>
                                    <div class="d-flex justify-space-between align-center" style="width: 100%;">
                                        <MudText>@($"{TranslationService.GetTranslation("field.supplierCount", "Fornitori")} ({_suppliers?.Count() ?? 0})")</MudText>
                                        <MudIconButton Icon="@Icons.Material.Filled.Add" 
                                                      Color="Color.Primary" 
                                                      Size="Size.Small"
                                                      OnClick="@(() => OpenAddSupplierDialog())"
                                                      aria-label="@TranslationService.GetTranslation("button.addSupplier", "Aggiungi fornitore")" />
                                    </div>
                                </TitleContent>
                                <ChildContent>
                                    @if (_suppliers?.Any() == true)
                                    {
                                        <MudTable Items="_suppliers" Hover="true" Dense="true" Striped="true">
                                            <HeaderContent>
                                                <MudTh>@TranslationService.GetTranslation("field.supplierName", "Nome Fornitore")</MudTh>
                                                <MudTh>@TranslationService.GetTranslation("field.supplierCode", "Codice Fornitore")</MudTh>
                                                <MudTh>@TranslationService.GetTranslation("field.unitCost", "Costo Unitario")</MudTh>
                                                <MudTh>@TranslationService.GetTranslation("field.leadTime", "Tempi di Consegna")</MudTh>
                                                <MudTh>@TranslationService.GetTranslation("field.preferred", "Preferito")</MudTh>
                                                <MudTh>@TranslationService.GetTranslation("common.actions", "Azioni")</MudTh>
                                            </HeaderContent>
                                            <RowTemplate>
                                                <MudTd DataLabel="@TranslationService.GetTranslation("field.supplierName", "Nome Fornitore")">@context.SupplierName</MudTd>
                                                <MudTd DataLabel="@TranslationService.GetTranslation("field.supplierCode", "Codice Fornitore")">@context.SupplierProductCode</MudTd>
                                                <MudTd DataLabel="@TranslationService.GetTranslation("field.unitCost", "Costo Unitario")">
                                                    @if (context.UnitCost.HasValue)
                                                    {
                                                        <text>@context.UnitCost.Value.ToString("N2") @context.Currency</text>
                                                    }
                                                </MudTd>
                                                <MudTd DataLabel="@TranslationService.GetTranslation("field.leadTime", "Tempi di Consegna")">
                                                    @if (context.LeadTimeDays.HasValue)
                                                    {
                                                        <text>@context.LeadTimeDays @TranslationService.GetTranslation("common.days", "giorni")</text>
                                                    }
                                                </MudTd>
                                                <MudTd DataLabel="@TranslationService.GetTranslation("field.preferred", "Preferito")">
                                                    @if (context.Preferred)
                                                    {
                                                        <MudIcon Icon="@Icons.Material.Filled.Star" Color="Color.Warning" Size="Size.Small" />
                                                    }
                                                </MudTd>
                                                <MudTd>
                                                    <MudIconButton Icon="@Icons.Material.Filled.Edit" 
                                                                  Color="Color.Primary" 
                                                                  Size="Size.Small"
                                                                  OnClick="@(() => OpenEditSupplierDialog(context))"
                                                                  title="@TranslationService.GetTranslation("common.edit", "Modifica")" />
                                                    <MudIconButton Icon="@Icons.Material.Filled.Delete" 
                                                                  Color="Color.Error" 
                                                                  Size="Size.Small"
                                                                  OnClick="@(() => DeleteSupplier(context.Id))"
                                                                  title="@TranslationService.GetTranslation("common.delete", "Elimina")" />
                                                </MudTd>
                                            </RowTemplate>
                                        </MudTable>
                                    }
                                    else
                                    {
                                        <MudText Typo="Typo.body2" Class="pa-4">@TranslationService.GetTranslation("messages.noSuppliers", "Nessun fornitore disponibile")</MudText>
                                    }
                                </ChildContent>
                            </MudExpansionPanel>
                        </MudExpansionPanels>
                    </MudItem>
                }
            }
        </MudGrid>
    </FormContent>
    
    <ViewContent>
        <MudGrid>
            <!-- Basic Information Section -->
            <MudItem xs="12">
                <MudText Typo="Typo.h6" Class="mb-2">
                    <MudIcon Icon="@Icons.Material.Filled.Info" Class="mr-2" />
                    @TranslationService.GetTranslation("product.basicInfo", "Informazioni di Base")
                </MudText>
                <MudDivider Class="mb-3" />
            </MudItem>
            
            <MudItem xs="12" md="6">
                <MudTextField Value="@(OriginalProduct?.Name ?? "")"
                              Label="@TranslationService.GetTranslation("field.name", "Nome")"
                              Variant="Variant.Outlined"
                              ReadOnly="true" />
            </MudItem>
            
            <MudItem xs="12" md="6">
                <MudTextField Value="@(OriginalProduct?.Code ?? "")"
                              Label="@TranslationService.GetTranslation("field.code", "Codice")"
                              Variant="Variant.Outlined"
                              ReadOnly="true" />
            </MudItem>
            
            <MudItem xs="12" md="6">
                <MudTextField Value="@(OriginalProduct?.ShortDescription ?? "")"
                              Label="@TranslationService.GetTranslation("field.shortDescription", "Descrizione Breve")"
                              Variant="Variant.Outlined"
                              ReadOnly="true" />
            </MudItem>
            
            <MudItem xs="12" md="6">
                <MudChip T="string" 
                         Color="@GetStatusColor(OriginalProduct?.Status ?? ProductStatus.Active)" 
                         Size="Size.Medium">
                    @GetStatusText(OriginalProduct?.Status ?? ProductStatus.Active)
                </MudChip>
            </MudItem>
            
            <MudItem xs="12">
                <MudTextField Value="@(OriginalProduct?.Description ?? "")"
                              Label="@TranslationService.GetTranslation("field.description", "Descrizione")"
                              Variant="Variant.Outlined"
                              Lines="3"
                              ReadOnly="true" />
            </MudItem>
            
            <!-- Pricing Section -->
            <MudItem xs="12" Class="mt-4">
                <MudText Typo="Typo.h6" Class="mb-2">
                    <MudIcon Icon="@Icons.Material.Filled.Euro" Class="mr-2" />
                    @TranslationService.GetTranslation("product.pricingInfo", "Informazioni Prezzo")
                </MudText>
                <MudDivider Class="mb-3" />
            </MudItem>
            
            <MudItem xs="12" md="4">
                <MudTextField Value="@(OriginalProduct?.DefaultPrice?.ToString("N2") ?? "-")"
                              Label="@TranslationService.GetTranslation("field.defaultPrice", "Prezzo Predefinito")"
                              Variant="Variant.Outlined"
                              ReadOnly="true" />
            </MudItem>
            
            <MudItem xs="12" md="4">
                <MudTextField Value="@GetVatRateName(OriginalProduct?.VatRateId)"
                              Label="@TranslationService.GetTranslation("field.vatRate", "Aliquota IVA")"
                              Variant="Variant.Outlined"
                              ReadOnly="true" />
            </MudItem>
            
            <MudItem xs="12" md="4">
                <MudCheckBox Value="@(OriginalProduct?.IsVatIncluded ?? false)"
                             Label="@TranslationService.GetTranslation("field.isVatIncluded", "IVA Inclusa")"
                             ReadOnly="true"
                             Color="Color.Primary" />
            </MudItem>
            
            <!-- Units and Classification Section -->
            <MudItem xs="12" Class="mt-4">
                <MudText Typo="Typo.h6" Class="mb-2">
                    <MudIcon Icon="@Icons.Material.Filled.Category" Class="mr-2" />
                    @TranslationService.GetTranslation("product.classification", "Classificazione e Unità")
                </MudText>
                <MudDivider Class="mb-3" />
            </MudItem>
            
            <MudItem xs="12" md="6">
                <MudTextField Value="@GetUnitOfMeasureName(OriginalProduct?.UnitOfMeasureId)"
                              Label="@TranslationService.GetTranslation("field.unitOfMeasure", "Unità di Misura")"
                              Variant="Variant.Outlined"
                              ReadOnly="true" />
            </MudItem>
            
            <MudItem xs="12" md="6">
                <MudTextField Value="@GetStationName(OriginalProduct?.StationId)"
                              Label="@TranslationService.GetTranslation("field.station", "Stazione")"
                              Variant="Variant.Outlined"
                              ReadOnly="true" />
            </MudItem>
            
            <MudItem xs="12" md="4">
                <MudTextField Value="@GetClassificationNodeName(OriginalProduct?.CategoryNodeId)"
                              Label="@TranslationService.GetTranslation("field.category", "Categoria")"
                              Variant="Variant.Outlined"
                              ReadOnly="true" />
            </MudItem>
            
            <MudItem xs="12" md="4">
                <MudTextField Value="@GetClassificationNodeName(OriginalProduct?.FamilyNodeId)"
                              Label="@TranslationService.GetTranslation("field.subcategory", "Sottocategoria")"
                              Variant="Variant.Outlined"
                              ReadOnly="true" />
            </MudItem>
            
            <MudItem xs="12" md="4">
                <MudTextField Value="@GetClassificationNodeName(OriginalProduct?.GroupNodeId)"
                              Label="@TranslationService.GetTranslation("field.line", "Linea")"
                              Variant="Variant.Outlined"
                              ReadOnly="true" />
            </MudItem>
            
            <!-- Brand and Model Section -->
            <MudItem xs="12" Class="mt-4">
                <MudText Typo="Typo.h6" Class="mb-2">
                    <MudIcon Icon="@Icons.Material.Filled.BrandingWatermark" Class="mr-2" />
                    @TranslationService.GetTranslation("product.brandModel", "Marchio e Modello")
                </MudText>
                <MudDivider Class="mb-3" />
            </MudItem>
            
            <MudItem xs="12" md="6">
                <MudTextField Value="@GetBrandName(OriginalProduct?.BrandId)"
                              Label="@TranslationService.GetTranslation("field.brand", "Marchio")"
                              Variant="Variant.Outlined"
                              ReadOnly="true" />
            </MudItem>
            
            <MudItem xs="12" md="6">
                <MudTextField Value="@GetModelName(OriginalProduct?.ModelId)"
                              Label="@TranslationService.GetTranslation("field.model", "Modello")"
                              Variant="Variant.Outlined"
                              ReadOnly="true" />
            </MudItem>
            
            <!-- Supplier Section -->
            <MudItem xs="12" Class="mt-4">
                <MudText Typo="Typo.h6" Class="mb-2">
                    <MudIcon Icon="@Icons.Material.Filled.Store" Class="mr-2" />
                    @TranslationService.GetTranslation("product.supplier", "Fornitore")
                </MudText>
                <MudDivider Class="mb-3" />
            </MudItem>
            
            <MudItem xs="12">
                <MudTextField Value="@GetSupplierName(OriginalProduct?.PreferredSupplierId)"
                              Label="@TranslationService.GetTranslation("field.preferredSupplier", "Fornitore Preferito")"
                              Variant="Variant.Outlined"
                              ReadOnly="true" />
            </MudItem>
            
            <!-- Inventory Section -->
            <MudItem xs="12" Class="mt-4">
                <MudText Typo="Typo.h6" Class="mb-2">
                    <MudIcon Icon="@Icons.Material.Filled.Inventory" Class="mr-2" />
                    @TranslationService.GetTranslation("product.inventory", "Gestione Inventario")
                </MudText>
                <MudDivider Class="mb-3" />
            </MudItem>
            
            <MudItem xs="12" md="6">
                <MudTextField Value="@(OriginalProduct?.ReorderPoint?.ToString("N2") ?? "-")"
                              Label="@TranslationService.GetTranslation("field.reorderPoint", "Punto di Riordino")"
                              Variant="Variant.Outlined"
                              ReadOnly="true" />
            </MudItem>
            
            <MudItem xs="12" md="6">
                <MudTextField Value="@(OriginalProduct?.SafetyStock?.ToString("N2") ?? "-")"
                              Label="@TranslationService.GetTranslation("field.safetyStock", "Stock di Sicurezza")"
                              Variant="Variant.Outlined"
                              ReadOnly="true" />
            </MudItem>
            
            <MudItem xs="12" md="6">
                <MudTextField Value="@(OriginalProduct?.TargetStockLevel?.ToString("N2") ?? "-")"
                              Label="@TranslationService.GetTranslation("field.targetStockLevel", "Livello Stock Obiettivo")"
                              Variant="Variant.Outlined"
                              ReadOnly="true" />
            </MudItem>
            
            <MudItem xs="12" md="6">
                <MudTextField Value="@(OriginalProduct?.AverageDailyDemand?.ToString("N2") ?? "-")"
                              Label="@TranslationService.GetTranslation("field.averageDailyDemand", "Domanda Media Giornaliera")"
                              Variant="Variant.Outlined"
                              ReadOnly="true" />
            </MudItem>
            
            <!-- Bundle Section -->
            <MudItem xs="12" Class="mt-4">
                <MudCheckBox Value="@(OriginalProduct?.IsBundle ?? false)"
                             Label="@TranslationService.GetTranslation("field.isBundle", "È un Bundle")"
                             ReadOnly="true"
                             Color="Color.Primary" />
            </MudItem>
            
            @if (OriginalProduct != null)
            {
                <MudItem xs="12" md="6">
                    <MudTextField Value="@OriginalProduct.Id.ToString()"
                                  Label="@TranslationService.GetTranslation("field.id", "ID")"
                                  Variant="Variant.Outlined"
                                  ReadOnly="true" />
                </MudItem>
                
                <MudItem xs="12" md="6">
                    <MudTextField Value="@OriginalProduct.CreatedAt.ToString("dd/MM/yyyy HH:mm")"
                                  Label="@TranslationService.GetTranslation("field.createdAt", "Data Creazione")"
                                  Variant="Variant.Outlined"
                                  ReadOnly="true" />
                </MudItem>
                
                @if (!string.IsNullOrWhiteSpace(OriginalProduct.CreatedBy))
                {
                    <MudItem xs="12">
                        <MudTextField Value="@OriginalProduct.CreatedBy"
                                      Label="@TranslationService.GetTranslation("field.createdBy", "Creato Da")"
                                      Variant="Variant.Outlined"
                                      ReadOnly="true" />
                    </MudItem>
                }
                
                @* Suppliers Section in View Mode *@
                @if (_loadingSuppliers)
                {
                    <MudItem xs="12" Class="mt-4">
                        <MudProgressLinear Color="Color.Primary" Indeterminate="true" />
                        <MudText Typo="Typo.caption" Align="Align.Center" Class="mt-2">
                            @TranslationService.GetTranslation("common.loading", "Caricamento...")
                        </MudText>
                    </MudItem>
                }
                else if (_suppliers?.Any() == true)
                {
                    <MudItem xs="12" Class="mt-4">
                        <MudExpansionPanels>
                            <MudExpansionPanel Text="@($"{TranslationService.GetTranslation("field.supplierCount", "Fornitori")} ({_suppliers.Count()})")" Expanded="false">
                                <MudTable Items="_suppliers" Hover="true" Dense="true" Striped="true">
                                    <HeaderContent>
                                        <MudTh>@TranslationService.GetTranslation("field.supplierName", "Nome Fornitore")</MudTh>
                                        <MudTh>@TranslationService.GetTranslation("field.supplierCode", "Codice Fornitore")</MudTh>
                                        <MudTh>@TranslationService.GetTranslation("field.unitCost", "Costo Unitario")</MudTh>
                                        <MudTh>@TranslationService.GetTranslation("field.leadTime", "Tempi di Consegna")</MudTh>
                                        <MudTh>@TranslationService.GetTranslation("field.preferred", "Preferito")</MudTh>
                                    </HeaderContent>
                                    <RowTemplate>
                                        <MudTd DataLabel="@TranslationService.GetTranslation("field.supplierName", "Nome Fornitore")">@context.SupplierName</MudTd>
                                        <MudTd DataLabel="@TranslationService.GetTranslation("field.supplierCode", "Codice Fornitore")">@context.SupplierProductCode</MudTd>
                                        <MudTd DataLabel="@TranslationService.GetTranslation("field.unitCost", "Costo Unitario")">
                                            @if (context.UnitCost.HasValue)
                                            {
                                                <text>@context.UnitCost.Value.ToString("N2") @context.Currency</text>
                                            }
                                        </MudTd>
                                        <MudTd DataLabel="@TranslationService.GetTranslation("field.leadTime", "Tempi di Consegna")">
                                            @if (context.LeadTimeDays.HasValue)
                                            {
                                                <text>@context.LeadTimeDays @TranslationService.GetTranslation("common.days", "giorni")</text>
                                            }
                                        </MudTd>
                                        <MudTd DataLabel="@TranslationService.GetTranslation("field.preferred", "Preferito")">
                                            @if (context.Preferred)
                                            {
                                                <MudIcon Icon="@Icons.Material.Filled.Star" Color="Color.Warning" Size="Size.Small" />
                                            }
                                        </MudTd>
                                    </RowTemplate>
                                </MudTable>
                            </MudExpansionPanel>
                        </MudExpansionPanels>
                    </MudItem>
                }
            }
        </MudGrid>
    </ViewContent>
    
</EntityDrawer>

@code {
    private ProductDto _model = new() { Name = string.Empty, Code = string.Empty, Status = ProductStatus.Active };
    private string? _customTitle;
    private bool _loadingSuppliers = false;
    private IEnumerable<ProductSupplierDto>? _suppliers;
    
    // Dropdown data
    private IEnumerable<VatRateDto>? _vatRates;
    private IEnumerable<UMDto>? _unitsMeasure;
    private IEnumerable<StationDto>? _stations;
    private IEnumerable<ClassificationNodeDto>? _classificationNodes;
    private IEnumerable<BrandDto>? _brands;
    private IEnumerable<ModelDto>? _models;
    private IEnumerable<BusinessPartyDto>? _businessParties;

    /// <summary>
    /// Whether the drawer is open.
    /// </summary>
    [Parameter] public bool IsOpen { get; set; }
    
    /// <summary>
    /// Event callback when IsOpen changes.
    /// </summary>
    [Parameter] public EventCallback<bool> IsOpenChanged { get; set; }

    /// <summary>
    /// Mode of the drawer (Create, Edit, View).
    /// </summary>
    [Parameter] public EntityDrawerMode Mode { get; set; } = EntityDrawerMode.Create;
    
    /// <summary>
    /// Event callback when Mode changes.
    /// </summary>
    [Parameter] public EventCallback<EntityDrawerMode> ModeChanged { get; set; }

    /// <summary>
    /// Original product for edit/view mode.
    /// </summary>
    [Parameter] public ProductDto? OriginalProduct { get; set; }

    /// <summary>
    /// Whether edit button is shown in view mode.
    /// </summary>
    [Parameter] public bool AllowEdit { get; set; } = true;

    /// <summary>
    /// Event callback when a product is created.
    /// </summary>
    [Parameter] public EventCallback<ProductDto> OnProductCreated { get; set; }

    /// <summary>
    /// Event callback when a product is updated.
    /// </summary>
    [Parameter] public EventCallback<ProductDto> OnProductUpdated { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (IsOpen && Mode == EntityDrawerMode.Edit && OriginalProduct != null)
        {
            // Copy ALL properties for editing
            _model = new ProductDto
            {
                Id = OriginalProduct.Id,
                Name = OriginalProduct.Name,
                Code = OriginalProduct.Code,
                Description = OriginalProduct.Description,
                ShortDescription = OriginalProduct.ShortDescription,
                Status = OriginalProduct.Status,
                DefaultPrice = OriginalProduct.DefaultPrice,
                IsVatIncluded = OriginalProduct.IsVatIncluded,
                VatRateId = OriginalProduct.VatRateId,
                UnitOfMeasureId = OriginalProduct.UnitOfMeasureId,
                CategoryNodeId = OriginalProduct.CategoryNodeId,
                FamilyNodeId = OriginalProduct.FamilyNodeId,
                GroupNodeId = OriginalProduct.GroupNodeId,
                StationId = OriginalProduct.StationId,
                IsBundle = OriginalProduct.IsBundle,
                BrandId = OriginalProduct.BrandId,
                ModelId = OriginalProduct.ModelId,
                PreferredSupplierId = OriginalProduct.PreferredSupplierId,
                ReorderPoint = OriginalProduct.ReorderPoint,
                SafetyStock = OriginalProduct.SafetyStock,
                TargetStockLevel = OriginalProduct.TargetStockLevel,
                AverageDailyDemand = OriginalProduct.AverageDailyDemand
            };

            // Load dropdown data and suppliers
            await LoadDropdownDataAsync();
            await LoadSuppliersAsync();
        }
        else if (IsOpen && Mode == EntityDrawerMode.View && OriginalProduct != null)
        {
            _model = OriginalProduct;
            await LoadDropdownDataAsync();
            await LoadSuppliersAsync();
        }
        else if (IsOpen && Mode == EntityDrawerMode.Create)
        {
            _model = new ProductDto { Name = string.Empty, Code = string.Empty, Status = ProductStatus.Active };
            ClearSuppliers();
            await LoadDropdownDataAsync();
        }
    }

    private async Task LoadDropdownDataAsync()
    {
        try
        {
            // Load all dropdown data in parallel for better performance
            var tasks = new List<Task>
            {
                LoadVatRatesAsync(),
                LoadUnitsOfMeasureAsync(),
                LoadStationsAsync(),
                LoadClassificationNodesAsync(),
                LoadBrandsAsync(),
                LoadBusinessPartiesAsync()
            };

            // If editing and a brand is selected, also load models
            if (_model.BrandId.HasValue)
            {
                tasks.Add(LoadModelsForBrandAsync(_model.BrandId.Value));
            }

            await Task.WhenAll(tasks);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to load dropdown data");
            Snackbar.Add(TranslationService.GetTranslation("messages.loadFailed", "Errore durante il caricamento dei dati"), Severity.Warning);
        }
    }

    private async Task LoadVatRatesAsync()
    {
        try
        {
            _vatRates = await FinancialService.GetVatRatesAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to load VAT rates");
        }
    }

    private async Task LoadUnitsOfMeasureAsync()
    {
        try
        {
            var result = await UMService.GetUMsAsync(1, 100);
            _unitsMeasure = result?.Items ?? new List<UMDto>();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to load units of measure");
        }
    }

    private async Task LoadStationsAsync()
    {
        try
        {
            _stations = await ProductService.GetStationsAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to load stations");
        }
    }

    private async Task LoadClassificationNodesAsync()
    {
        try
        {
            _classificationNodes = await EntityManagementService.GetClassificationNodesAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to load classification nodes");
        }
    }

    private async Task LoadBrandsAsync()
    {
        try
        {
            var result = await BrandService.GetBrandsAsync(1, 100);
            _brands = result?.Items ?? new List<BrandDto>();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to load brands");
        }
    }

    private async Task LoadModelsForBrandAsync(Guid brandId)
    {
        try
        {
            var result = await ModelService.GetModelsByBrandIdAsync(brandId, 1, 100);
            _models = result?.Items ?? new List<ModelDto>();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to load models for brand {BrandId}", brandId);
        }
    }

    private async Task LoadBusinessPartiesAsync()
    {
        try
        {
            var result = await BusinessPartyService.GetBusinessPartiesAsync(1, 1000);
            _businessParties = result?.Items ?? new List<BusinessPartyDto>();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to load business parties");
        }
    }

    private async Task OnBrandChanged(Guid? brandId)
    {
        _model.BrandId = brandId;
        _model.ModelId = null; // Clear model when brand changes
        _models = null;

        if (brandId.HasValue)
        {
            await LoadModelsForBrandAsync(brandId.Value);
        }
        
        StateHasChanged();
    }

    private async Task LoadSuppliersAsync()
    {
        if (OriginalProduct == null) return;

        _loadingSuppliers = true;
        try
        {
            _suppliers = await ProductService.GetProductSuppliersAsync(OriginalProduct.Id);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to load suppliers for product {ProductId}", OriginalProduct.Id);
            Snackbar.Add(TranslationService.GetTranslation("messages.loadFailed", "Errore durante il caricamento"), Severity.Warning);
        }
        finally
        {
            _loadingSuppliers = false;
        }
    }

    private void ClearSuppliers()
    {
        _suppliers = null;
        _loadingSuppliers = false;
    }

    private async Task HandleSave()
    {
        try
        {
            if (Mode == EntityDrawerMode.Create)
            {
                var createDto = new CreateProductDto
                {
                    Name = _model.Name,
                    Code = _model.Code,
                    Description = _model.Description,
                    ShortDescription = _model.ShortDescription,
                    Status = _model.Status,
                    DefaultPrice = _model.DefaultPrice,
                    IsVatIncluded = _model.IsVatIncluded,
                    VatRateId = _model.VatRateId,
                    UnitOfMeasureId = _model.UnitOfMeasureId,
                    CategoryNodeId = _model.CategoryNodeId,
                    FamilyNodeId = _model.FamilyNodeId,
                    GroupNodeId = _model.GroupNodeId,
                    StationId = _model.StationId,
                    IsBundle = _model.IsBundle,
                    BrandId = _model.BrandId,
                    ModelId = _model.ModelId,
                    PreferredSupplierId = _model.PreferredSupplierId,
                    ReorderPoint = _model.ReorderPoint,
                    SafetyStock = _model.SafetyStock,
                    TargetStockLevel = _model.TargetStockLevel,
                    AverageDailyDemand = _model.AverageDailyDemand
                };
                
                var newProduct = await ProductService.CreateProductAsync(createDto);
                if (newProduct != null)
                {
                    Snackbar.Add(TranslationService.GetTranslation("messages.createSuccessful", "Creazione completata con successo"), Severity.Success);
                    
                    if (OnProductCreated.HasDelegate)
                    {
                        await OnProductCreated.InvokeAsync(newProduct);
                    }
                }
                else
                {
                    Snackbar.Add(TranslationService.GetTranslation("messages.createFailed", "Errore durante la creazione"), Severity.Error);
                    return;
                }
            }
            else if (Mode == EntityDrawerMode.Edit && OriginalProduct != null)
            {
                var updateDto = new UpdateProductDto
                {
                    Name = _model.Name,
                    Description = _model.Description,
                    ShortDescription = _model.ShortDescription,
                    Status = _model.Status,
                    DefaultPrice = _model.DefaultPrice,
                    IsVatIncluded = _model.IsVatIncluded,
                    VatRateId = _model.VatRateId,
                    UnitOfMeasureId = _model.UnitOfMeasureId,
                    CategoryNodeId = _model.CategoryNodeId,
                    FamilyNodeId = _model.FamilyNodeId,
                    GroupNodeId = _model.GroupNodeId,
                    StationId = _model.StationId,
                    BrandId = _model.BrandId,
                    ModelId = _model.ModelId,
                    PreferredSupplierId = _model.PreferredSupplierId,
                    ReorderPoint = _model.ReorderPoint,
                    SafetyStock = _model.SafetyStock,
                    TargetStockLevel = _model.TargetStockLevel,
                    AverageDailyDemand = _model.AverageDailyDemand
                };
                
                var updatedProduct = await ProductService.UpdateProductAsync(OriginalProduct.Id, updateDto);
                if (updatedProduct != null)
                {
                    Snackbar.Add(TranslationService.GetTranslation("messages.updateSuccessful", "Aggiornamento completato con successo"), Severity.Success);
                    
                    if (OnProductUpdated.HasDelegate)
                    {
                        await OnProductUpdated.InvokeAsync(updatedProduct);
                    }
                }
                else
                {
                    Snackbar.Add(TranslationService.GetTranslation("messages.updateFailed", "Errore durante l'aggiornamento"), Severity.Error);
                    return;
                }
            }
            
            await HandleClose();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to save product");
            var message = Mode == EntityDrawerMode.Create ? 
                TranslationService.GetTranslation("messages.createFailed", "Errore durante la creazione") : 
                TranslationService.GetTranslation("messages.updateFailed", "Errore durante l'aggiornamento");
            Snackbar.Add($"{message}: {ex.Message}", Severity.Error);
        }
    }

    private async Task HandleCancel()
    {
        await HandleClose();
    }

    private async Task HandleClose()
    {
        IsOpen = false;
        await IsOpenChanged.InvokeAsync(IsOpen);
        
        // Reset state
        _model = new ProductDto { Name = string.Empty, Code = string.Empty, Status = ProductStatus.Active };
        _customTitle = null;
        ClearSuppliers();
        
        // Clear dropdown data
        _vatRates = null;
        _unitsMeasure = null;
        _stations = null;
        _classificationNodes = null;
        _brands = null;
        _models = null;
        _businessParties = null;
    }

    #region Supplier Management
    
    private async Task OpenAddSupplierDialog()
    {
        if (OriginalProduct == null) return;
        
        var parameters = new DialogParameters
        {
            ["ProductId"] = OriginalProduct.Id,
            ["ProductName"] = OriginalProduct.Name
        };
        
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialog = await DialogService.ShowAsync<AddProductSupplierDialog>(
            TranslationService.GetTranslation("dialog.addSupplier", "Aggiungi Fornitore"),
            parameters,
            options
        );
        
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await LoadSuppliersAsync();
        }
    }
    
    private async Task OpenEditSupplierDialog(ProductSupplierDto supplier)
    {
        var parameters = new DialogParameters
        {
            ["ProductSupplier"] = supplier,
            ["ProductName"] = OriginalProduct?.Name
        };
        
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialog = await DialogService.ShowAsync<EditProductSupplierDialog>(
            TranslationService.GetTranslation("dialog.editSupplier", "Modifica Fornitore"),
            parameters,
            options
        );
        
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await LoadSuppliersAsync();
        }
    }
    
    private async Task DeleteSupplier(Guid supplierId)
    {
        try
        {
            var parameters = new DialogParameters
            {
                ["ContentText"] = TranslationService.GetTranslation("dialog.confirmDeleteSupplier", "Sei sicuro di voler eliminare questo fornitore?"),
                ["ButtonText"] = TranslationService.GetTranslation("button.delete", "Elimina"),
                ["Color"] = Color.Error
            };
            
            var dialog = await DialogService.ShowAsync<ConfirmationDialog>(
                TranslationService.GetTranslation("dialog.confirmDelete", "Conferma eliminazione"),
                parameters
            );
            
            var result = await dialog.Result;
            if (result.Canceled) return;
            
            var success = await ProductService.DeleteProductSupplierAsync(supplierId);
            if (success)
            {
                Snackbar.Add(TranslationService.GetTranslation("messages.deleteSuccessful", "Eliminazione completata con successo"), Severity.Success);
                await LoadSuppliersAsync();
            }
            else
            {
                Snackbar.Add(TranslationService.GetTranslation("messages.deleteFailed", "Errore durante l'eliminazione"), Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to delete product supplier {SupplierId}", supplierId);
            Snackbar.Add(TranslationService.GetTranslation("messages.deleteFailed", "Errore durante l'eliminazione"), Severity.Error);
        }
    }
    
    #endregion
    
    #region Helper Methods for View Mode
    
    private string GetStatusText(ProductStatus status)
    {
        return status switch
        {
            ProductStatus.Active => TranslationService.GetTranslation("status.active", "Attivo"),
            ProductStatus.Suspended => TranslationService.GetTranslation("status.suspended", "Sospeso"),
            ProductStatus.OutOfStock => TranslationService.GetTranslation("status.outOfStock", "Esaurito"),
            ProductStatus.Deleted => TranslationService.GetTranslation("status.deleted", "Eliminato"),
            _ => "-"
        };
    }
    
    private Color GetStatusColor(ProductStatus status)
    {
        return status switch
        {
            ProductStatus.Active => Color.Success,
            ProductStatus.Suspended => Color.Warning,
            ProductStatus.OutOfStock => Color.Error,
            ProductStatus.Deleted => Color.Dark,
            _ => Color.Default
        };
    }
    
    private string GetVatRateName(Guid? vatRateId)
    {
        if (!vatRateId.HasValue) return "-";
        var vatRate = _vatRates?.FirstOrDefault(v => v.Id == vatRateId.Value);
        return vatRate != null ? $"{vatRate.Name} ({vatRate.Percentage}%)" : "-";
    }
    
    private string GetUnitOfMeasureName(Guid? umId)
    {
        if (!umId.HasValue) return "-";
        var um = _unitsMeasure?.FirstOrDefault(u => u.Id == umId.Value);
        return um != null ? $"{um.Name} ({um.Symbol})" : "-";
    }
    
    private string GetStationName(Guid? stationId)
    {
        if (!stationId.HasValue) return "-";
        var station = _stations?.FirstOrDefault(s => s.Id == stationId.Value);
        return station?.Name ?? "-";
    }
    
    private string GetClassificationNodeName(Guid? nodeId)
    {
        if (!nodeId.HasValue) return "-";
        var node = _classificationNodes?.FirstOrDefault(n => n.Id == nodeId.Value);
        return node?.Name ?? "-";
    }
    
    private string GetBrandName(Guid? brandId)
    {
        if (!brandId.HasValue) return "-";
        var brand = _brands?.FirstOrDefault(b => b.Id == brandId.Value);
        return brand?.Name ?? "-";
    }
    
    private string GetModelName(Guid? modelId)
    {
        if (!modelId.HasValue) return "-";
        var model = _models?.FirstOrDefault(m => m.Id == modelId.Value);
        return model?.Name ?? "-";
    }
    
    private string GetSupplierName(Guid? supplierId)
    {
        if (!supplierId.HasValue) return "-";
        var supplier = _businessParties?.FirstOrDefault(bp => bp.Id == supplierId.Value);
        return supplier?.Name ?? "-";
    }
    
    #endregion
}
