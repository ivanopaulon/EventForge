@using MudBlazor
@using EventForge.DTOs.Products
@using EventForge.DTOs.Common
@using EventForge.DTOs.Business
@using EventForge.Client.Shared.Components
@inject IProductService ProductService
@inject IBusinessPartyService BusinessPartyService
@inject ISnackbar Snackbar
@inject ILogger<ProductDrawer> Logger
@inject ITranslationService TranslationService
@inject IDialogService DialogService

<EntityDrawer @bind-IsOpen="@IsOpen"
              @bind-Mode="@Mode"
              EntityName="@TranslationService.GetTranslation("entity.product", "Prodotto")"
              Model="@_model"
              OnSave="@HandleSave"
              OnCancel="@HandleCancel"
              OnClose="@HandleClose"
              CustomTitle="@_customTitle"
              AllowEdit="@AllowEdit"
              Width="60%">
    
    <FormContent>
        <MudGrid>
            <MudItem xs="12" md="6">
                <MudTextField @bind-Value="_model.Name"
                              Label="@($"{TranslationService.GetTranslation("field.name", "Nome")} *")"
                              Variant="Variant.Outlined"
                              Required="true"
                              RequiredError="@TranslationService.GetTranslation("validation.nameRequired", "Il nome è obbligatorio")"
                              MaxLength="200"
                              Immediate="true"
                              aria-describedby="name-help" />
                <MudText id="name-help" Typo="Typo.caption" Class="mud-input-helper-text">
                    @TranslationService.GetTranslation("drawer.helperText.productName", "Nome del prodotto")
                </MudText>
            </MudItem>
            
            <MudItem xs="12" md="6">
                <MudTextField @bind-Value="_model.Code"
                              Label="@($"{TranslationService.GetTranslation("field.code", "Codice")} *")"
                              Variant="Variant.Outlined"
                              Required="true"
                              RequiredError="@TranslationService.GetTranslation("validation.codeRequired", "Il codice è obbligatorio")"
                              MaxLength="100"
                              aria-describedby="code-help" />
                <MudText id="code-help" Typo="Typo.caption" Class="mud-input-helper-text">
                    @TranslationService.GetTranslation("drawer.helperText.productCode", "Codice identificativo del prodotto")
                </MudText>
            </MudItem>
            
            <MudItem xs="12">
                <MudTextField @bind-Value="_model.Description"
                              Label="@TranslationService.GetTranslation("field.description", "Descrizione")"
                              Variant="Variant.Outlined"
                              Lines="3"
                              MaxLength="1000"
                              aria-describedby="description-help" />
                <MudText id="description-help" Typo="Typo.caption" Class="mud-input-helper-text">
                    @TranslationService.GetTranslation("drawer.helperText.description", "Descrizione dettagliata del prodotto")
                </MudText>
            </MudItem>
            
            @if (Mode == EntityDrawerMode.Edit && OriginalProduct != null)
            {
                <MudItem xs="12" md="6">
                    <MudTextField Value="@OriginalProduct.Id.ToString()"
                                  Label="@TranslationService.GetTranslation("field.id", "ID")"
                                  Variant="Variant.Outlined"
                                  ReadOnly="true"
                                  aria-label="@TranslationService.GetTranslation("drawer.aria.id", "Identificativo unico")" />
                </MudItem>
                
                <MudItem xs="12" md="6">
                    <MudTextField Value="@OriginalProduct.CreatedAt.ToString("dd/MM/yyyy HH:mm")"
                                  Label="@TranslationService.GetTranslation("field.createdAt", "Data Creazione")"
                                  Variant="Variant.Outlined"
                                  ReadOnly="true"
                                  aria-label="@TranslationService.GetTranslation("drawer.aria.createdAt", "Data e ora di creazione")" />
                </MudItem>
                
                @* Suppliers Section with Actions *@
                @if (_loadingSuppliers)
                {
                    <MudItem xs="12" Class="mt-4">
                        <MudProgressLinear Color="Color.Primary" Indeterminate="true" />
                        <MudText Typo="Typo.caption" Align="Align.Center" Class="mt-2">
                            @TranslationService.GetTranslation("common.loading", "Caricamento...")
                        </MudText>
                    </MudItem>
                }
                else
                {
                    <MudItem xs="12" Class="mt-4">
                        <MudExpansionPanels>
                            <MudExpansionPanel>
                                <TitleContent>
                                    <div class="d-flex justify-space-between align-center" style="width: 100%;">
                                        <MudText>@($"{TranslationService.GetTranslation("field.supplierCount", "Fornitori")} ({_suppliers?.Count() ?? 0})")</MudText>
                                        <MudIconButton Icon="@Icons.Material.Filled.Add" 
                                                      Color="Color.Primary" 
                                                      Size="Size.Small"
                                                      OnClick="@(() => OpenAddSupplierDialog())"
                                                      aria-label="@TranslationService.GetTranslation("button.addSupplier", "Aggiungi fornitore")" />
                                    </div>
                                </TitleContent>
                                <ChildContent>
                                    @if (_suppliers?.Any() == true)
                                    {
                                        <MudTable Items="_suppliers" Hover="true" Dense="true" Striped="true">
                                            <HeaderContent>
                                                <MudTh>@TranslationService.GetTranslation("field.supplierName", "Nome Fornitore")</MudTh>
                                                <MudTh>@TranslationService.GetTranslation("field.supplierCode", "Codice Fornitore")</MudTh>
                                                <MudTh>@TranslationService.GetTranslation("field.unitCost", "Costo Unitario")</MudTh>
                                                <MudTh>@TranslationService.GetTranslation("field.leadTime", "Tempi di Consegna")</MudTh>
                                                <MudTh>@TranslationService.GetTranslation("field.preferred", "Preferito")</MudTh>
                                                <MudTh>@TranslationService.GetTranslation("common.actions", "Azioni")</MudTh>
                                            </HeaderContent>
                                            <RowTemplate>
                                                <MudTd DataLabel="@TranslationService.GetTranslation("field.supplierName", "Nome Fornitore")">@context.SupplierName</MudTd>
                                                <MudTd DataLabel="@TranslationService.GetTranslation("field.supplierCode", "Codice Fornitore")">@context.SupplierProductCode</MudTd>
                                                <MudTd DataLabel="@TranslationService.GetTranslation("field.unitCost", "Costo Unitario")">
                                                    @if (context.UnitCost.HasValue)
                                                    {
                                                        <text>@context.UnitCost.Value.ToString("N2") @context.Currency</text>
                                                    }
                                                </MudTd>
                                                <MudTd DataLabel="@TranslationService.GetTranslation("field.leadTime", "Tempi di Consegna")">
                                                    @if (context.LeadTimeDays.HasValue)
                                                    {
                                                        <text>@context.LeadTimeDays @TranslationService.GetTranslation("common.days", "giorni")</text>
                                                    }
                                                </MudTd>
                                                <MudTd DataLabel="@TranslationService.GetTranslation("field.preferred", "Preferito")">
                                                    @if (context.Preferred)
                                                    {
                                                        <MudIcon Icon="@Icons.Material.Filled.Star" Color="Color.Warning" Size="Size.Small" />
                                                    }
                                                </MudTd>
                                                <MudTd>
                                                    <MudIconButton Icon="@Icons.Material.Filled.Edit" 
                                                                  Color="Color.Primary" 
                                                                  Size="Size.Small"
                                                                  OnClick="@(() => OpenEditSupplierDialog(context))"
                                                                  title="@TranslationService.GetTranslation("common.edit", "Modifica")" />
                                                    <MudIconButton Icon="@Icons.Material.Filled.Delete" 
                                                                  Color="Color.Error" 
                                                                  Size="Size.Small"
                                                                  OnClick="@(() => DeleteSupplier(context.Id))"
                                                                  title="@TranslationService.GetTranslation("common.delete", "Elimina")" />
                                                </MudTd>
                                            </RowTemplate>
                                        </MudTable>
                                    }
                                    else
                                    {
                                        <MudText Typo="Typo.body2" Class="pa-4">@TranslationService.GetTranslation("messages.noSuppliers", "Nessun fornitore disponibile")</MudText>
                                    }
                                </ChildContent>
                            </MudExpansionPanel>
                        </MudExpansionPanels>
                    </MudItem>
                }
            }
        </MudGrid>
    </FormContent>
    
</EntityDrawer>

@code {
    private ProductDto _model = new() { Name = string.Empty, Code = string.Empty };
    private string? _customTitle;
    private bool _loadingSuppliers = false;
    private IEnumerable<ProductSupplierDto>? _suppliers;

    /// <summary>
    /// Whether the drawer is open.
    /// </summary>
    [Parameter] public bool IsOpen { get; set; }
    
    /// <summary>
    /// Event callback when IsOpen changes.
    /// </summary>
    [Parameter] public EventCallback<bool> IsOpenChanged { get; set; }

    /// <summary>
    /// Mode of the drawer (Create, Edit, View).
    /// </summary>
    [Parameter] public EntityDrawerMode Mode { get; set; } = EntityDrawerMode.Create;
    
    /// <summary>
    /// Event callback when Mode changes.
    /// </summary>
    [Parameter] public EventCallback<EntityDrawerMode> ModeChanged { get; set; }

    /// <summary>
    /// Original product for edit/view mode.
    /// </summary>
    [Parameter] public ProductDto? OriginalProduct { get; set; }

    /// <summary>
    /// Whether edit button is shown in view mode.
    /// </summary>
    [Parameter] public bool AllowEdit { get; set; } = true;

    /// <summary>
    /// Event callback when a product is created.
    /// </summary>
    [Parameter] public EventCallback<ProductDto> OnProductCreated { get; set; }

    /// <summary>
    /// Event callback when a product is updated.
    /// </summary>
    [Parameter] public EventCallback<ProductDto> OnProductUpdated { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (IsOpen && Mode == EntityDrawerMode.Edit && OriginalProduct != null)
        {
            // Copy properties for editing
            _model = new ProductDto
            {
                Id = OriginalProduct.Id,
                Name = OriginalProduct.Name,
                Code = OriginalProduct.Code,
                Description = OriginalProduct.Description,
                ShortDescription = OriginalProduct.ShortDescription
            };

            // Load suppliers
            await LoadSuppliersAsync();
        }
        else if (IsOpen && Mode == EntityDrawerMode.View && OriginalProduct != null)
        {
            _model = OriginalProduct;
            await LoadSuppliersAsync();
        }
        else if (IsOpen && Mode == EntityDrawerMode.Create)
        {
            _model = new ProductDto { Name = string.Empty, Code = string.Empty };
            ClearSuppliers();
        }
    }

    private async Task LoadSuppliersAsync()
    {
        if (OriginalProduct == null) return;

        _loadingSuppliers = true;
        try
        {
            _suppliers = await ProductService.GetProductSuppliersAsync(OriginalProduct.Id);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to load suppliers for product {ProductId}", OriginalProduct.Id);
            Snackbar.Add(TranslationService.GetTranslation("messages.loadFailed", "Errore durante il caricamento"), Severity.Warning);
        }
        finally
        {
            _loadingSuppliers = false;
        }
    }

    private void ClearSuppliers()
    {
        _suppliers = null;
        _loadingSuppliers = false;
    }

    private async Task HandleSave()
    {
        try
        {
            if (Mode == EntityDrawerMode.Create)
            {
                var createDto = new CreateProductDto
                {
                    Name = _model.Name,
                    Code = _model.Code,
                    Description = _model.Description,
                    ShortDescription = _model.ShortDescription
                };
                
                var newProduct = await ProductService.CreateProductAsync(createDto);
                if (newProduct != null)
                {
                    Snackbar.Add(TranslationService.GetTranslation("messages.createSuccessful", "Creazione completata con successo"), Severity.Success);
                    
                    if (OnProductCreated.HasDelegate)
                    {
                        await OnProductCreated.InvokeAsync(newProduct);
                    }
                }
                else
                {
                    Snackbar.Add(TranslationService.GetTranslation("messages.createFailed", "Errore durante la creazione"), Severity.Error);
                    return;
                }
            }
            else if (Mode == EntityDrawerMode.Edit && OriginalProduct != null)
            {
                // Note: We need UpdateProductDto - for now just show a message
                Snackbar.Add(TranslationService.GetTranslation("messages.updateNotImplemented", "Aggiornamento prodotto non ancora implementato"), Severity.Info);
                return;
            }
            
            await HandleClose();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to save product");
            var message = Mode == EntityDrawerMode.Create ? 
                TranslationService.GetTranslation("messages.createFailed", "Errore durante la creazione") : 
                TranslationService.GetTranslation("messages.updateFailed", "Errore durante l'aggiornamento");
            Snackbar.Add($"{message}: {ex.Message}", Severity.Error);
        }
    }

    private async Task HandleCancel()
    {
        await HandleClose();
    }

    private async Task HandleClose()
    {
        IsOpen = false;
        await IsOpenChanged.InvokeAsync(IsOpen);
        
        // Reset state
        _model = new ProductDto { Name = string.Empty, Code = string.Empty };
        _customTitle = null;
        ClearSuppliers();
    }

    #region Supplier Management
    
    private async Task OpenAddSupplierDialog()
    {
        if (OriginalProduct == null) return;
        
        var parameters = new DialogParameters
        {
            ["ProductId"] = OriginalProduct.Id,
            ["ProductName"] = OriginalProduct.Name
        };
        
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialog = await DialogService.ShowAsync<AddProductSupplierDialog>(
            TranslationService.GetTranslation("dialog.addSupplier", "Aggiungi Fornitore"),
            parameters,
            options
        );
        
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await LoadSuppliersAsync();
        }
    }
    
    private async Task OpenEditSupplierDialog(ProductSupplierDto supplier)
    {
        var parameters = new DialogParameters
        {
            ["ProductSupplier"] = supplier,
            ["ProductName"] = OriginalProduct?.Name
        };
        
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialog = await DialogService.ShowAsync<EditProductSupplierDialog>(
            TranslationService.GetTranslation("dialog.editSupplier", "Modifica Fornitore"),
            parameters,
            options
        );
        
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await LoadSuppliersAsync();
        }
    }
    
    private async Task DeleteSupplier(Guid supplierId)
    {
        try
        {
            var parameters = new DialogParameters
            {
                ["ContentText"] = TranslationService.GetTranslation("dialog.confirmDeleteSupplier", "Sei sicuro di voler eliminare questo fornitore?"),
                ["ButtonText"] = TranslationService.GetTranslation("button.delete", "Elimina"),
                ["Color"] = Color.Error
            };
            
            var dialog = await DialogService.ShowAsync<ConfirmationDialog>(
                TranslationService.GetTranslation("dialog.confirmDelete", "Conferma eliminazione"),
                parameters
            );
            
            var result = await dialog.Result;
            if (result.Canceled) return;
            
            var success = await ProductService.DeleteProductSupplierAsync(supplierId);
            if (success)
            {
                Snackbar.Add(TranslationService.GetTranslation("messages.deleteSuccessful", "Eliminazione completata con successo"), Severity.Success);
                await LoadSuppliersAsync();
            }
            else
            {
                Snackbar.Add(TranslationService.GetTranslation("messages.deleteFailed", "Errore durante l'eliminazione"), Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to delete product supplier {SupplierId}", supplierId);
            Snackbar.Add(TranslationService.GetTranslation("messages.deleteFailed", "Errore durante l'eliminazione"), Severity.Error);
        }
    }
    
    #endregion
}
