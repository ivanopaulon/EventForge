@using EventForge.DTOs.Chat
@using Microsoft.AspNetCore.Authorization
@inject ITranslationService TranslationService

<div class="enhanced-file-upload">
    @if (ShowPreview && SelectedFile != null)
    {
        <MudCard Class="mb-2">
            <MudCardContent Class="pa-2">
                <div class="d-flex align-center">
                    <MudIcon Icon="@GetFileIcon(SelectedFile.ContentType)" Class="mr-2" />
                    <div class="flex-grow-1">
                        <MudText Typo="Typo.body2">@SelectedFile.Name</MudText>
                        <MudText Typo="Typo.caption" Color="Color.Secondary">@FormatFileSize(SelectedFile.Size)</MudText>
                    </div>
                    <MudIconButton Icon="@Icons.Material.Filled.Close" Size="Size.Small" OnClick="@OnRemove" />
                </div>
            </MudCardContent>
        </MudCard>
    }
</div>

@code {
    [Parameter] public IBrowserFile? SelectedFile { get; set; }
    [Parameter] public bool ShowPreview { get; set; } = true;
    [Parameter] public EventCallback OnRemove { get; set; }

    private string GetFileIcon(string? contentType)
    {
        return contentType?.ToLower() switch
        {
            var ct when ct.StartsWith("image/") => Icons.Material.Filled.Image,
            var ct when ct.StartsWith("video/") => Icons.Material.Filled.VideoFile,
            var ct when ct.StartsWith("audio/") => Icons.Material.Filled.AudioFile,
            var ct when ct.Contains("pdf") => Icons.Material.Filled.PictureAsPdf,
            _ => Icons.Material.Filled.AttachFile
        };
    }

    private string FormatFileSize(long bytes)
    {
        string[] sizes = { "B", "KB", "MB", "GB" };
        double len = bytes;
        int order = 0;
        while (len >= 1024 && order < sizes.Length - 1)
        {
            order++;
            len = len / 1024;
        }
        return $"{len:0.##} {sizes[order]}";
    }
}