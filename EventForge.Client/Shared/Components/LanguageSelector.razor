@using EventForge.Client.Services
@inject ITranslationService TranslationService
@implements IDisposable

<MudSelect T="string" 
           Value="@TranslationService.CurrentLanguage" 
           ValueChanged="@OnLanguageChanged"
           Label="@(ShowFlags ? "" : TranslationService.GetTranslation("common.language"))"
           Variant="Variant.Outlined"
           Dense="@Dense"
           Class="@($"language-selector {Class}")"
           aria-label="@TranslationService.GetTranslation("accessibility.selectLanguage", "Select language")"
           role="combobox"
           aria-expanded="false"
           aria-describedby="language-selector-description">
    @foreach (var language in TranslationService.GetAvailableLanguages())
    {
        <MudSelectItem Value="@language.Key">
            <div class="d-flex align-center language-item">
                @if (ShowFlags)
                {
                    <div class="flag-icon @GetFlagClass(language.Key)" 
                         aria-hidden="true" 
                         title="@language.Value"></div>
                }
                else
                {
                    <MudIcon Icon="@GetLanguageIcon(language.Key)" 
                             Style="margin-right: 8px;" 
                             aria-hidden="true" />
                }
                <span class="language-name">@language.Value</span>
            </div>
        </MudSelectItem>
    }
</MudSelect>

<div id="language-selector-description" class="sr-only">
    @TranslationService.GetTranslation("accessibility.languageSelectorDescription")
</div>

@code {
    [Parameter] public bool Dense { get; set; } = true;
    [Parameter] public string? Class { get; set; }
    [Parameter] public bool ShowFlags { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        TranslationService.LanguageChanged += OnLanguageChangedEvent;
        
        // Initialize the translation service if not already done
        try
        {
            await ((TranslationService)TranslationService).InitializeAsync();
        }
        catch (Exception ex)
        {
            // Service might already be initialized
            Console.WriteLine($"Translation service initialization: {ex.Message}");
        }
    }

    private async Task OnLanguageChanged(string newLanguage)
    {
        try
        {
            await TranslationService.SetLanguageAsync(newLanguage);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            // Handle error - could show snackbar or toast
            Console.Error.WriteLine($"Error changing language: {ex.Message}");
        }
    }

    private void OnLanguageChangedEvent(object? sender, string newLanguage)
    {
        InvokeAsync(StateHasChanged);
    }

    private string GetLanguageIcon(string languageCode)
    {
        return languageCode switch
        {
            "it" => Icons.Material.Filled.Flag,
            "en" => Icons.Material.Filled.Flag,
            "es" => Icons.Material.Filled.Flag,
            "fr" => Icons.Material.Filled.Flag,
            _ => Icons.Material.Filled.Language
        };
    }

    private string GetFlagClass(string languageCode)
    {
        return languageCode switch
        {
            "it" => "flag-it",
            "en" => "flag-en", 
            "es" => "flag-es",
            "fr" => "flag-fr",
            _ => "flag-default"
        };
    }

    public void Dispose()
    {
        TranslationService.LanguageChanged -= OnLanguageChangedEvent;
    }
}

<style>
    .language-selector {
        min-width: 140px;
        height: 40px;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    }
    
    .language-selector .mud-select-input {
        padding: 8px 12px;
    }

    .language-item {
        transition: all 0.2s ease;
    }

    .language-item:hover {
        background-color: rgba(var(--mud-palette-action-hover), 0.04);
    }

    .language-name {
        margin-left: 8px;
    }

    /* Flag icons using CSS - flat design */
    .flag-icon {
        width: 20px;
        height: 14px;
        border-radius: 2px;
        display: inline-block;
        margin-right: 8px;
        background-size: cover;
        background-position: center;
        border: 1px solid rgba(0, 0, 0, 0.1);
    }

    .flag-it {
        background: linear-gradient(to right, #009246 33.33%, #ffffff 33.33%, #ffffff 66.66%, #ce2b37 66.66%);
    }

    .flag-en {
        background: linear-gradient(to bottom, #012169 25%, #ffffff 25%, #ffffff 75%, #c8102e 75%),
                    linear-gradient(to right, #012169 25%, #ffffff 25%, #ffffff 75%, #c8102e 75%);
        background-size: 100% 33.33%, 33.33% 100%;
        background-position: 0 0, 0 0;
        background-repeat: no-repeat;
    }

    .flag-es {
        background: linear-gradient(to bottom, #aa151b 25%, #f1bf00 25%, #f1bf00 75%, #aa151b 75%);
    }

    .flag-fr {
        background: linear-gradient(to right, #0055a4 33.33%, #ffffff 33.33%, #ffffff 66.66%, #ef4135 66.66%);
    }

    .flag-default {
        background: #cccccc;
    }

    /* Animation for language changes */
    .language-selector.changing {
        animation: languageChange 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    }
</style>

<style>
    @@keyframes languageChange {
        0% {
            transform: scale(1);
            opacity: 1;
        }
        50% {
            transform: scale(0.98);
            opacity: 0.8;
        }
        100% {
            transform: scale(1);
            opacity: 1;
        }
    }
</style>