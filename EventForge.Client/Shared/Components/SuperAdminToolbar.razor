@using MudBlazor
@inject ITranslationService TranslationService

<!-- Standardized toolbar with semantic MudIconButton components using Outlined icons -->
<MudToolBar Dense="true" WrapContent="true" Class="pa-1">
    @if (ShowRefresh)
    {
        <MudTooltip Text="@TranslationService.GetTranslation("tooltip.refreshData", "Aggiorna dati")">
            <MudIconButton Icon="Icons.Material.Outlined.Refresh" 
                           Color="Color.Primary"
                           Size="Size.Medium"
                           OnClick="@OnRefresh"
                           Disabled="@(IsLoading || !CanRefresh)"
                           aria-label="@TranslationService.GetTranslation("tooltip.refreshData", "Aggiorna dati")" />
        </MudTooltip>
    }

    @if (ShowCreate)
    {
        <MudTooltip Text="@CreateTooltip">
            <MudIconButton Icon="@CreateIcon"
                           Color="Color.Success" 
                           Size="Size.Medium"
                           OnClick="@OnCreate"
                           Disabled="@(IsLoading || !CanCreate)"
                           aria-label="@CreateTooltip" />
        </MudTooltip>
    }

    @if (ShowExport)
    {
        <MudTooltip Text="@TranslationService.GetTranslation("tooltip.exportData", "Esporta dati")">
            <MudIconButton Icon="Icons.Material.Outlined.Download" 
                           Color="Color.Secondary"
                           Size="Size.Medium"
                           OnClick="@OnExport"
                           Disabled="@(IsLoading || !CanExport)"
                           aria-label="@TranslationService.GetTranslation("tooltip.exportData", "Esporta dati")" />
        </MudTooltip>
    }

    @if (ShowAuditLog)
    {
        <MudDivider Vertical="true" Class="mx-1" />
        <MudTooltip Text="@TranslationService.GetTranslation("tooltip.viewAuditLog", "Visualizza log audit")">
            <MudIconButton Icon="Icons.Material.Outlined.History" 
                           Color="Color.Info"
                           Size="Size.Medium"
                           OnClick="@OnAuditLog"
                           Disabled="@(IsLoading || !CanViewAudit)"
                           aria-label="@TranslationService.GetTranslation("tooltip.viewAuditLog", "Visualizza log audit")" />
        </MudTooltip>
    }

    <!-- Custom additional actions -->
    @AdditionalActions
</MudToolBar>

@code {
    /// <summary>
    /// Whether to show the refresh button.
    /// </summary>
    [Parameter] public bool ShowRefresh { get; set; } = true;

    /// <summary>
    /// Whether to show the export button.
    /// </summary>
    [Parameter] public bool ShowExport { get; set; } = true;

    /// <summary>
    /// Whether to show the create/add new button.
    /// </summary>
    [Parameter] public bool ShowCreate { get; set; } = false;

    /// <summary>
    /// Whether to show the audit log button.
    /// </summary>
    [Parameter] public bool ShowAuditLog { get; set; } = false;

    /// <summary>
    /// Icon for the create button.
    /// </summary>
    [Parameter] public string CreateIcon { get; set; } = Icons.Material.Outlined.Add;

    /// <summary>
    /// Tooltip text for the create button.
    /// </summary>
    [Parameter] public string CreateTooltip { get; set; } = string.Empty;

    /// <summary>
    /// Whether the toolbar is in a loading state.
    /// </summary>
    [Parameter] public bool IsLoading { get; set; } = false;

    /// <summary>
    /// Whether the refresh action is enabled.
    /// </summary>
    [Parameter] public bool CanRefresh { get; set; } = true;

    /// <summary>
    /// Whether the export action is enabled.
    /// </summary>
    [Parameter] public bool CanExport { get; set; } = true;

    /// <summary>
    /// Whether the create action is enabled.
    /// </summary>
    [Parameter] public bool CanCreate { get; set; } = true;

    /// <summary>
    /// Whether the audit log action is enabled.
    /// </summary>
    [Parameter] public bool CanViewAudit { get; set; } = true;

    /// <summary>
    /// Event callback for refresh action.
    /// </summary>
    [Parameter] public EventCallback OnRefresh { get; set; }

    /// <summary>
    /// Event callback for export action.
    /// </summary>
    [Parameter] public EventCallback OnExport { get; set; }

    /// <summary>
    /// Event callback for create action.
    /// </summary>
    [Parameter] public EventCallback OnCreate { get; set; }

    /// <summary>
    /// Event callback for audit log action.
    /// </summary>
    [Parameter] public EventCallback OnAuditLog { get; set; }

    /// <summary>
    /// Additional custom actions to render after the standard buttons.
    /// </summary>
    [Parameter] public RenderFragment? AdditionalActions { get; set; }

    protected override void OnInitialized()
    {
        // Set default create tooltip if not provided
        if (string.IsNullOrEmpty(CreateTooltip))
        {
            CreateTooltip = TranslationService.GetTranslation("tooltip.createNew", "Crea nuovo elemento");
        }
    }
}