@using EventForge.Client.Services
@inject IThemeService ThemeService
@inject ITranslationService TranslationService

<MudMenu Icon="@GetCurrentThemeIcon()"
         Color="Color.Inherit"
         Direction="Origin.BottomLeft"
         OffsetX="true"
         Dense="true"
         aria-label="@TranslationService.GetTranslation("theme.selector", "Theme selector")">
    <ActivatorContent>
        <MudTooltip Text="@TranslationService.GetTranslation("theme.selectTheme", "Select theme")">
            <MudIconButton Icon="@GetCurrentThemeIcon()" 
                           Color="Color.Inherit"
                           aria-label="@TranslationService.GetTranslation("theme.selectTheme", "Select theme")" />
        </MudTooltip>
    </ActivatorContent>
    <ChildContent>
        @foreach (var theme in ThemeService.AvailableThemes)
        {
            <MudMenuItem OnClick="@(() => HandleThemeSelection(theme.Key))"
                         aria-label="@TranslationService.GetTranslation($"theme.{theme.Key}.description", theme.Description)"
                         Class="@(theme.Key == ThemeService.CurrentTheme ? "mud-selected" : "")">
                <div class="d-flex align-center ga-3">
                    <MudIcon Icon="@GetThemeIcon(theme.Key)" 
                             Color="@(theme.Key == ThemeService.CurrentTheme ? Color.Primary : Color.Default)"
                             Size="Size.Small" />
                    
                    <div class="flex-grow-1">
                        <MudText Typo="Typo.body2" Class="mb-1">
                            @TranslationService.GetTranslation($"theme.{theme.Key}.name", theme.Name)
                        </MudText>
                        <MudText Typo="Typo.caption" Class="text-muted">
                            @TranslationService.GetTranslation($"theme.{theme.Key}.description", theme.Description)
                        </MudText>
                    </div>
                    
                    <div class="theme-color-preview" 
                         style="background-color: @theme.ColorPreview; width: 20px; height: 20px; border-radius: 4px; border: 1px solid var(--border-primary);"
                         aria-hidden="true">
                    </div>
                    
                    @if (theme.Key == ThemeService.CurrentTheme)
                    {
                        <MudIcon Icon="Icons.Material.Filled.Check" 
                                 Color="Color.Primary" 
                                 Size="Size.Small" 
                                 aria-label="@TranslationService.GetTranslation("theme.currentTheme", "Current theme")" />
                    }
                </div>
            </MudMenuItem>
        }
    </ChildContent>
</MudMenu>

@code {
    protected override async Task OnInitializedAsync()
    {
        ThemeService.OnThemeChanged += OnThemeChanged;
        await base.OnInitializedAsync();
    }

    private void OnThemeChanged()
    {
        InvokeAsync(StateHasChanged);
    }

    private async Task HandleThemeSelection(string themeKey)
    {
        await ThemeService.SetThemeAsync(themeKey);
    }

    private string GetCurrentThemeIcon()
    {
        return GetThemeIcon(ThemeService.CurrentTheme);
    }

    private string GetThemeIcon(string themeKey)
    {
        return themeKey switch
        {
            "light" => Icons.Material.Filled.LightMode,
            "dark" => Icons.Material.Filled.DarkMode,
            "warm" => Icons.Material.Filled.LocalFireDepartment,
            "cool" => Icons.Material.Filled.AcUnit,
            "high-contrast" => Icons.Material.Filled.Contrast,
            "fun" => Icons.Material.Filled.Palette,
            _ => Icons.Material.Filled.ColorLens
        };
    }

    public void Dispose()
    {
        ThemeService.OnThemeChanged -= OnThemeChanged;
    }
}

<style>
    .theme-color-preview {
        transition: all 0.2s ease;
    }
    
    .mud-menu-item:hover .theme-color-preview {
        transform: scale(1.1);
    }
    
    .mud-selected {
        background-color: rgba(var(--primary-rgb), 0.08);
    }
</style>