@using MudBlazor
@using EventForge.Client.Constants

<MudDrawer @bind-Open="@IsOpen" 
           Anchor="@Anchor.End" 
           Elevation="4" 
           Variant="@DrawerVariant.Temporary"
           ClipMode="@DrawerClipMode.Always"
           DisableOverlay="false"
           Width="@Width"
           Class="sidepanel-drawer">
    
    <div class="sidepanel-header d-flex justify-space-between align-center pa-4 border-b">
        <MudText Typo="Typo.h6" Class="ma-0">@Title</MudText>
        <MudIconButton Icon="@Icons.Material.Filled.Close" 
                       Color="Color.Default" 
                       Size="Size.Small"
                       OnClick="@(() => ClosePanel())" />
    </div>
    
    <div class="sidepanel-content flex-grow-1 pa-4">
        @ChildContent
    </div>
    
    @if (ShowActions)
    {
        <div class="sidepanel-actions d-flex justify-end gap-2 pa-4 border-t">
            @if (ShowCancelButton)
            {
                <MudButton Variant="Variant.Text" 
                           Color="Color.Default"
                           OnClick="@OnCancel"
                           StartIcon="@Icons.Material.Filled.Cancel">
                    @CancelText
                </MudButton>
            }
            
            @if (ShowSaveButton)
            {
                <MudButton Variant="Variant.Filled" 
                           Color="Color.Primary"
                           OnClick="@OnSave"
                           StartIcon="@Icons.Material.Filled.Save"
                           Disabled="@SaveDisabled">
                    @SaveText
                </MudButton>
            }
            
            @ActionButtons
        </div>
    }
</MudDrawer>

@code {
    /// <summary>
    /// Whether the sidepanel is open.
    /// </summary>
    [Parameter] public bool IsOpen { get; set; }
    
    /// <summary>
    /// Event callback for when IsOpen changes.
    /// </summary>
    [Parameter] public EventCallback<bool> IsOpenChanged { get; set; }
    
    /// <summary>
    /// The title displayed in the sidepanel header.
    /// </summary>
    [Parameter] public string Title { get; set; } = "";
    
    /// <summary>
    /// The content to display in the sidepanel.
    /// </summary>
    [Parameter] public RenderFragment? ChildContent { get; set; }
    
    /// <summary>
    /// Additional action buttons to display in the footer.
    /// </summary>
    [Parameter] public RenderFragment? ActionButtons { get; set; }
    
    /// <summary>
    /// Whether to show the default action buttons.
    /// </summary>
    [Parameter] public bool ShowActions { get; set; } = true;
    
    /// <summary>
    /// Whether to show the save button.
    /// </summary>
    [Parameter] public bool ShowSaveButton { get; set; } = true;
    
    /// <summary>
    /// Whether to show the cancel button.
    /// </summary>
    [Parameter] public bool ShowCancelButton { get; set; } = true;
    
    /// <summary>
    /// Whether the save button is disabled.
    /// </summary>
    [Parameter] public bool SaveDisabled { get; set; } = false;
    
    /// <summary>
    /// Text for the save button.
    /// </summary>
    [Parameter] public string SaveText { get; set; } = ButtonLabels.Save;
    
    /// <summary>
    /// Text for the cancel button.
    /// </summary>
    [Parameter] public string CancelText { get; set; } = ButtonLabels.Cancel;
    
    /// <summary>
    /// Width of the sidepanel.
    /// </summary>
    [Parameter] public string Width { get; set; } = "600px";
    
    /// <summary>
    /// Event callback for save action.
    /// </summary>
    [Parameter] public EventCallback OnSave { get; set; }
    
    /// <summary>
    /// Event callback for cancel action.
    /// </summary>
    [Parameter] public EventCallback OnCancel { get; set; }
    
    private async Task ClosePanel()
    {
        IsOpen = false;
        await IsOpenChanged.InvokeAsync(IsOpen);
        
        if (OnCancel.HasDelegate)
        {
            await OnCancel.InvokeAsync();
        }
    }
}