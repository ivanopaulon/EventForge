@using MudBlazor
@using EventForge.DTOs.SuperAdmin
@using EventForge.Client.Shared.Components
@inject ISuperAdminService SuperAdminService
@inject ISnackbar Snackbar
@inject ILogger<EventCategoryDrawer> Logger
@inject ITranslationService TranslationService

<EntityDrawer @bind-IsOpen="@IsOpen"
              @bind-Mode="@Mode"
              EntityName="@TranslationService.GetTranslation("field.eventCategory", "Categoria Evento")"
              Model="@_model"
              OnSave="@HandleSave"
              OnCancel="@HandleCancel"
              OnClose="@HandleClose"
              CustomTitle="@_customTitle"
              AllowEdit="@AllowEdit"
              Width="600px">
    
    <FormContent>
        <MudGrid>
            <MudItem xs="12">
                <MudTextField @bind-Value="_model.Name"
                              Label="@($"{TranslationService.GetTranslation("field.name", "Nome")} *")"
                              Variant="Variant.Outlined"
                              Required="true"
                              RequiredError="@TranslationService.GetTranslation("validation.nameRequired", "Il nome è obbligatorio")"
                              MaxLength="100"
                              aria-describedby="name-help" />
                <MudText id="name-help" Typo="Typo.caption" Class="mud-input-helper-text">
                    @TranslationService.GetTranslation("help.eventCategoryName", "Nome identificativo della categoria evento")
                </MudText>
            </MudItem>

            <MudItem xs="12">
                <MudTextField @bind-Value="_model.Description"
                              Label="@TranslationService.GetTranslation("field.description", "Descrizione")"
                              Variant="Variant.Outlined"
                              MaxLength="500"
                              Lines="3"
                              aria-describedby="description-help" />
                <MudText id="description-help" Typo="Typo.caption" Class="mud-input-helper-text">
                    @TranslationService.GetTranslation("help.eventCategoryDescription", "Descrizione dettagliata della categoria evento")
                </MudText>
            </MudItem>
            
            <MudItem xs="12" md="6">
                <MudTextField @bind-Value="_model.Color"
                              Label="@TranslationService.GetTranslation("field.color", "Colore")"
                              Variant="Variant.Outlined"
                              Placeholder="#1976d2"
                              aria-describedby="color-help"
                              Adornment="Adornment.Start"
                              AdornmentIcon="@Icons.Material.Outlined.Palette" />
                <MudText id="color-help" Typo="Typo.caption" Class="mud-input-helper-text">
                    @TranslationService.GetTranslation("help.eventCategoryColor", "Colore distintivo per la categoria evento (formato hex)")
                </MudText>
            </MudItem>

            <MudItem xs="12" md="6">
                <MudSwitch @bind-Value="_model.IsActive"
                           Label="@TranslationService.GetTranslation("field.active", "Attivo")"
                           Color="Color.Primary"
                           aria-describedby="active-help" />
                <MudText id="active-help" Typo="Typo.caption" Class="mud-input-helper-text">
                    @TranslationService.GetTranslation("help.eventCategoryActive", "Se abilitata, la categoria evento è disponibile per l'uso")
                </MudText>
            </MudItem>
        </MudGrid>
    </FormContent>

    <ViewContent>
        <MudGrid>
            <MudItem xs="12">
                <MudTextField Value="@OriginalEventCategory?.Name"
                              Label="@TranslationService.GetTranslation("field.name", "Nome")"
                              Variant="Variant.Outlined"
                              ReadOnly="true" />
            </MudItem>

            <MudItem xs="12">
                <MudTextField Value="@OriginalEventCategory?.Description"
                              Label="@TranslationService.GetTranslation("field.description", "Descrizione")"
                              Variant="Variant.Outlined"
                              Lines="3"
                              ReadOnly="true" />
            </MudItem>
            
            <MudItem xs="12" md="6">
                <div class="d-flex align-center">
                    <div style="@($"width: 30px; height: 30px; border-radius: 50%; background-color: {OriginalEventCategory?.Color}; border: 1px solid #ccc;")" class="mr-3"></div>
                    <MudTextField Value="@OriginalEventCategory?.Color"
                                  Label="@TranslationService.GetTranslation("field.color", "Colore")"
                                  Variant="Variant.Outlined"
                                  ReadOnly="true" />
                </div>
            </MudItem>

            <MudItem xs="12" md="6">
                <MudChip T="string" Color="@(OriginalEventCategory?.IsActive == true ? Color.Success : Color.Error)" 
                         Size="Size.Medium"
                         Icon="@(OriginalEventCategory?.IsActive == true ? Icons.Material.Outlined.CheckCircle : Icons.Material.Outlined.Cancel)"
                         aria-label="@TranslationService.GetTranslation("aria.eventCategoryStatus", "Stato categoria evento: {0}", OriginalEventCategory?.IsActive == true ? TranslationService.GetTranslation("field.active", "Attivo") : TranslationService.GetTranslation("field.inactive", "Inattivo"))">
                    @(OriginalEventCategory?.IsActive == true ? TranslationService.GetTranslation("field.active", "Attivo") : TranslationService.GetTranslation("field.inactive", "Inattivo"))
                </MudChip>
            </MudItem>
            
            @if (OriginalEventCategory != null)
            {
                <MudItem xs="12" md="6">
                    <MudTextField Value="@OriginalEventCategory.Id.ToString()"
                              Label="@TranslationService.GetTranslation("field.id", "ID")"
                              Variant="Variant.Outlined"
                              ReadOnly="true" />
                </MudItem>
                
                <MudItem xs="12" md="6">
                    <MudTextField Value="@OriginalEventCategory.EventCount.ToString()"
                              Label="@TranslationService.GetTranslation("field.eventCount", "Numero Eventi")"
                              Variant="Variant.Outlined"
                              ReadOnly="true" />
                </MudItem>

                <MudItem xs="12" md="6">
                    <MudTextField Value="@OriginalEventCategory.CreatedAt.ToString("dd/MM/yyyy HH:mm")"
                              Label="@TranslationService.GetTranslation("field.createdAt", "Data Creazione")"
                              Variant="Variant.Outlined"
                              ReadOnly="true" />
                </MudItem>

                @if (OriginalEventCategory.ModifiedAt.HasValue)
                {
                    <MudItem xs="12" md="6">
                        <MudTextField Value="@OriginalEventCategory.ModifiedAt.Value.ToString("dd/MM/yyyy HH:mm")"
                                      Label="@TranslationService.GetTranslation("field.modifiedAt", "Ultima Modifica")"
                                      Variant="Variant.Outlined"
                                      ReadOnly="true" />
                    </MudItem>
                }
            }
        </MudGrid>
    </ViewContent>
    
</EntityDrawer>

@code {
    private EventCategoryDto _model = new() { Color = "#1976d2", IsActive = true };
    private string? _customTitle;

    /// <summary>
    /// Whether the drawer is open.
    /// </summary>
    [Parameter] public bool IsOpen { get; set; }
    
    /// <summary>
    /// Event callback for when IsOpen changes.
    /// </summary>
    [Parameter] public EventCallback<bool> IsOpenChanged { get; set; }
    
    /// <summary>
    /// The current mode of the drawer.
    /// </summary>
    [Parameter] public EntityDrawerMode Mode { get; set; } = EntityDrawerMode.Create;
    
    /// <summary>
    /// Event callback for when Mode changes.
    /// </summary>
    [Parameter] public EventCallback<EntityDrawerMode> ModeChanged { get; set; }
    
    /// <summary>
    /// The original event category being viewed/edited (null for create mode).
    /// </summary>
    [Parameter] public EventCategoryDto? OriginalEventCategory { get; set; }
    
    /// <summary>
    /// Whether editing is allowed in the drawer.
    /// </summary>
    [Parameter] public bool AllowEdit { get; set; } = true;
    
    /// <summary>
    /// Event callback triggered when an event category is created.
    /// </summary>
    [Parameter] public EventCallback<EventCategoryDto> OnEventCategoryCreated { get; set; }
    
    /// <summary>
    /// Event callback triggered when an event category is updated.
    /// </summary>
    [Parameter] public EventCallback<EventCategoryDto> OnEventCategoryUpdated { get; set; }

    /// <summary>
    /// Update the model when the drawer opens or the original event category changes.
    /// </summary>
    protected override void OnParametersSet()
    {
        if (IsOpen)
        {
            if (OriginalEventCategory != null && (Mode == EntityDrawerMode.Edit || Mode == EntityDrawerMode.View))
            {
                // Copy values from original for editing/viewing
                _model = new EventCategoryDto
                {
                    Id = OriginalEventCategory.Id,
                    Name = OriginalEventCategory.Name,
                    Description = OriginalEventCategory.Description,
                    Color = OriginalEventCategory.Color,
                    IsActive = OriginalEventCategory.IsActive
                };

                _customTitle = Mode == EntityDrawerMode.Edit 
                    ? $"{TranslationService.GetTranslation("drawer.edit", "Modifica")} {OriginalEventCategory.Name}"
                    : $"{TranslationService.GetTranslation("drawer.view", "Visualizza")} {OriginalEventCategory.Name}";
            }
            else if (Mode == EntityDrawerMode.Create)
            {
                // Reset for create mode
                _model = new EventCategoryDto { Color = "#1976d2", IsActive = true };
                _customTitle = TranslationService.GetTranslation("drawer.createEventCategory", "Crea Nuova Categoria Evento");
            }
        }
    }

    /// <summary>
    /// Handle save operation for create/edit modes.
    /// </summary>
    private async Task<bool> HandleSave()
    {
        try
        {
            if (Mode == EntityDrawerMode.Create)
            {
                var createDto = new CreateEventCategoryDto
                {
                    Name = _model.Name,
                    Description = _model.Description,
                    Color = _model.Color,
                    IsActive = _model.IsActive
                };

                var newEventCategory = await SuperAdminService.CreateEventCategoryAsync(createDto);
                await OnEventCategoryCreated.InvokeAsync(newEventCategory);
                Snackbar.Add(TranslationService.GetTranslation("success.eventCategoryCreated", "Categoria evento creata con successo!"), Severity.Success);
            }
            else if (Mode == EntityDrawerMode.Edit && OriginalEventCategory != null)
            {
                var updateDto = new UpdateEventCategoryDto
                {
                    Name = _model.Name,
                    Description = _model.Description,
                    Color = _model.Color,
                    IsActive = _model.IsActive
                };

                var updatedEventCategory = await SuperAdminService.UpdateEventCategoryAsync(OriginalEventCategory.Id, updateDto);
                await OnEventCategoryUpdated.InvokeAsync(updatedEventCategory);
                Snackbar.Add(TranslationService.GetTranslation("success.eventCategoryUpdated", "Categoria evento aggiornata con successo!"), Severity.Success);
            }

            return true;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error saving event category");
            var errorMessage = Mode == EntityDrawerMode.Create 
                ? TranslationService.GetTranslation("error.eventCategoryCreateFailed", "Errore nella creazione della categoria evento: {0}", ex.Message)
                : TranslationService.GetTranslation("error.eventCategoryUpdateFailed", "Errore nell'aggiornamento della categoria evento: {0}", ex.Message);
            Snackbar.Add(errorMessage, Severity.Error);
            return false;
        }
    }

    /// <summary>
    /// Handle cancel operation.
    /// </summary>
    private async Task HandleCancel()
    {
        await Task.CompletedTask;
    }

    /// <summary>
    /// Handle drawer close operation.
    /// </summary>
    private async Task HandleClose()
    {
        await Task.CompletedTask;
    }
}