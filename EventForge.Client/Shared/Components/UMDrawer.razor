@using MudBlazor
@using EventForge.DTOs.UnitOfMeasures
@using EventForge.Client.Shared.Components
@inject IUMService UMService
@inject ISnackbar Snackbar
@inject ILogger<UMDrawer> Logger
@inject ITranslationService TranslationService

<EntityDrawer @bind-IsOpen="@IsOpen"
              @bind-Mode="@Mode"
              EntityName="@TranslationService.GetTranslation("field.unitOfMeasure", "Unità di Misura")"
              Model="@_model"
              OnSave="@HandleSave"
              OnCancel="@HandleCancel"
              OnClose="@HandleClose"
              CustomTitle="@_customTitle"
              AllowEdit="@AllowEdit"
              Width="50%">
    
    <FormContent>
        <MudGrid>
            <MudItem xs="12" md="6">
                <MudTextField @bind-Value="_model.Name"
                              Label="@($"{TranslationService.GetTranslation("field.name", "Nome")} *")"
                              Variant="Variant.Outlined"
                              Required="true"
                              RequiredError="@TranslationService.GetTranslation("validation.nameRequired", "Il nome è obbligatorio")"
                              MaxLength="50"
                              Immediate="true"
                              aria-describedby="name-help" />
                <MudText id="name-help" Typo="Typo.caption" Class="mud-input-helper-text">
                    @TranslationService.GetTranslation("drawer.helperText.umName", "Nome dell'unità di misura (es. Kilogrammo, Litro, Pezzo)")
                </MudText>
            </MudItem>
            
            <MudItem xs="12" md="6">
                <MudTextField @bind-Value="_model.Symbol"
                              Label="@($"{TranslationService.GetTranslation("field.symbol", "Simbolo")} *")"
                              Variant="Variant.Outlined"
                              Required="true"
                              RequiredError="@TranslationService.GetTranslation("validation.symbolRequired", "Il simbolo è obbligatorio")"
                              MaxLength="10"
                              Immediate="true"
                              Disabled="@(Mode == EntityDrawerMode.Edit)"
                              aria-describedby="symbol-help" />
                <MudText id="symbol-help" Typo="Typo.caption" Class="mud-input-helper-text">
                    @TranslationService.GetTranslation("drawer.helperText.umSymbol", "Simbolo dell'unità (es. kg, l, pz) - Non modificabile dopo la creazione")
                </MudText>
            </MudItem>
            
            <MudItem xs="12">
                <MudTextField @bind-Value="_model.Description"
                              Label="@TranslationService.GetTranslation("field.description", "Descrizione")"
                              Variant="Variant.Outlined"
                              Lines="3"
                              MaxLength="200"
                              aria-describedby="description-help" />
                <MudText id="description-help" Typo="Typo.caption" Class="mud-input-helper-text">
                    @TranslationService.GetTranslation("drawer.helperText.umDescription", "Descrizione opzionale dell'unità di misura")
                </MudText>
            </MudItem>
            
            <MudItem xs="12">
                <MudSwitch @bind-Value="_model.IsDefault"
                           Label="@TranslationService.GetTranslation("field.isDefault", "Unità Predefinita")"
                           Color="Color.Primary"
                           aria-describedby="default-help" />
                <MudText id="default-help" Typo="Typo.caption" Class="mud-input-helper-text">
                    @TranslationService.GetTranslation("drawer.helperText.umIsDefault", "Imposta come unità di misura predefinita")
                </MudText>
            </MudItem>
        </MudGrid>
    </FormContent>
    
    <ViewContent>
        <MudGrid>
            <MudItem xs="12" md="6">
                <MudTextField Value="@(OriginalUM?.Name ?? "")"
                              Label="@TranslationService.GetTranslation("field.name", "Nome")"
                              Variant="Variant.Outlined"
                              ReadOnly="true"
                              aria-label="@TranslationService.GetTranslation("drawer.aria.unitName", "Nome unità di misura")" />
            </MudItem>
            
            <MudItem xs="12" md="6">
                <MudTextField Value="@(OriginalUM?.Symbol ?? "")"
                              Label="@TranslationService.GetTranslation("field.symbol", "Simbolo")"
                              Variant="Variant.Outlined"
                              ReadOnly="true"
                              aria-label="@TranslationService.GetTranslation("drawer.aria.unitSymbol", "Simbolo unità")" />
            </MudItem>
            
            <MudItem xs="12">
                <MudTextField Value="@(OriginalUM?.Description ?? "")"
                              Label="@TranslationService.GetTranslation("field.description", "Descrizione")"
                              Variant="Variant.Outlined"
                              Lines="3"
                              ReadOnly="true"
                              aria-label="@TranslationService.GetTranslation("drawer.aria.unitDescription", "Descrizione unità")" />
            </MudItem>
            
            <MudItem xs="12" md="6">
                <MudChip T="string" 
                         Color="@(OriginalUM?.IsDefault == true ? Color.Success : Color.Default)"
                         Size="Size.Medium"
                         Variant="Variant.Filled">
                    @(OriginalUM?.IsDefault == true 
                        ? TranslationService.GetTranslation("status.defaultUnit", "Unità Predefinita") 
                        : TranslationService.GetTranslation("status.standardUnit", "Unità Standard"))
                </MudChip>
            </MudItem>
            
            @if (OriginalUM != null)
            {
                <MudItem xs="12" md="6">
                    <MudTextField Value="@OriginalUM.Id.ToString()"
                                  Label="@TranslationService.GetTranslation("field.id", "ID")"
                                  Variant="Variant.Outlined"
                                  ReadOnly="true"
                                  aria-label="@TranslationService.GetTranslation("drawer.aria.unitId", "Identificativo unità")" />
                </MudItem>
                
                <MudItem xs="12" md="6">
                    <MudTextField Value="@OriginalUM.CreatedAt.ToString("dd/MM/yyyy HH:mm")"
                                  Label="@TranslationService.GetTranslation("drawer.field.dataCreazione", "Data Creazione")"
                                  Variant="Variant.Outlined"
                                  ReadOnly="true"
                                  aria-label="@TranslationService.GetTranslation("drawer.aria.dataCreazione", "Data di creazione")" />
                </MudItem>
                
                @if (OriginalUM.ModifiedAt.HasValue)
                {
                    <MudItem xs="12" md="6">
                        <MudTextField Value="@OriginalUM.ModifiedAt.Value.ToString("dd/MM/yyyy HH:mm")"
                                      Label="@TranslationService.GetTranslation("drawer.field.dataModifica", "Data Modifica")"
                                      Variant="Variant.Outlined"
                                      ReadOnly="true"
                                      aria-label="@TranslationService.GetTranslation("drawer.aria.dataModifica", "Data ultima modifica")" />
                    </MudItem>
                }
            }
        </MudGrid>
    </ViewContent>
    
</EntityDrawer>

@code {
    private UMDto _model = new() { Name = string.Empty, Symbol = string.Empty };
    private string? _customTitle;

    /// <summary>
    /// Whether the drawer is open.
    /// </summary>
    [Parameter] public bool IsOpen { get; set; }
    
    /// <summary>
    /// Event callback for when IsOpen changes.
    /// </summary>
    [Parameter] public EventCallback<bool> IsOpenChanged { get; set; }
    
    /// <summary>
    /// The current mode of the drawer.
    /// </summary>
    [Parameter] public EntityDrawerMode Mode { get; set; } = EntityDrawerMode.Create;
    
    /// <summary>
    /// Event callback for when Mode changes.
    /// </summary>
    [Parameter] public EventCallback<EntityDrawerMode> ModeChanged { get; set; }
    
    /// <summary>
    /// The original unit of measure being viewed or edited.
    /// </summary>
    [Parameter] public UMDto? OriginalUM { get; set; }
    
    /// <summary>
    /// Whether editing is allowed (affects toolbar buttons in view mode).
    /// </summary>
    [Parameter] public bool AllowEdit { get; set; } = true;
    
    /// <summary>
    /// Event callback for when a unit of measure is created.
    /// </summary>
    [Parameter] public EventCallback<UMDto> OnUMCreated { get; set; }
    
    /// <summary>
    /// Event callback for when a unit of measure is updated.
    /// </summary>
    [Parameter] public EventCallback<UMDto> OnUMUpdated { get; set; }
    
    protected override void OnParametersSet()
    {
        if (Mode == EntityDrawerMode.Create)
        {
            _model = new UMDto { Name = string.Empty, Symbol = string.Empty, IsDefault = false };
            _customTitle = null;
        }
        else if (Mode == EntityDrawerMode.Edit && OriginalUM != null)
        {
            _model = new UMDto
            {
                Id = OriginalUM.Id,
                Name = OriginalUM.Name,
                Symbol = OriginalUM.Symbol,
                Description = OriginalUM.Description,
                IsDefault = OriginalUM.IsDefault
            };
            _customTitle = TranslationService.GetTranslation("drawer.title.modificaUM", "Modifica Unità di Misura: {0}", OriginalUM.Name);
        }
        else if (Mode == EntityDrawerMode.View && OriginalUM != null)
        {
            _customTitle = TranslationService.GetTranslation("drawer.title.visualizzaUM", "Visualizza Unità di Misura: {0}", OriginalUM.Name);
        }
    }
    
    private async Task HandleSave()
    {
        try
        {
            if (Mode == EntityDrawerMode.Create)
            {
                var createDto = new CreateUMDto
                {
                    Name = _model.Name,
                    Symbol = _model.Symbol,
                    Description = _model.Description,
                    IsDefault = _model.IsDefault
                };
                
                var created = await UMService.CreateUMAsync(createDto);
                Snackbar.Add(
                    TranslationService.GetTranslation("um.createSuccess", "Unità di misura creata con successo"), 
                    Severity.Success);
                
                await OnUMCreated.InvokeAsync(created);
            }
            else if (Mode == EntityDrawerMode.Edit && OriginalUM != null)
            {
                var updateDto = new UpdateUMDto
                {
                    Name = _model.Name,
                    Description = _model.Description,
                    IsDefault = _model.IsDefault
                };
                
                var updated = await UMService.UpdateUMAsync(OriginalUM.Id, updateDto);
                if (updated != null)
                {
                    Snackbar.Add(
                        TranslationService.GetTranslation("um.updateSuccess", "Unità di misura aggiornata con successo"), 
                        Severity.Success);
                    
                    await OnUMUpdated.InvokeAsync(updated);
                }
                else
                {
                    Snackbar.Add(
                        TranslationService.GetTranslation("um.notFound", "Unità di misura non trovata"), 
                        Severity.Error);
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error saving unit of measure");
            Snackbar.Add(
                TranslationService.GetTranslation("um.saveError", "Errore nel salvataggio dell'unità di misura: {0}", ex.Message), 
                Severity.Error);
        }
    }
    
    private async Task HandleCancel()
    {
        // Reset the drawer state and close
        IsOpen = false;
        await IsOpenChanged.InvokeAsync(false);
    }
    
    private async Task HandleClose()
    {
        // Close the drawer
        IsOpen = false;
        await IsOpenChanged.InvokeAsync(false);
    }
}
