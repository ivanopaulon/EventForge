@using EventForge.DTOs.Health
@using EventForge.Client.Services
@inject IHealthService HealthService
@inject ITranslationService TranslationService
@implements IDisposable

<!-- 
    Health Footer Component (Minimal & Compact)
    
    A minimal health status indicator with fullscreen dialog view.
    Features:
    - Compact tab showing overall health status
    - Fullscreen dialog for detailed health information
    - Essential health information only (API, Database)
    - Auto-refresh health data every 30 seconds
-->

<!-- Compact Health Status Tab -->
<div class="health-footer-minimal">
    <div class="health-tab-compact" 
         @onclick="OpenHealthDialog"
         role="button"
         tabindex="0"
         @onkeypress="@(async (e) => { if (e.Key == "Enter" || e.Key == " ") await OpenHealthDialog(); })"
         aria-label="@TranslationService.GetTranslation("health.openDialog", "View health status")"
         title="@GetHealthStatusTitle()">
        <MudIcon Icon="@GetOverallHealthIcon()" 
                 Color="@GetOverallHealthColor()" 
                 Size="Size.Small" />
        <MudText Typo="Typo.caption" Class="health-status-text">
            @GetOverallHealthStatus()
        </MudText>
    </div>
</div>

<!-- Health Status Dialog -->
<HealthStatusDialog @bind-IsVisible="_dialogOpen" 
                    HealthData="_healthData" 
                    LastUpdated="_lastUpdated" />

@code {
    private DetailedHealthStatusDto? _healthData;
    private DateTime? _lastUpdated;
    private Timer? _refreshTimer;
    private bool _dialogOpen = false;

    /// <summary>
    /// Refresh interval for health data in milliseconds. Default is 30 seconds.
    /// </summary>
    [Parameter] public int RefreshInterval { get; set; } = 30000;

    protected override async Task OnInitializedAsync()
    {
        // Initial health data load
        await RefreshHealthData();
        
        // Set up periodic refresh
        _refreshTimer = new Timer(async _ => 
        {
            await InvokeAsync(async () =>
            {
                await RefreshHealthData();
                StateHasChanged();
            });
        }, null, RefreshInterval, RefreshInterval);
    }

    private async Task RefreshHealthData()
    {
        try
        {
            _healthData = await HealthService.GetDetailedHealthAsync();
            _lastUpdated = DateTime.Now;
        }
        catch (Exception ex)
        {
            // Log error but don't break the UI
            Console.Error.WriteLine($"Health status refresh failed: {ex.Message}");
        }
    }

    private async Task OpenHealthDialog()
    {
        if (_healthData == null)
        {
            await RefreshHealthData();
        }
        _dialogOpen = true;
    }

    private string GetHealthStatusTitle()
    {
        return $"{TranslationService.GetTranslation("health.status", "Status")}: {GetOverallHealthStatus()}";
    }

    private string GetOverallHealthIcon()
    {
        if (_healthData == null) return Icons.Material.Filled.Help;

        return GetOverallHealthStatus().ToLower() switch
        {
            "healthy" => Icons.Material.Filled.CheckCircle,
            "degraded" => Icons.Material.Filled.Warning,
            "unhealthy" => Icons.Material.Filled.Error,
            _ => Icons.Material.Filled.Help
        };
    }

    #region Health Status Helpers

    private Color GetStatusColor(string? status)
    {
        if (string.IsNullOrEmpty(status)) return Color.Default;
        
        return status.ToLower() switch
        {
            "healthy" => Color.Success,
            "degraded" => Color.Warning,
            "unhealthy" or "error" => Color.Error,
            "disabled" => Color.Info,
            _ => Color.Default
        };
    }

    private Color GetOverallHealthColor()
    {
        if (_healthData == null) return Color.Default;

        var statuses = new List<string?>
        {
            _healthData.ApiStatus,
            _healthData.DatabaseStatus
        };

        if (statuses.Any(s => s?.ToLower() == "unhealthy" || s?.ToLower() == "error"))
            return Color.Error;
        else if (statuses.Any(s => s?.ToLower() == "degraded" || s?.ToLower() == "warning"))
            return Color.Warning;
        else if (statuses.Any(s => s?.ToLower() == "healthy"))
            return Color.Success;
        else
            return Color.Info;
    }

    private string GetOverallHealthStatus()
    {
        if (_healthData == null) return "Unknown";

        var statuses = new List<string?>
        {
            _healthData.ApiStatus,
            _healthData.DatabaseStatus
        };

        if (statuses.Any(s => s?.ToLower() == "unhealthy" || s?.ToLower() == "error"))
            return "Unhealthy";
        else if (statuses.Any(s => s?.ToLower() == "degraded" || s?.ToLower() == "warning"))
            return "Degraded";
        else if (statuses.Any(s => s?.ToLower() == "healthy"))
            return "Healthy";
        else
            return "Unknown";
    }

    #endregion

    #region Helper Methods

    private string FormatUptime(TimeSpan uptime)
    {
        if (uptime.TotalDays >= 1)
            return $"{uptime.Days}d {uptime.Hours}h {uptime.Minutes}m";
        else if (uptime.TotalHours >= 1)
            return $"{uptime.Hours}h {uptime.Minutes}m";
        else
            return $"{uptime.Minutes}m {uptime.Seconds}s";
    }

    #endregion

    public void Dispose()
    {
        _refreshTimer?.Dispose();
    }
}

<style>
    .health-footer-minimal {
        position: fixed;
        bottom: 0;
        right: 16px;
        z-index: 1300;
        pointer-events: none;
    }

    .health-tab-compact {
        background: var(--mud-palette-surface);
        border: 1px solid var(--mud-palette-lines-default);
        border-bottom: none;
        border-radius: 8px 8px 0 0;
        padding: 4px 8px;
        cursor: pointer;
        pointer-events: auto;
        transition: all 0.2s ease;
        box-shadow: 0 -2px 4px rgba(0, 0, 0, 0.1);
        display: flex;
        align-items: center;
        gap: 4px;
        user-select: none;
        min-width: 80px;
    }

    .health-tab-compact:hover {
        background: var(--mud-palette-action-hover);
        transform: translateY(-1px);
        box-shadow: 0 -3px 6px rgba(0, 0, 0, 0.15);
    }

    .health-tab-compact:focus {
        outline: 2px solid var(--mud-palette-primary);
        outline-offset: 2px;
    }

    .health-status-text {
        font-size: 0.75rem;
        white-space: nowrap;
    }

    /* Dark theme adjustments */
    @@media (prefers-color-scheme: dark) {
        .health-tab-compact {
            background: var(--mud-palette-dark-surface);
            border-color: var(--mud-palette-dark-lines-default);
        }
    }

    /* Mobile adjustments */
    @@media (max-width: 768px) {
        .health-footer-minimal {
            right: 8px;
        }
        
        .health-tab-compact {
            padding: 3px 6px;
            min-width: 70px;
        }
        
        .health-status-text {
            font-size: 0.7rem;
        }
    }
</style>
