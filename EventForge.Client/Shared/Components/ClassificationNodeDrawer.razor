@using MudBlazor
@using EventForge.DTOs.Common
@using EventForge.Client.Shared.Components
@inject IEntityManagementService EntityManagementService
@inject ISnackbar Snackbar
@inject ILogger<ClassificationNodeDrawer> Logger
@inject ITranslationService TranslationService

<EntityDrawer @bind-IsOpen="@IsOpen"
              @bind-Mode="@Mode"
              EntityName="@TranslationService.GetTranslation("classificationNode.entity", "Nodo di Classificazione")"
              Model="@_model"
              OnSave="@HandleSave"
              OnCancel="@HandleCancel"
              OnClose="@HandleClose"
              CustomTitle="@_customTitle"
              AllowEdit="@AllowEdit"
              Width="50%">
    
    <FormContent>
        <MudGrid>
            <MudItem xs="12" md="6">
                <MudTextField @bind-Value="_model.Code"
                              Label="@TranslationService.GetTranslation("field.code", "Codice")"
                              Variant="Variant.Outlined"
                              MaxLength="30"
                              aria-describedby="code-help" />
                <MudText id="code-help" Typo="Typo.caption" Class="mud-input-helper-text">
                    @TranslationService.GetTranslation("drawer.helperText.classificationCode", "Codice univoco del nodo (es. CAT01)")
                </MudText>
            </MudItem>
            
            <MudItem xs="12" md="6">
                <MudTextField @bind-Value="_model.Name"
                              Label="@($"{TranslationService.GetTranslation("field.name", "Nome")} *")"
                              Variant="Variant.Outlined"
                              Required="true"
                              RequiredError="@TranslationService.GetTranslation("validation.nameRequired", "Il nome Ã¨ obbligatorio")"
                              MaxLength="100"
                              Immediate="true"
                              aria-describedby="name-help" />
                <MudText id="name-help" Typo="Typo.caption" Class="mud-input-helper-text">
                    @TranslationService.GetTranslation("drawer.helperText.nodeName", "Nome descrittivo del nodo")
                </MudText>
            </MudItem>
            
            <MudItem xs="12">
                <MudTextField @bind-Value="_model.Description"
                              Label="@TranslationService.GetTranslation("field.description", "Descrizione")"
                              Variant="Variant.Outlined"
                              Lines="3"
                              MaxLength="200"
                              aria-describedby="description-help" />
                <MudText id="description-help" Typo="Typo.caption" Class="mud-input-helper-text">
                    @TranslationService.GetTranslation("drawer.helperText.nodeDescription", "Descrizione dettagliata del nodo")
                </MudText>
            </MudItem>
            
            <MudItem xs="12" md="6">
                <MudSelect @bind-Value="_model.Type"
                           Label="@($"{TranslationService.GetTranslation("field.type", "Tipo")} *")"
                           Variant="Variant.Outlined"
                           Required="true"
                           aria-describedby="type-help">
                    <MudSelectItem Value="@ProductClassificationType.Category">@TranslationService.GetTranslation("classificationType.category", "Categoria")</MudSelectItem>
                    <MudSelectItem Value="@ProductClassificationType.Subcategory">@TranslationService.GetTranslation("classificationType.subcategory", "Sottocategoria")</MudSelectItem>
                    <MudSelectItem Value="@ProductClassificationType.Brand">@TranslationService.GetTranslation("classificationType.brand", "Brand")</MudSelectItem>
                    <MudSelectItem Value="@ProductClassificationType.Line">@TranslationService.GetTranslation("classificationType.line", "Linea")</MudSelectItem>
                </MudSelect>
                <MudText id="type-help" Typo="Typo.caption" Class="mud-input-helper-text">
                    @TranslationService.GetTranslation("drawer.helperText.classificationType", "Tipo di classificazione del nodo")
                </MudText>
            </MudItem>
            
            <MudItem xs="12" md="6">
                <MudSelect @bind-Value="_model.Status"
                           Label="@($"{TranslationService.GetTranslation("field.status", "Stato")} *")"
                           Variant="Variant.Outlined"
                           Required="true"
                           aria-describedby="status-help">
                    <MudSelectItem Value="@ProductClassificationNodeStatus.Active">@TranslationService.GetTranslation("status.active", "Attivo")</MudSelectItem>
                    <MudSelectItem Value="@ProductClassificationNodeStatus.Inactive">@TranslationService.GetTranslation("status.inactive", "Inattivo")</MudSelectItem>
                    <MudSelectItem Value="@ProductClassificationNodeStatus.Pending">@TranslationService.GetTranslation("status.pending", "In attesa")</MudSelectItem>
                </MudSelect>
                <MudText id="status-help" Typo="Typo.caption" Class="mud-input-helper-text">
                    @TranslationService.GetTranslation("drawer.helperText.nodeStatus", "Stato corrente del nodo")
                </MudText>
            </MudItem>
            
            <MudItem xs="12" md="6">
                <MudSelect T="Guid?" @bind-Value="_model.ParentId"
                           Label="@TranslationService.GetTranslation("field.parentNode", "Nodo Padre")"
                           Variant="Variant.Outlined"
                           Clearable="true"
                           aria-describedby="parent-help">
                    <MudSelectItem T="Guid?" Value="@((Guid?)null)">@TranslationService.GetTranslation("classificationNode.rootNode", "Nodo Radice")</MudSelectItem>
                    @foreach (var node in _availableParentNodes)
                    {
                        <MudSelectItem T="Guid?" Value="@((Guid?)node.Id)">@GetNodeDisplayName(node)</MudSelectItem>
                    }
                </MudSelect>
                <MudText id="parent-help" Typo="Typo.caption" Class="mud-input-helper-text">
                    @TranslationService.GetTranslation("drawer.helperText.parentNode", "Seleziona il nodo padre (lascia vuoto per nodo radice)")
                </MudText>
            </MudItem>
            
            <MudItem xs="12" md="6">
                <MudNumericField @bind-Value="_model.Order"
                                 Label="@TranslationService.GetTranslation("field.order", "Ordine")"
                                 Variant="Variant.Outlined"
                                 Min="0"
                                 Max="1000"
                                 aria-describedby="order-help" />
                <MudText id="order-help" Typo="Typo.caption" Class="mud-input-helper-text">
                    @TranslationService.GetTranslation("drawer.helperText.nodeOrder", "Ordine di visualizzazione (0-1000)")
                </MudText>
            </MudItem>
        </MudGrid>
    </FormContent>
    
    <ViewContent>
        <MudGrid>
            <MudItem xs="12" md="6">
                <MudText Typo="Typo.subtitle2">@TranslationService.GetTranslation("field.code", "Codice")</MudText>
                <MudText>@(_selectedNode?.Code ?? "-")</MudText>
            </MudItem>
            
            <MudItem xs="12" md="6">
                <MudText Typo="Typo.subtitle2">@TranslationService.GetTranslation("field.name", "Nome")</MudText>
                <MudText>@(_selectedNode?.Name ?? "-")</MudText>
            </MudItem>
            
            <MudItem xs="12">
                <MudText Typo="Typo.subtitle2">@TranslationService.GetTranslation("field.description", "Descrizione")</MudText>
                <MudText>@(_selectedNode?.Description ?? "-")</MudText>
            </MudItem>
            
            <MudItem xs="12" md="6">
                <MudText Typo="Typo.subtitle2">@TranslationService.GetTranslation("field.type", "Tipo")</MudText>
                <MudChip T="string" Size="Size.Small" Color="Color.Primary">@GetTypeDisplayName(_selectedNode?.Type)</MudChip>
            </MudItem>
            
            <MudItem xs="12" md="6">
                <MudText Typo="Typo.subtitle2">@TranslationService.GetTranslation("field.status", "Stato")</MudText>
                <MudChip T="string" Size="Size.Small" Color="@GetStatusColor(_selectedNode?.Status)">@GetStatusDisplayName(_selectedNode?.Status)</MudChip>
            </MudItem>
            
            <MudItem xs="12" md="6">
                <MudText Typo="Typo.subtitle2">@TranslationService.GetTranslation("field.parentNode", "Nodo Padre")</MudText>
                <MudText>@(_selectedNode?.ParentName ?? TranslationService.GetTranslation("classificationNode.rootNode", "Nodo Radice"))</MudText>
            </MudItem>
            
            <MudItem xs="12" md="6">
                <MudText Typo="Typo.subtitle2">@TranslationService.GetTranslation("field.level", "Livello")</MudText>
                <MudText>@(_selectedNode?.Level ?? 0)</MudText>
            </MudItem>
            
            <MudItem xs="12" md="6">
                <MudText Typo="Typo.subtitle2">@TranslationService.GetTranslation("field.order", "Ordine")</MudText>
                <MudText>@(_selectedNode?.Order ?? 0)</MudText>
            </MudItem>
            
            <MudItem xs="12" md="6">
                <MudText Typo="Typo.subtitle2">@TranslationService.GetTranslation("field.createdAt", "Creato il")</MudText>
                <MudText>@(_selectedNode?.CreatedAt.ToString("dd/MM/yyyy HH:mm") ?? "-")</MudText>
            </MudItem>
        </MudGrid>
    </ViewContent>
</EntityDrawer>

@code {
    // Parameters
    [Parameter] public bool IsOpen { get; set; }
    [Parameter] public EventCallback<bool> IsOpenChanged { get; set; }
    [Parameter] public EntityDrawerMode Mode { get; set; } = EntityDrawerMode.Create;
    [Parameter] public EventCallback<EntityDrawerMode> ModeChanged { get; set; }
    [Parameter] public ClassificationNodeDto? OriginalClassificationNode { get; set; }
    [Parameter] public bool AllowEdit { get; set; } = true;
    [Parameter] public EventCallback<ClassificationNodeDto> OnClassificationNodeCreated { get; set; }
    [Parameter] public EventCallback<ClassificationNodeDto> OnClassificationNodeUpdated { get; set; }

    // State
    private CreateClassificationNodeDto _model = new();
    private ClassificationNodeDto? _selectedNode;
    private string? _customTitle;
    private List<ClassificationNodeDto> _availableParentNodes = new();
    private List<ClassificationNodeDto> _allNodes = new();

    protected override async Task OnParametersSetAsync()
    {
        await LoadAvailableParentNodesAsync();
        
        if (Mode == EntityDrawerMode.Create)
        {
            _model = new CreateClassificationNodeDto
            {
                Type = ProductClassificationType.Category,
                Status = ProductClassificationNodeStatus.Active,
                Order = 0
            };
            _selectedNode = null;
            _customTitle = TranslationService.GetTranslation("classificationNode.create", "Crea Nodo di Classificazione");
        }
        else if (Mode == EntityDrawerMode.Edit && OriginalClassificationNode != null)
        {
            _model = new CreateClassificationNodeDto
            {
                Code = OriginalClassificationNode.Code,
                Name = OriginalClassificationNode.Name,
                Description = OriginalClassificationNode.Description,
                Type = OriginalClassificationNode.Type,
                Status = OriginalClassificationNode.Status,
                Level = OriginalClassificationNode.Level,
                Order = OriginalClassificationNode.Order,
                ParentId = OriginalClassificationNode.ParentId
            };
            _selectedNode = OriginalClassificationNode;
            _customTitle = TranslationService.GetTranslation("classificationNode.edit", "Modifica Nodo: {0}", OriginalClassificationNode.Name);
        }
        else if (Mode == EntityDrawerMode.View && OriginalClassificationNode != null)
        {
            _selectedNode = OriginalClassificationNode;
            _customTitle = TranslationService.GetTranslation("classificationNode.view", "Dettagli Nodo: {0}", OriginalClassificationNode.Name);
        }
    }

    private async Task LoadAvailableParentNodesAsync()
    {
        try
        {
            var allNodes = await EntityManagementService.GetClassificationNodesAsync();
            _allNodes = allNodes.ToList();
            
            // Filter out the current node and its children to prevent circular references
            if (OriginalClassificationNode != null && Mode == EntityDrawerMode.Edit)
            {
                _availableParentNodes = _allNodes
                    .Where(n => n.Id != OriginalClassificationNode.Id && !IsDescendant(n.Id, OriginalClassificationNode.Id))
                    .OrderBy(n => n.Level)
                    .ThenBy(n => n.Order)
                    .ThenBy(n => n.Name)
                    .ToList();
            }
            else
            {
                _availableParentNodes = _allNodes
                    .OrderBy(n => n.Level)
                    .ThenBy(n => n.Order)
                    .ThenBy(n => n.Name)
                    .ToList();
            }
            
            // Empty list is not an error - it just means this is the first node
            Logger.LogInformation("Loaded {Count} available parent nodes", _availableParentNodes.Count);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading parent nodes");
            // Only show error if there's an actual exception, not for empty results
            Snackbar.Add(TranslationService.GetTranslation("classificationNode.loadParentNodesError", "Errore nel caricamento dei nodi padre"), Severity.Error);
        }
    }

    private bool IsDescendant(Guid potentialDescendantId, Guid ancestorId)
    {
        var node = _allNodes.FirstOrDefault(n => n.Id == potentialDescendantId);
        while (node != null && node.ParentId.HasValue)
        {
            if (node.ParentId.Value == ancestorId)
                return true;
            node = _allNodes.FirstOrDefault(n => n.Id == node.ParentId.Value);
        }
        return false;
    }

    private string GetNodeDisplayName(ClassificationNodeDto node)
    {
        var indent = new string('â', node.Level);
        return $"{indent} {node.Name} ({GetTypeDisplayName(node.Type)})";
    }

    private string GetTypeDisplayName(ProductClassificationType? type)
    {
        if (type == null) return "-";
        
        return type.Value switch
        {
            ProductClassificationType.Category => TranslationService.GetTranslation("classificationType.category", "Categoria"),
            ProductClassificationType.Subcategory => TranslationService.GetTranslation("classificationType.subcategory", "Sottocategoria"),
            ProductClassificationType.Brand => TranslationService.GetTranslation("classificationType.brand", "Brand"),
            ProductClassificationType.Line => TranslationService.GetTranslation("classificationType.line", "Linea"),
            _ => type.ToString()
        };
    }

    private string GetStatusDisplayName(ProductClassificationNodeStatus? status)
    {
        if (status == null) return "-";
        
        return status.Value switch
        {
            ProductClassificationNodeStatus.Active => TranslationService.GetTranslation("status.active", "Attivo"),
            ProductClassificationNodeStatus.Inactive => TranslationService.GetTranslation("status.inactive", "Inattivo"),
            ProductClassificationNodeStatus.Pending => TranslationService.GetTranslation("status.pending", "In attesa"),
            _ => status.ToString()
        };
    }

    private Color GetStatusColor(ProductClassificationNodeStatus? status)
    {
        if (status == null) return Color.Default;
        
        return status.Value switch
        {
            ProductClassificationNodeStatus.Active => Color.Success,
            ProductClassificationNodeStatus.Inactive => Color.Default,
            ProductClassificationNodeStatus.Pending => Color.Warning,
            _ => Color.Default
        };
    }

    private async Task HandleSave()
    {
        try
        {
            if (Mode == EntityDrawerMode.Create)
            {
                var created = await EntityManagementService.CreateClassificationNodeAsync(_model);
                Snackbar.Add(TranslationService.GetTranslation("classificationNode.created", "Nodo di classificazione creato con successo!"), Severity.Success);
                await OnClassificationNodeCreated.InvokeAsync(created);
            }
            else if (Mode == EntityDrawerMode.Edit && OriginalClassificationNode != null)
            {
                var updateDto = new UpdateClassificationNodeDto
                {
                    Code = _model.Code,
                    Name = _model.Name,
                    Description = _model.Description,
                    Type = _model.Type,
                    Status = _model.Status,
                    Level = _model.Level,
                    Order = _model.Order,
                    ParentId = _model.ParentId
                };
                
                var updated = await EntityManagementService.UpdateClassificationNodeAsync(OriginalClassificationNode.Id, updateDto);
                Snackbar.Add(TranslationService.GetTranslation("classificationNode.updated", "Nodo di classificazione aggiornato con successo!"), Severity.Success);
                await OnClassificationNodeUpdated.InvokeAsync(updated);
            }
            
            await HandleClose();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error saving classification node");
            Snackbar.Add(TranslationService.GetTranslation("classificationNode.saveError", "Errore nel salvataggio del nodo: {0}", ex.Message), Severity.Error);
        }
    }

    private async Task HandleCancel()
    {
        await HandleClose();
    }

    private async Task HandleClose()
    {
        IsOpen = false;
        await IsOpenChanged.InvokeAsync(false);
    }
}
