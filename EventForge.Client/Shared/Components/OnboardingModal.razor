@inject ITranslationService TranslationService
@inject IHelpService HelpService
@inject IDialogService DialogService

@* Onboarding modal with step-by-step guidance *@
<MudDialog @bind-IsVisible="@IsVisible" 
           MaxWidth="MaxWidth.Medium" 
           FullWidth="true"
           DisableBackdropClick="false"
           CloseOnEscapeKey="true"
           aria-labelledby="onboarding-title"
           aria-describedby="onboarding-content">
    <DialogContent>
        <div id="onboarding-content" class="pa-4">
            <!-- Progress indicator -->
            <div class="mb-4">
                <MudText Typo="Typo.body2" Class="mb-2">
                    @TranslationService.GetTranslation("onboarding.progress", "Step {0} of {1}", CurrentStep + 1, TotalSteps)
                </MudText>
                <MudProgressLinear Value="@ProgressPercentage" 
                                   Color="Color.Primary" 
                                   Striped="false" 
                                   Size="Size.Medium"
                                   aria-label="@TranslationService.GetTranslation("onboarding.progressAria", "Onboarding progress")" />
            </div>

            <!-- Step content -->
            <div class="mb-4">
                <MudText id="onboarding-title" Typo="Typo.h5" Class="mb-3">
                    @CurrentStepTitle
                </MudText>
                
                @if (!string.IsNullOrEmpty(CurrentStepImage))
                {
                    <div class="text-center mb-3">
                        <MudImage Src="@CurrentStepImage" 
                                  Alt="@CurrentStepImageAlt"
                                  Style="max-width: 100%; height: auto; border-radius: 8px;" />
                    </div>
                }
                
                <MudText Typo="Typo.body1" Class="line-height-normal">
                    @CurrentStepContent
                </MudText>

                @if (CurrentStepTips?.Any() == true)
                {
                    <MudAlert Severity="Severity.Info" Class="mt-3" Icon="@Icons.Material.Filled.Lightbulb">
                        <MudText Typo="Typo.body2">
                            <strong>@TranslationService.GetTranslation("onboarding.tips", "Tips:"):</strong>
                        </MudText>
                        <ul class="ma-0 pl-4">
                            @foreach (var tip in CurrentStepTips)
                            {
                                <li>@tip</li>
                            }
                        </ul>
                    </MudAlert>
                }
            </div>

            <!-- Interactive elements for current step -->
            @if (ShowInteractiveElement)
            {
                <div class="mb-4">
                    @InteractiveContent
                </div>
            }

            <!-- Navigation -->
            <div class="d-flex justify-space-between align-center">
                <div>
                    <MudButton Variant="Variant.Text" 
                               Color="Color.Default"
                               OnClick="@SkipOnboarding"
                               aria-label="@TranslationService.GetTranslation("onboarding.skipAria", "Skip the entire onboarding")">
                        @TranslationService.GetTranslation("onboarding.skip", "Skip")
                    </MudButton>
                </div>
                
                <div class="d-flex ga-2">
                    <MudButton Variant="Variant.Outlined" 
                               Color="Color.Primary"
                               Disabled="@(CurrentStep == 0)"
                               OnClick="@PreviousStep"
                               aria-label="@TranslationService.GetTranslation("onboarding.previousAria", "Go to previous step")">
                        @TranslationService.GetTranslation("common.previous", "Previous")
                    </MudButton>
                    
                    @if (CurrentStep < TotalSteps - 1)
                    {
                        <MudButton Variant="Variant.Filled" 
                                   Color="Color.Primary"
                                   OnClick="@NextStep"
                                   aria-label="@TranslationService.GetTranslation("onboarding.nextAria", "Go to next step")">
                            @TranslationService.GetTranslation("common.next", "Next")
                        </MudButton>
                    }
                    else
                    {
                        <MudButton Variant="Variant.Filled" 
                                   Color="Color.Success"
                                   OnClick="@CompleteOnboarding"
                                   aria-label="@TranslationService.GetTranslation("onboarding.completeAria", "Complete onboarding")">
                            @TranslationService.GetTranslation("onboarding.complete", "Complete")
                        </MudButton>
                    }
                </div>
            </div>

            <!-- Option to not show again -->
            <div class="mt-3 pt-3 border-t">
                <MudCheckBox T="bool" @bind-Checked="@DontShowAgain" 
                             Label="@TranslationService.GetTranslation("onboarding.dontShowAgain", "Don't show this onboarding again")"
                             Color="Color.Primary"
                             aria-describedby="dont-show-help" />
                <MudText id="dont-show-help" Typo="Typo.caption" Class="mud-input-helper-text">
                    @TranslationService.GetTranslation("onboarding.dontShowAgainHelp", "You can always access help from the menu")
                </MudText>
            </div>
        </div>
    </DialogContent>
</MudDialog>

@code {
    /// <summary>
    /// Component ID for the onboarding (e.g., "notifications", "chat").
    /// </summary>
    [Parameter] public string ComponentId { get; set; } = string.Empty;

    /// <summary>
    /// Whether the modal is visible.
    /// </summary>
    [Parameter] public bool IsVisible { get; set; }

    /// <summary>
    /// Callback when visibility changes.
    /// </summary>
    [Parameter] public EventCallback<bool> IsVisibleChanged { get; set; }

    /// <summary>
    /// Callback when onboarding is completed.
    /// </summary>
    [Parameter] public EventCallback OnOnboardingCompleted { get; set; }

    /// <summary>
    /// Callback when onboarding is skipped.
    /// </summary>
    [Parameter] public EventCallback OnOnboardingSkipped { get; set; }

    /// <summary>
    /// Interactive content for the current step.
    /// </summary>
    [Parameter] public RenderFragment? InteractiveContent { get; set; }

    /// <summary>
    /// Whether to show interactive element for current step.
    /// </summary>
    [Parameter] public bool ShowInteractiveElement { get; set; } = false;

    private int CurrentStep { get; set; } = 0;
    private bool DontShowAgain { get; set; } = false;

    // Step content properties
    private List<OnboardingStep> Steps { get; set; } = new();
    private int TotalSteps => Steps.Count;
    private double ProgressPercentage => TotalSteps > 0 ? ((double)(CurrentStep + 1) / TotalSteps) * 100 : 0;

    private string CurrentStepTitle => CurrentStep < Steps.Count 
        ? TranslationService.GetTranslation($"onboarding.{ComponentId}.{Steps[CurrentStep].Id}.title", Steps[CurrentStep].Title)
        : string.Empty;

    private string CurrentStepContent => CurrentStep < Steps.Count 
        ? TranslationService.GetTranslation($"onboarding.{ComponentId}.{Steps[CurrentStep].Id}.content", Steps[CurrentStep].Content)
        : string.Empty;

    private string? CurrentStepImage => CurrentStep < Steps.Count ? Steps[CurrentStep].ImagePath : null;
    
    private string CurrentStepImageAlt => CurrentStep < Steps.Count 
        ? TranslationService.GetTranslation($"onboarding.{ComponentId}.{Steps[CurrentStep].Id}.imageAlt", Steps[CurrentStep].ImageAlt ?? "Step illustration")
        : string.Empty;

    private List<string>? CurrentStepTips => CurrentStep < Steps.Count ? Steps[CurrentStep].Tips : null;

    protected override async Task OnInitializedAsync()
    {
        LoadStepsForComponent();
        
        // Check if user has already completed this onboarding
        if (!string.IsNullOrEmpty(ComponentId))
        {
            var isCompleted = await HelpService.IsOnboardingStepCompletedAsync($"{ComponentId}_onboarding_completed");
            if (isCompleted)
            {
                IsVisible = false;
                await IsVisibleChanged.InvokeAsync(false);
            }
        }
    }

    private void LoadStepsForComponent()
    {
        Steps = ComponentId switch
        {
            "notifications" => new List<OnboardingStep>
            {
                new("welcome", "Welcome to Notifications", "Learn how to manage your notifications effectively.", "/images/onboarding/notifications-welcome.png"),
                new("filters", "Filter Your Notifications", "Use filters to find exactly what you need.", "/images/onboarding/notifications-filters.png", 
                    new List<string> { "Click on filter buttons to narrow down results", "Use the search box for specific notifications" }),
                new("actions", "Take Action", "Mark as read, delete, or respond to notifications.", "/images/onboarding/notifications-actions.png"),
                new("preferences", "Set Your Preferences", "Customize which notifications you receive.", "/images/onboarding/notifications-preferences.png")
            },
            "chat" => new List<OnboardingStep>
            {
                new("welcome", "Welcome to Chat", "Start communicating with your team.", "/images/onboarding/chat-welcome.png"),
                new("channels", "Join Channels", "Participate in different chat channels.", "/images/onboarding/chat-channels.png"),
                new("messaging", "Send Messages", "Learn about messaging features and formatting.", "/images/onboarding/chat-messaging.png"),
                new("files", "Share Files", "Upload and share files with your team.", "/images/onboarding/chat-files.png")
            },
            "superadmin" => new List<OnboardingStep>
            {
                new("welcome", "SuperAdmin Overview", "Powerful tools for system administration.", "/images/onboarding/superadmin-welcome.png"),
                new("users", "Manage Users", "Add, edit, and manage user accounts.", "/images/onboarding/superadmin-users.png"),
                new("config", "System Configuration", "Configure system settings and preferences.", "/images/onboarding/superadmin-config.png"),
                new("audit", "Audit Trail", "Monitor system activity and changes.", "/images/onboarding/superadmin-audit.png")
            },
            _ => new List<OnboardingStep>
            {
                new("welcome", "Welcome", "Learn how to use this feature.", null)
            }
        };
    }

    private async Task NextStep()
    {
        if (CurrentStep < TotalSteps - 1)
        {
            CurrentStep++;
            await MarkStepCompleted();
        }
    }

    private Task PreviousStep()
    {
        if (CurrentStep > 0)
        {
            CurrentStep--;
        }
        return Task.CompletedTask;
    }

    private async Task CompleteOnboarding()
    {
        await MarkStepCompleted();
        
        if (DontShowAgain)
        {
            await HelpService.SetOnboardingStepCompletedAsync($"{ComponentId}_onboarding_completed");
        }

        IsVisible = false;
        await IsVisibleChanged.InvokeAsync(false);
        
        if (OnOnboardingCompleted.HasDelegate)
        {
            await OnOnboardingCompleted.InvokeAsync();
        }
    }

    private async Task SkipOnboarding()
    {
        if (DontShowAgain)
        {
            await HelpService.SetOnboardingStepCompletedAsync($"{ComponentId}_onboarding_completed");
        }

        IsVisible = false;
        await IsVisibleChanged.InvokeAsync(false);

        if (OnOnboardingSkipped.HasDelegate)
        {
            await OnOnboardingSkipped.InvokeAsync();
        }
    }

    private async Task MarkStepCompleted()
    {
        if (CurrentStep < Steps.Count)
        {
            var stepId = $"{ComponentId}_{Steps[CurrentStep].Id}";
            await HelpService.SetOnboardingStepCompletedAsync(stepId);
        }
    }

    private record OnboardingStep(string Id, string Title, string Content, string? ImagePath = null, List<string>? Tips = null)
    {
        public string? ImageAlt { get; init; }
    }
}