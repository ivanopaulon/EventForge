@using MudBlazor
@using EventForge.DTOs.Products
@using EventForge.DTOs.Common
@using EventForge.Client.Shared.Components
@inject IBrandService BrandService
@inject IModelService ModelService
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject ILogger<BrandDrawer> Logger
@inject ITranslationService TranslationService

<EntityDrawer @bind-IsOpen="@IsOpen"
              @bind-Mode="@Mode"
              EntityName="@TranslationService.GetTranslation("field.brand", "Marchio")"
              Model="@_model"
              OnSave="@HandleSave"
              OnCancel="@HandleCancel"
              OnClose="@HandleClose"
              CustomTitle="@_customTitle"
              AllowEdit="@AllowEdit"
              Width="50%">
    
    <FormContent>
        <MudGrid>
            <MudItem xs="12">
                <MudTextField @bind-Value="_model.Name"
                              Label="@($"{TranslationService.GetTranslation("drawer.field.nomeBrand", "Nome Marchio")} *")"
                              Variant="Variant.Outlined"
                              Required="true"
                              RequiredError="@TranslationService.GetTranslation("drawer.error.nomeBrandObbligatorio", "Il nome del marchio Ã¨ obbligatorio")"
                              MaxLength="200"
                              Immediate="true"
                              aria-describedby="name-help" />
                <MudText id="name-help" Typo="Typo.caption" Class="mud-input-helper-text">
                    @TranslationService.GetTranslation("drawer.helperText.nomeBrand", "Inserisci il nome del marchio")
                </MudText>
            </MudItem>
            
            <MudItem xs="12">
                <MudTextField @bind-Value="_model.Description"
                              Label="@TranslationService.GetTranslation("drawer.field.descrizioneBrand", "Descrizione")"
                              Variant="Variant.Outlined"
                              Lines="3"
                              MaxLength="1000"
                              aria-describedby="description-help" />
                <MudText id="description-help" Typo="Typo.caption" Class="mud-input-helper-text">
                    @TranslationService.GetTranslation("drawer.helperText.descrizioneBrand", "Descrizione opzionale del marchio")
                </MudText>
            </MudItem>
            
            <MudItem xs="12" md="6">
                <MudTextField @bind-Value="_model.Website"
                              Label="@TranslationService.GetTranslation("drawer.field.sitoWeb", "Sito Web")"
                              Variant="Variant.Outlined"
                              MaxLength="500"
                              aria-describedby="website-help" />
                <MudText id="website-help" Typo="Typo.caption" Class="mud-input-helper-text">
                    @TranslationService.GetTranslation("drawer.helperText.sitoWeb", "URL del sito web del marchio")
                </MudText>
            </MudItem>
            
            <MudItem xs="12" md="6">
                <MudTextField @bind-Value="_model.Country"
                              Label="@TranslationService.GetTranslation("drawer.field.paese", "Paese")"
                              Variant="Variant.Outlined"
                              MaxLength="100"
                              aria-describedby="country-help" />
                <MudText id="country-help" Typo="Typo.caption" Class="mud-input-helper-text">
                    @TranslationService.GetTranslation("drawer.helperText.paese", "Paese di origine del marchio")
                </MudText>
            </MudItem>
            
            @if (Mode == EntityDrawerMode.Edit && OriginalBrand != null)
            {
                <MudItem xs="12" md="6">
                    <MudTextField Value="@OriginalBrand.Id.ToString()"
                                  Label="@TranslationService.GetTranslation("drawer.field.id", "ID")"
                                  Variant="Variant.Outlined"
                                  ReadOnly="true"
                                  aria-label="@TranslationService.GetTranslation("drawer.aria.identificativoUnico", "Identificativo unico")" />
                </MudItem>
                
                <MudItem xs="12" md="6">
                    <MudTextField Value="@OriginalBrand.CreatedAt.ToString("dd/MM/yyyy HH:mm")"
                                  Label="@TranslationService.GetTranslation("drawer.field.dataCreazione", "Data Creazione")"
                                  Variant="Variant.Outlined"
                                  ReadOnly="true"
                                  aria-label="@TranslationService.GetTranslation("drawer.aria.dataOraCreazione", "Data e ora di creazione")" />
                </MudItem>
                
                @* Models Section with Actions *@
                @if (_loadingModels)
                {
                    <MudItem xs="12" Class="mt-4">
                        <MudProgressLinear Color="Color.Primary" Indeterminate="true" />
                        <MudText Typo="Typo.caption" Align="Align.Center" Class="mt-2">
                            @TranslationService.GetTranslation("common.loading", "Caricamento...")
                        </MudText>
                    </MudItem>
                }
                else
                {
                    <MudItem xs="12" Class="mt-4">
                        <MudExpansionPanels>
                            <MudExpansionPanel>
                                <TitleContent>
                                    <div class="d-flex justify-space-between align-center" style="width: 100%;">
                                        <MudText>@($"{TranslationService.GetTranslation("field.models", "Modelli")} ({_models?.Count() ?? 0})")</MudText>
                                        <div @onclick:stopPropagation="true">
                                            <MudIconButton Icon="@Icons.Material.Filled.Add" 
                                                          Color="Color.Primary" 
                                                          Size="Size.Small"
                                                          OnClick="@(() => OpenAddModelDialog())"
                                                          aria-label="@TranslationService.GetTranslation("button.addModel", "Aggiungi modello")" />
                                        </div>
                                    </div>
                                </TitleContent>
                                <ChildContent>
                                    @if (_models?.Any() == true)
                                    {
                                        <MudTable Items="_models" Hover="true" Dense="true" Striped="true">
                                            <HeaderContent>
                                                <MudTh>@TranslationService.GetTranslation("field.name", "Nome")</MudTh>
                                                <MudTh>@TranslationService.GetTranslation("field.description", "Descrizione")</MudTh>
                                                <MudTh>@TranslationService.GetTranslation("field.mpn", "MPN")</MudTh>
                                                <MudTh>@TranslationService.GetTranslation("common.actions", "Azioni")</MudTh>
                                            </HeaderContent>
                                            <RowTemplate>
                                                <MudTd DataLabel="@TranslationService.GetTranslation("field.name", "Nome")">@context.Name</MudTd>
                                                <MudTd DataLabel="@TranslationService.GetTranslation("field.description", "Descrizione")">
                                                    @if (!string.IsNullOrWhiteSpace(context.Description))
                                                    {
                                                        <span>@(context.Description.Length > 30 ? context.Description.Substring(0, 30) + "..." : context.Description)</span>
                                                    }
                                                    else
                                                    {
                                                        <span>-</span>
                                                    }
                                                </MudTd>
                                                <MudTd DataLabel="@TranslationService.GetTranslation("field.mpn", "MPN")">@(context.ManufacturerPartNumber ?? "-")</MudTd>
                                                <MudTd>
                                                    <MudIconButton Icon="@Icons.Material.Filled.Edit" 
                                                                  Color="Color.Primary" 
                                                                  Size="Size.Small"
                                                                  OnClick="@(() => OpenEditModelDialog(context))"
                                                                  title="@TranslationService.GetTranslation("common.edit", "Modifica")" />
                                                    <MudIconButton Icon="@Icons.Material.Filled.Delete" 
                                                                  Color="Color.Error" 
                                                                  Size="Size.Small"
                                                                  OnClick="@(() => DeleteModel(context.Id))"
                                                                  title="@TranslationService.GetTranslation("common.delete", "Elimina")" />
                                                </MudTd>
                                            </RowTemplate>
                                        </MudTable>
                                    }
                                    else
                                    {
                                        <MudText Typo="Typo.body2" Class="pa-4">@TranslationService.GetTranslation("messages.noModels", "Nessun modello disponibile")</MudText>
                                    }
                                </ChildContent>
                            </MudExpansionPanel>
                        </MudExpansionPanels>
                    </MudItem>
                }
            }
        </MudGrid>
    </FormContent>
    
    <ViewContent>
        <MudGrid>
            <MudItem xs="12">
                <MudTextField Value="@(OriginalBrand?.Name ?? "")"
                              Label="@TranslationService.GetTranslation("drawer.field.nomeBrand", "Nome Marchio")"
                              Variant="Variant.Outlined"
                              ReadOnly="true"
                              aria-label="@TranslationService.GetTranslation("drawer.field.nomeBrand", "Nome Marchio")" />
            </MudItem>
            
            <MudItem xs="12">
                <MudTextField Value="@(OriginalBrand?.Description ?? "")"
                              Label="@TranslationService.GetTranslation("drawer.field.descrizioneBrand", "Descrizione")"
                              Variant="Variant.Outlined"
                              Lines="3"
                              ReadOnly="true"
                              aria-label="@TranslationService.GetTranslation("drawer.field.descrizioneBrand", "Descrizione")" />
            </MudItem>
            
            <MudItem xs="12" md="6">
                <MudTextField Value="@(OriginalBrand?.Website ?? "")"
                              Label="@TranslationService.GetTranslation("drawer.field.sitoWeb", "Sito Web")"
                              Variant="Variant.Outlined"
                              ReadOnly="true"
                              aria-label="@TranslationService.GetTranslation("drawer.field.sitoWeb", "Sito Web")" />
            </MudItem>
            
            <MudItem xs="12" md="6">
                <MudTextField Value="@(OriginalBrand?.Country ?? "")"
                              Label="@TranslationService.GetTranslation("drawer.field.paese", "Paese")"
                              Variant="Variant.Outlined"
                              ReadOnly="true"
                              aria-label="@TranslationService.GetTranslation("drawer.field.paese", "Paese")" />
            </MudItem>
            
            @if (OriginalBrand != null)
            {
                <MudItem xs="12" md="6">
                    <MudTextField Value="@OriginalBrand.Id.ToString()"
                                  Label="@TranslationService.GetTranslation("drawer.field.id", "ID")"
                                  Variant="Variant.Outlined"
                                  ReadOnly="true"
                                  aria-label="@TranslationService.GetTranslation("drawer.aria.identificativoUnico", "Identificativo unico")" />
                </MudItem>
                
                <MudItem xs="12" md="6">
                    <MudTextField Value="@OriginalBrand.CreatedAt.ToString("dd/MM/yyyy HH:mm")"
                                  Label="@TranslationService.GetTranslation("drawer.field.dataCreazione", "Data Creazione")"
                                  Variant="Variant.Outlined"
                                  ReadOnly="true"
                                  aria-label="@TranslationService.GetTranslation("drawer.aria.dataOraCreazione", "Data e ora di creazione")" />
                </MudItem>
                
                @if (!string.IsNullOrWhiteSpace(OriginalBrand.CreatedBy))
                {
                    <MudItem xs="12">
                        <MudTextField Value="@OriginalBrand.CreatedBy"
                                      Label="@TranslationService.GetTranslation("drawer.field.creatoDa", "Creato Da")"
                                      Variant="Variant.Outlined"
                                      ReadOnly="true"
                                      aria-label="@TranslationService.GetTranslation("drawer.field.creatoDa", "Creato Da")" />
                    </MudItem>
                }
                
                @* Models Section in View Mode *@
                @if (_loadingModels)
                {
                    <MudItem xs="12" Class="mt-4">
                        <MudProgressLinear Color="Color.Primary" Indeterminate="true" />
                        <MudText Typo="Typo.caption" Align="Align.Center" Class="mt-2">
                            @TranslationService.GetTranslation("common.loading", "Caricamento...")
                        </MudText>
                    </MudItem>
                }
                else if (_models?.Any() == true)
                {
                    <MudItem xs="12" Class="mt-4">
                        <MudExpansionPanels>
                            <MudExpansionPanel Text="@($"{TranslationService.GetTranslation("field.models", "Modelli")} ({_models.Count()})")" Expanded="true">
                                <MudTable Items="_models" Hover="true" Dense="true" Striped="true">
                                    <HeaderContent>
                                        <MudTh>@TranslationService.GetTranslation("field.name", "Nome")</MudTh>
                                        <MudTh>@TranslationService.GetTranslation("field.description", "Descrizione")</MudTh>
                                        <MudTh>@TranslationService.GetTranslation("field.mpn", "MPN")</MudTh>
                                        <MudTh>@TranslationService.GetTranslation("field.createdAt", "Creato il")</MudTh>
                                    </HeaderContent>
                                    <RowTemplate>
                                        <MudTd DataLabel="@TranslationService.GetTranslation("field.name", "Nome")">@context.Name</MudTd>
                                        <MudTd DataLabel="@TranslationService.GetTranslation("field.description", "Descrizione")">
                                            @if (!string.IsNullOrWhiteSpace(context.Description))
                                            {
                                                <span>@(context.Description.Length > 30 ? context.Description.Substring(0, 30) + "..." : context.Description)</span>
                                            }
                                            else
                                            {
                                                <span>-</span>
                                            }
                                        </MudTd>
                                        <MudTd DataLabel="@TranslationService.GetTranslation("field.mpn", "MPN")">@(context.ManufacturerPartNumber ?? "-")</MudTd>
                                        <MudTd DataLabel="@TranslationService.GetTranslation("field.createdAt", "Creato il")">@context.CreatedAt.ToString("dd/MM/yyyy")</MudTd>
                                    </RowTemplate>
                                </MudTable>
                            </MudExpansionPanel>
                        </MudExpansionPanels>
                    </MudItem>
                }
            }
        </MudGrid>
    </ViewContent>
</EntityDrawer>

@code {
    [Parameter]
    public EventCallback OnEntitySaved { get; set; }

    [Parameter]
    public bool AllowEdit { get; set; } = true;

    public bool IsOpen { get; set; }
    public EntityDrawerMode Mode { get; set; } = EntityDrawerMode.View;
    public BrandDto? OriginalBrand { get; private set; }

    private BrandDto _model = new();
    private string? _customTitle;
    private bool _loadingModels = false;
    private IEnumerable<ModelDto>? _models;

    public void OpenForCreate()
    {
        Mode = EntityDrawerMode.Create;
        OriginalBrand = null;
        _model = new BrandDto();
        _customTitle = TranslationService.GetTranslation("drawer.title.creaBrand", "Crea Nuovo Marchio");
        IsOpen = true;
        ClearModels();
        StateHasChanged();
    }

    public async Task OpenForEdit(Guid id)
    {
        try
        {
            Mode = EntityDrawerMode.Edit;
            var brand = await BrandService.GetBrandByIdAsync(id);
            
            if (brand == null)
            {
                Snackbar.Add(
                    TranslationService.GetTranslation("brand.notFound", "Marchio non trovato"),
                    Severity.Warning);
                return;
            }

            OriginalBrand = brand;
            _model = new BrandDto
            {
                Id = brand.Id,
                Name = brand.Name,
                Description = brand.Description,
                Website = brand.Website,
                Country = brand.Country
            };

            _customTitle = $"{TranslationService.GetTranslation("drawer.title.modificaBrand", "Modifica Marchio")}: {brand.Name}";
            IsOpen = true;
            StateHasChanged();
            
            // Load models for this brand
            await LoadModelsAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading brand for edit");
            Snackbar.Add(
                TranslationService.GetTranslation("brand.loadError", "Errore nel caricamento del marchio"),
                Severity.Error);
        }
    }

    public async Task OpenForView(Guid id)
    {
        try
        {
            Mode = EntityDrawerMode.View;
            var brand = await BrandService.GetBrandByIdAsync(id);
            
            if (brand == null)
            {
                Snackbar.Add(
                    TranslationService.GetTranslation("brand.notFound", "Marchio non trovato"),
                    Severity.Warning);
                return;
            }

            OriginalBrand = brand;
            _model = brand;
            _customTitle = $"{TranslationService.GetTranslation("drawer.title.visualizzaBrand", "Visualizza Marchio")}: {brand.Name}";
            IsOpen = true;
            StateHasChanged();
            
            // Load models for this brand
            await LoadModelsAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading brand for view");
            Snackbar.Add(
                TranslationService.GetTranslation("brand.loadError", "Errore nel caricamento del marchio"),
                Severity.Error);
        }
    }
    
    private async Task LoadModelsAsync()
    {
        if (OriginalBrand == null) return;
        
        try
        {
            _loadingModels = true;
            StateHasChanged();
            
            var result = await ModelService.GetModelsByBrandIdAsync(OriginalBrand.Id, page: 1, pageSize: 1000);
            _models = result.Items ?? new List<ModelDto>();
            
            _loadingModels = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to load models for brand {BrandId}", OriginalBrand.Id);
            _loadingModels = false;
            Snackbar.Add(TranslationService.GetTranslation("messages.loadFailed", "Errore durante il caricamento"), Severity.Warning);
        }
    }
    
    private void ClearModels()
    {
        _models = null;
        _loadingModels = false;
    }

    private async Task HandleSave()
    {
        try
        {
            if (Mode == EntityDrawerMode.Create)
            {
                var createDto = new CreateBrandDto
                {
                    Name = _model.Name,
                    Description = _model.Description,
                    Website = _model.Website,
                    Country = _model.Country
                };
                
                await BrandService.CreateBrandAsync(createDto);
                Snackbar.Add(
                    TranslationService.GetTranslation("brand.createSuccess", "Marchio creato con successo"),
                    Severity.Success);
            }
            else if (Mode == EntityDrawerMode.Edit && OriginalBrand != null)
            {
                var updateDto = new UpdateBrandDto
                {
                    Name = _model.Name,
                    Description = _model.Description,
                    Website = _model.Website,
                    Country = _model.Country
                };
                
                await BrandService.UpdateBrandAsync(OriginalBrand.Id, updateDto);
                Snackbar.Add(
                    TranslationService.GetTranslation("brand.updateSuccess", "Marchio aggiornato con successo"),
                    Severity.Success);
            }

            await OnEntitySaved.InvokeAsync();
            HandleClose();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error saving brand");
            Snackbar.Add(
                TranslationService.GetTranslation("brand.saveError", "Errore nel salvataggio del marchio"),
                Severity.Error);
        }
    }

    private void HandleCancel()
    {
        HandleClose();
    }

    private void HandleClose()
    {
        IsOpen = false;
        _model = new BrandDto();
        OriginalBrand = null;
        _customTitle = null;
        ClearModels();
        StateHasChanged();
    }
    
    #region Model Management
    
    private async Task OpenAddModelDialog()
    {
        if (OriginalBrand == null) return;
        
        var parameters = new DialogParameters
        {
            ["BrandId"] = OriginalBrand.Id,
            ["BrandName"] = OriginalBrand.Name
        };
        
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialog = await DialogService.ShowAsync<AddModelDialog>(
            TranslationService.GetTranslation("dialog.addModel", "Aggiungi Modello"),
            parameters,
            options
        );
        
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await LoadModelsAsync();
        }
    }
    
    private async Task OpenEditModelDialog(ModelDto model)
    {
        var parameters = new DialogParameters
        {
            ["Model"] = model
        };
        
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialog = await DialogService.ShowAsync<EditModelDialog>(
            TranslationService.GetTranslation("dialog.editModel", "Modifica Modello"),
            parameters,
            options
        );
        
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await LoadModelsAsync();
        }
    }
    
    private async Task DeleteModel(Guid modelId)
    {
        try
        {
            var confirmTitle = TranslationService.GetTranslation("common.confirm", "Conferma");
            var confirmMessage = TranslationService.GetTranslation("dialog.confirmDeleteModel", "Sei sicuro di voler eliminare questo modello?");
            
            var confirm = await DialogService.ShowMessageBox(
                confirmTitle,
                confirmMessage,
                yesText: TranslationService.GetTranslation("common.delete", "Elimina"),
                cancelText: TranslationService.GetTranslation("common.cancel", "Annulla"));
            
            if (confirm != true) return;
            
            await ModelService.DeleteModelAsync(modelId);
            Snackbar.Add(TranslationService.GetTranslation("messages.deleteSuccessful", "Eliminazione completata con successo"), Severity.Success);
            
            // Reload models
            await LoadModelsAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to delete model {ModelId}", modelId);
            Snackbar.Add(TranslationService.GetTranslation("messages.deleteFailed", "Errore durante l'eliminazione"), Severity.Error);
        }
    }
    
    #endregion
}
