@using MudBlazor
@using EventForge.DTOs.Products
@using EventForge.DTOs.Common
@using EventForge.Client.Shared.Components
@inject IBrandService BrandService
@inject ISnackbar Snackbar
@inject ILogger<BrandDrawer> Logger
@inject ITranslationService TranslationService

<EntityDrawer @bind-IsOpen="@IsOpen"
              @bind-Mode="@Mode"
              EntityName="@TranslationService.GetTranslation("field.brand", "Marchio")"
              Model="@_model"
              OnSave="@HandleSave"
              OnCancel="@HandleCancel"
              OnClose="@HandleClose"
              CustomTitle="@_customTitle"
              AllowEdit="@AllowEdit"
              Width="50%">
    
    <FormContent>
        <MudGrid>
            <MudItem xs="12">
                <MudTextField @bind-Value="_model.Name"
                              Label="@($"{TranslationService.GetTranslation("drawer.field.nomeBrand", "Nome Marchio")} *")"
                              Variant="Variant.Outlined"
                              Required="true"
                              RequiredError="@TranslationService.GetTranslation("drawer.error.nomeBrandObbligatorio", "Il nome del marchio Ã¨ obbligatorio")"
                              MaxLength="200"
                              Immediate="true"
                              aria-describedby="name-help" />
                <MudText id="name-help" Typo="Typo.caption" Class="mud-input-helper-text">
                    @TranslationService.GetTranslation("drawer.helperText.nomeBrand", "Inserisci il nome del marchio")
                </MudText>
            </MudItem>
            
            <MudItem xs="12">
                <MudTextField @bind-Value="_model.Description"
                              Label="@TranslationService.GetTranslation("drawer.field.descrizioneBrand", "Descrizione")"
                              Variant="Variant.Outlined"
                              Lines="3"
                              MaxLength="1000"
                              aria-describedby="description-help" />
                <MudText id="description-help" Typo="Typo.caption" Class="mud-input-helper-text">
                    @TranslationService.GetTranslation("drawer.helperText.descrizioneBrand", "Descrizione opzionale del marchio")
                </MudText>
            </MudItem>
            
            <MudItem xs="12" md="6">
                <MudTextField @bind-Value="_model.Website"
                              Label="@TranslationService.GetTranslation("drawer.field.sitoWeb", "Sito Web")"
                              Variant="Variant.Outlined"
                              MaxLength="500"
                              aria-describedby="website-help" />
                <MudText id="website-help" Typo="Typo.caption" Class="mud-input-helper-text">
                    @TranslationService.GetTranslation("drawer.helperText.sitoWeb", "URL del sito web del marchio")
                </MudText>
            </MudItem>
            
            <MudItem xs="12" md="6">
                <MudTextField @bind-Value="_model.Country"
                              Label="@TranslationService.GetTranslation("drawer.field.paese", "Paese")"
                              Variant="Variant.Outlined"
                              MaxLength="100"
                              aria-describedby="country-help" />
                <MudText id="country-help" Typo="Typo.caption" Class="mud-input-helper-text">
                    @TranslationService.GetTranslation("drawer.helperText.paese", "Paese di origine del marchio")
                </MudText>
            </MudItem>
            
            @if (Mode == EntityDrawerMode.Edit && OriginalBrand != null)
            {
                <MudItem xs="12" md="6">
                    <MudTextField Value="@OriginalBrand.Id.ToString()"
                                  Label="@TranslationService.GetTranslation("drawer.field.id", "ID")"
                                  Variant="Variant.Outlined"
                                  ReadOnly="true"
                                  aria-label="@TranslationService.GetTranslation("drawer.aria.identificativoUnico", "Identificativo unico")" />
                </MudItem>
                
                <MudItem xs="12" md="6">
                    <MudTextField Value="@OriginalBrand.CreatedAt.ToString("dd/MM/yyyy HH:mm")"
                                  Label="@TranslationService.GetTranslation("drawer.field.dataCreazione", "Data Creazione")"
                                  Variant="Variant.Outlined"
                                  ReadOnly="true"
                                  aria-label="@TranslationService.GetTranslation("drawer.aria.dataOraCreazione", "Data e ora di creazione")" />
                </MudItem>
            }
        </MudGrid>
    </FormContent>
    
    <ViewContent>
        <MudGrid>
            <MudItem xs="12">
                <MudTextField Value="@(OriginalBrand?.Name ?? "")"
                              Label="@TranslationService.GetTranslation("drawer.field.nomeBrand", "Nome Marchio")"
                              Variant="Variant.Outlined"
                              ReadOnly="true"
                              aria-label="@TranslationService.GetTranslation("drawer.field.nomeBrand", "Nome Marchio")" />
            </MudItem>
            
            <MudItem xs="12">
                <MudTextField Value="@(OriginalBrand?.Description ?? "")"
                              Label="@TranslationService.GetTranslation("drawer.field.descrizioneBrand", "Descrizione")"
                              Variant="Variant.Outlined"
                              Lines="3"
                              ReadOnly="true"
                              aria-label="@TranslationService.GetTranslation("drawer.field.descrizioneBrand", "Descrizione")" />
            </MudItem>
            
            <MudItem xs="12" md="6">
                <MudTextField Value="@(OriginalBrand?.Website ?? "")"
                              Label="@TranslationService.GetTranslation("drawer.field.sitoWeb", "Sito Web")"
                              Variant="Variant.Outlined"
                              ReadOnly="true"
                              aria-label="@TranslationService.GetTranslation("drawer.field.sitoWeb", "Sito Web")" />
            </MudItem>
            
            <MudItem xs="12" md="6">
                <MudTextField Value="@(OriginalBrand?.Country ?? "")"
                              Label="@TranslationService.GetTranslation("drawer.field.paese", "Paese")"
                              Variant="Variant.Outlined"
                              ReadOnly="true"
                              aria-label="@TranslationService.GetTranslation("drawer.field.paese", "Paese")" />
            </MudItem>
            
            @if (OriginalBrand != null)
            {
                <MudItem xs="12" md="6">
                    <MudTextField Value="@OriginalBrand.Id.ToString()"
                                  Label="@TranslationService.GetTranslation("drawer.field.id", "ID")"
                                  Variant="Variant.Outlined"
                                  ReadOnly="true"
                                  aria-label="@TranslationService.GetTranslation("drawer.aria.identificativoUnico", "Identificativo unico")" />
                </MudItem>
                
                <MudItem xs="12" md="6">
                    <MudTextField Value="@OriginalBrand.CreatedAt.ToString("dd/MM/yyyy HH:mm")"
                                  Label="@TranslationService.GetTranslation("drawer.field.dataCreazione", "Data Creazione")"
                                  Variant="Variant.Outlined"
                                  ReadOnly="true"
                                  aria-label="@TranslationService.GetTranslation("drawer.aria.dataOraCreazione", "Data e ora di creazione")" />
                </MudItem>
                
                @if (!string.IsNullOrWhiteSpace(OriginalBrand.CreatedBy))
                {
                    <MudItem xs="12">
                        <MudTextField Value="@OriginalBrand.CreatedBy"
                                      Label="@TranslationService.GetTranslation("drawer.field.creatoDa", "Creato Da")"
                                      Variant="Variant.Outlined"
                                      ReadOnly="true"
                                      aria-label="@TranslationService.GetTranslation("drawer.field.creatoDa", "Creato Da")" />
                    </MudItem>
                }
            }
        </MudGrid>
    </ViewContent>
</EntityDrawer>

@code {
    [Parameter]
    public EventCallback OnEntitySaved { get; set; }

    [Parameter]
    public bool AllowEdit { get; set; } = true;

    public bool IsOpen { get; set; }
    public EntityDrawerMode Mode { get; set; } = EntityDrawerMode.View;
    public BrandDto? OriginalBrand { get; private set; }

    private BrandDto _model = new();
    private string? _customTitle;

    public void OpenForCreate()
    {
        Mode = EntityDrawerMode.Create;
        OriginalBrand = null;
        _model = new BrandDto();
        _customTitle = TranslationService.GetTranslation("drawer.title.creaBrand", "Crea Nuovo Marchio");
        IsOpen = true;
        StateHasChanged();
    }

    public async Task OpenForEdit(Guid id)
    {
        try
        {
            Mode = EntityDrawerMode.Edit;
            var brand = await BrandService.GetBrandByIdAsync(id);
            
            if (brand == null)
            {
                Snackbar.Add(
                    TranslationService.GetTranslation("brand.notFound", "Marchio non trovato"),
                    Severity.Warning);
                return;
            }

            OriginalBrand = brand;
            _model = new BrandDto
            {
                Id = brand.Id,
                Name = brand.Name,
                Description = brand.Description,
                Website = brand.Website,
                Country = brand.Country
            };

            _customTitle = $"{TranslationService.GetTranslation("drawer.title.modificaBrand", "Modifica Marchio")}: {brand.Name}";
            IsOpen = true;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading brand for edit");
            Snackbar.Add(
                TranslationService.GetTranslation("brand.loadError", "Errore nel caricamento del marchio"),
                Severity.Error);
        }
    }

    public async Task OpenForView(Guid id)
    {
        try
        {
            Mode = EntityDrawerMode.View;
            var brand = await BrandService.GetBrandByIdAsync(id);
            
            if (brand == null)
            {
                Snackbar.Add(
                    TranslationService.GetTranslation("brand.notFound", "Marchio non trovato"),
                    Severity.Warning);
                return;
            }

            OriginalBrand = brand;
            _model = brand;
            _customTitle = $"{TranslationService.GetTranslation("drawer.title.visualizzaBrand", "Visualizza Marchio")}: {brand.Name}";
            IsOpen = true;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading brand for view");
            Snackbar.Add(
                TranslationService.GetTranslation("brand.loadError", "Errore nel caricamento del marchio"),
                Severity.Error);
        }
    }

    private async Task HandleSave()
    {
        try
        {
            if (Mode == EntityDrawerMode.Create)
            {
                var createDto = new CreateBrandDto
                {
                    Name = _model.Name,
                    Description = _model.Description,
                    Website = _model.Website,
                    Country = _model.Country
                };
                
                await BrandService.CreateBrandAsync(createDto);
                Snackbar.Add(
                    TranslationService.GetTranslation("brand.createSuccess", "Marchio creato con successo"),
                    Severity.Success);
            }
            else if (Mode == EntityDrawerMode.Edit && OriginalBrand != null)
            {
                var updateDto = new UpdateBrandDto
                {
                    Name = _model.Name,
                    Description = _model.Description,
                    Website = _model.Website,
                    Country = _model.Country
                };
                
                await BrandService.UpdateBrandAsync(OriginalBrand.Id, updateDto);
                Snackbar.Add(
                    TranslationService.GetTranslation("brand.updateSuccess", "Marchio aggiornato con successo"),
                    Severity.Success);
            }

            await OnEntitySaved.InvokeAsync();
            HandleClose();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error saving brand");
            Snackbar.Add(
                TranslationService.GetTranslation("brand.saveError", "Errore nel salvataggio del marchio"),
                Severity.Error);
        }
    }

    private void HandleCancel()
    {
        HandleClose();
    }

    private void HandleClose()
    {
        IsOpen = false;
        _model = new BrandDto();
        OriginalBrand = null;
        _customTitle = null;
        StateHasChanged();
    }
}
