@using MudBlazor
@using EventForge.DTOs.Common
@inject IEntityManagementService EntityManagementService
@inject ISnackbar Snackbar
@inject ITranslationService TranslationService
@inject ILogger<AddReferenceDialog> Logger

<MudDialog>
    <DialogContent>
        <MudForm @ref="_form" @bind-IsValid="@_isValid">
            <MudGrid>
                <MudItem xs="12" md="6">
                    <MudTextField @bind-Value="_model.FirstName"
                                 Label="@($"{TranslationService.GetTranslation("field.firstName", "Nome")} *")"
                                 Variant="Variant.Outlined"
                                 Required="true"
                                 MaxLength="50" />
                </MudItem>
                
                <MudItem xs="12" md="6">
                    <MudTextField @bind-Value="_model.LastName"
                                 Label="@($"{TranslationService.GetTranslation("field.lastName", "Cognome")} *")"
                                 Variant="Variant.Outlined"
                                 Required="true"
                                 MaxLength="50" />
                </MudItem>
                
                <MudItem xs="12">
                    <MudTextField @bind-Value="_model.Department"
                                 Label="@TranslationService.GetTranslation("field.department", "Dipartimento/Ruolo")"
                                 Variant="Variant.Outlined"
                                 MaxLength="50" />
                </MudItem>
                
                <MudItem xs="12">
                    <MudTextField @bind-Value="_model.Notes"
                                 Label="@TranslationService.GetTranslation("field.notes", "Note")"
                                 Variant="Variant.Outlined"
                                 Lines="3"
                                 MaxLength="100" />
                </MudItem>
            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">@TranslationService.GetTranslation("button.cancel", "Annulla")</MudButton>
        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="Submit" Disabled="@(!_isValid || _isProcessing)">
            @if (_isProcessing)
            {
                <MudProgressCircular Size="Size.Small" Indeterminate="true" />
            }
            else
            {
                @TranslationService.GetTranslation("button.save", "Salva")
            }
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] 
    private IMudDialogInstance MudDialog { get; set; } = null!;

    [Parameter] 
    public Guid OwnerId { get; set; }

    [Parameter] 
    public string OwnerType { get; set; } = string.Empty;

    private MudForm _form = null!;
    private bool _isValid;
    private bool _isProcessing;
    private CreateReferenceDto _model = new();

    protected override void OnParametersSet()
    {
        _model.OwnerId = OwnerId;
        _model.OwnerType = OwnerType;
    }

    private async Task Submit()
    {
        if (!_isValid) return;

        try
        {
            _isProcessing = true;
            await EntityManagementService.CreateReferenceAsync(_model);
            Snackbar.Add(TranslationService.GetTranslation("messages.createSuccessful", "Creazione completata con successo"), Severity.Success);
            MudDialog.Close(DialogResult.Ok(true));
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to create reference");
            Snackbar.Add(TranslationService.GetTranslation("messages.createFailed", "Errore durante la creazione"), Severity.Error);
        }
        finally
        {
            _isProcessing = false;
        }
    }

    private void Cancel() => MudDialog.Cancel();
}
