@using EventForge.DTOs.Common
@using EventForge.DTOs.Products
@inject ITranslationService TranslationService
@inject IProductService ProductService
@inject ISnackbar Snackbar
@inject ILogger<ProductNotFoundDialog> Logger

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Outlined.SearchOff" Class="mr-2" />
            @TranslationService.GetTranslation("warehouse.productNotFound", "Prodotto non trovato")
        </MudText>
    </TitleContent>
    <DialogContent>
        @if (_isLoading)
        {
            <MudProgressLinear Indeterminate="true" Class="mb-4" />
        }

        <MudAlert Severity="Severity.Warning" Class="mb-4">
            @TranslationService.GetTranslation("warehouse.productNotFoundWithCode", "Prodotto non trovato con il codice: {0}", Barcode)
        </MudAlert>

        <MudPaper Elevation="0" Class="pa-3 mb-4" Style="background-color: var(--mud-palette-info-lighten);">
            <MudText Typo="Typo.body2" Class="mb-2">
                @TranslationService.GetTranslation("warehouse.barcodeToAssign", "Codice da Assegnare")
            </MudText>
            <MudChip T="string" Icon="@Icons.Material.Outlined.QrCode" Color="Color.Primary">@Barcode</MudChip>
        </MudPaper>

        <MudText Typo="Typo.body1" Class="mb-3">
            @TranslationService.GetTranslation("warehouse.searchOrCreatePrompt", "Cerca un prodotto esistente per assegnare questo codice, oppure crea un nuovo prodotto.")
        </MudText>

        <!-- Product Search -->
        <MudAutocomplete T="ProductDto"
                         @bind-Value="_selectedProduct"
                         Label="@TranslationService.GetTranslation("products.searchProduct", "Cerca Prodotto")"
                         Variant="Variant.Outlined"
                         SearchFunc="@SearchProducts"
                         ToStringFunc="@(p => p?.Name ?? string.Empty)"
                         Immediate="true"
                         ResetValueOnEmptyText="true"
                         CoerceText="true"
                         CoerceValue="false"
                         Adornment="Adornment.Start"
                         AdornmentIcon="@Icons.Material.Outlined.Search"
                         HelperText="@TranslationService.GetTranslation("products.searchByCodeOrDescription", "Cerca per codice o descrizione")"
                         Class="mb-4">
            <ItemTemplate Context="product">
                <MudText Typo="Typo.body2">@product.Name</MudText>
                <MudText Typo="Typo.caption" Color="Color.Secondary">@product.Code @(!string.IsNullOrEmpty(product.ShortDescription) ? " - " + product.ShortDescription : "")</MudText>
            </ItemTemplate>
            <NoItemsTemplate>
                <MudText Typo="Typo.body2" Color="Color.Secondary">
                    @TranslationService.GetTranslation("products.noProductsFound", "Nessun prodotto trovato")
                </MudText>
            </NoItemsTemplate>
        </MudAutocomplete>

        <!-- Selected Product Details -->
        @if (_selectedProduct != null)
        {
            <MudPaper Elevation="1" Class="pa-3 mb-4">
                <MudText Typo="Typo.subtitle2" Class="mb-3">
                    @TranslationService.GetTranslation("products.selectedProduct", "Prodotto Selezionato")
                </MudText>

                <MudGrid Spacing="2">
                    <MudItem xs="12" md="6">
                        <MudText Typo="Typo.body2" Color="Color.Secondary">@TranslationService.GetTranslation("products.productName", "Nome Prodotto")</MudText>
                        <MudText Typo="Typo.body1" Style="font-weight: 600;">@_selectedProduct.Name</MudText>
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <MudText Typo="Typo.body2" Color="Color.Secondary">@TranslationService.GetTranslation("products.productCode", "Codice Prodotto")</MudText>
                        <MudText Typo="Typo.body1" Style="font-weight: 600;">@_selectedProduct.Code</MudText>
                    </MudItem>
                    <MudItem xs="12">
                        <MudText Typo="Typo.body2" Color="Color.Secondary">@TranslationService.GetTranslation("products.description", "Descrizione")</MudText>
                        <MudText Typo="Typo.body1">@_selectedProduct.Description</MudText>
                    </MudItem>
                </MudGrid>
            </MudPaper>

            <!-- Code Type Selection for Assignment -->
            <MudForm @ref="_form" @bind-IsValid="@_isFormValid">
                <MudGrid Spacing="3">
                    <MudItem xs="12">
                        <MudSelect @bind-Value="_createCodeDto.CodeType"
                                   Label="@TranslationService.GetTranslation("products.codeType", "Tipo Codice")"
                                   Variant="Variant.Outlined"
                                   Required="true"
                                   RequiredError="@TranslationService.GetTranslation("validation.required", "Campo obbligatorio")">
                            <MudSelectItem Value="@("EAN")">EAN</MudSelectItem>
                            <MudSelectItem Value="@("UPC")">UPC</MudSelectItem>
                            <MudSelectItem Value="@("SKU")">SKU</MudSelectItem>
                            <MudSelectItem Value="@("QR")">QR Code</MudSelectItem>
                            <MudSelectItem Value="@("Barcode")">@TranslationService.GetTranslation("products.barcode", "Codice a Barre")</MudSelectItem>
                            <MudSelectItem Value="@("Other")">@TranslationService.GetTranslation("products.other", "Altro")</MudSelectItem>
                        </MudSelect>
                    </MudItem>

                    <MudItem xs="12">
                        <MudTextField @bind-Value="_createCodeDto.Code"
                                      Label="@TranslationService.GetTranslation("field.code", "Codice")"
                                      Variant="Variant.Outlined"
                                      Required="true"
                                      RequiredError="@TranslationService.GetTranslation("validation.required", "Campo obbligatorio")"
                                      MaxLength="100"
                                      Counter="100"
                                      HelperText="@TranslationService.GetTranslation("products.codeHelper", "Codice SKU o simile")" />
                    </MudItem>

                    <MudItem xs="12">
                        <MudTextField @bind-Value="_createCodeDto.AlternativeDescription"
                                      Label="@TranslationService.GetTranslation("products.alternativeDescription", "Descrizione Alternativa")"
                                      Variant="Variant.Outlined"
                                      Lines="2"
                                      MaxLength="200"
                                      Counter="200"
                                      HelperText="@TranslationService.GetTranslation("products.descriptionHelper", "Descrizione opzionale per questo codice")" />
                    </MudItem>
                </MudGrid>
            </MudForm>
        }

        <!-- Action Buttons in Content Area -->
        @if (_selectedProduct == null)
        {
            <MudDivider Class="my-4" />
            <MudText Typo="Typo.body2" Class="mb-3">
                @TranslationService.GetTranslation("warehouse.noProductSelectedHint", "Non hai trovato il prodotto? Creane uno nuovo:")
            </MudText>
        }
    </DialogContent>
    <DialogActions>
        @if (IsInventoryContext)
        {
            <MudButton StartIcon="@Icons.Material.Outlined.SkipNext"
                      Color="Color.Default"
                      Variant="Variant.Outlined"
                      OnClick="@(() => SelectAction("skip"))">
                @TranslationService.GetTranslation("warehouse.skipProduct", "Salta")
            </MudButton>
        }
        
        <MudSpacer />

        <MudButton OnClick="Cancel" Color="Color.Default" Variant="Variant.Outlined">
            @TranslationService.GetTranslation("common.cancel", "Annulla")
        </MudButton>
        
        @if (_selectedProduct == null)
        {
            <MudButton StartIcon="@Icons.Material.Outlined.Add"
                      Color="Color.Primary"
                      Variant="Variant.Filled"
                      OnClick="@(() => SelectAction("create"))">
                @TranslationService.GetTranslation("warehouse.createNewProduct", "Crea Nuovo Prodotto")
            </MudButton>
        }
        else
        {
            <MudButton StartIcon="@Icons.Material.Outlined.Link"
                      Color="Color.Primary"
                      Variant="Variant.Filled"
                      OnClick="AssignBarcodeToProduct"
                      Disabled="@(!_isFormValid || _isLoading)">
                @TranslationService.GetTranslation("warehouse.assignAndContinue", "Assegna e Continua")
            </MudButton>
        }
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] 
    IMudDialogInstance MudDialog { get; set; } = null!;

    [Parameter]
    public string Barcode { get; set; } = string.Empty;

    [Parameter]
    public bool IsInventoryContext { get; set; } = false;

    [Parameter]
    public ProductDto? PreSelectedProduct { get; set; }

    private bool _isLoading = false;
    private bool _isFormValid = false;
    private MudForm? _form;
    private ProductDto? _selectedProduct;
    private CreateProductCodeDto _createCodeDto = new();
    private List<ProductDto> _allProducts = new();
    
    // Typed result class for assignment
    public class AssignResult
    {
        public string Action { get; set; } = "assigned";
        public ProductDto Product { get; set; } = default!;
        public bool AutoAdvanceToQuantity { get; set; } = true;
    }

    protected override async Task OnInitializedAsync()
    {
        _createCodeDto.Code = Barcode;
        _createCodeDto.CodeType = "Barcode";
        _createCodeDto.Status = ProductCodeStatus.Active;

        await LoadProducts();
        
        // If a product was pre-selected (e.g., after creation), set it
        if (PreSelectedProduct != null)
        {
            _selectedProduct = PreSelectedProduct;
        }
    }

    private async Task LoadProducts()
    {
        _isLoading = true;
        try
        {
            var result = await ProductService.GetProductsAsync(1, 100);
            if (result != null)
            {
                _allProducts = result.Items.ToList();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading products");
            Snackbar.Add(TranslationService.GetTranslation("products.loadError", "Errore nel caricamento prodotti"), Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }

    private Task<IEnumerable<ProductDto>> SearchProducts(string value, CancellationToken token)
    {
        if (string.IsNullOrWhiteSpace(value))
            return Task.FromResult(_allProducts.Take(10));

        return Task.FromResult(_allProducts
            .Where(p => p.Name.Contains(value, StringComparison.OrdinalIgnoreCase) ||
                       p.Code.Contains(value, StringComparison.OrdinalIgnoreCase) ||
                       (!string.IsNullOrEmpty(p.ShortDescription) && p.ShortDescription.Contains(value, StringComparison.OrdinalIgnoreCase)) ||
                       (!string.IsNullOrEmpty(p.Description) && p.Description.Contains(value, StringComparison.OrdinalIgnoreCase)))
            .Take(20)
            .ToList() as IEnumerable<ProductDto>);
    }

    private async Task AssignBarcodeToProduct()
    {
        if (!_isFormValid || _selectedProduct == null)
            return;

        _isLoading = true;
        try
        {
            _createCodeDto.ProductId = _selectedProduct.Id;
            var result = await ProductService.CreateProductCodeAsync(_createCodeDto);

            if (result != null)
            {
                Snackbar.Add(
                    TranslationService.GetTranslation("products.barcodeAssignedSuccess", "Codice a barre assegnato con successo a {0}", _selectedProduct.Name), 
                    Severity.Success
                );
                
                // Use typed result
                var assignResult = new AssignResult
                {
                    Action = "assigned",
                    Product = _selectedProduct,
                    AutoAdvanceToQuantity = true
                };
                
                MudDialog.Close(DialogResult.Ok(assignResult));
            }
            else
            {
                Snackbar.Add(TranslationService.GetTranslation("products.assignError", "Errore nell'assegnazione del codice"), Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error assigning barcode to product");
            Snackbar.Add(TranslationService.GetTranslation("products.assignError", "Errore nell'assegnazione del codice"), Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }

    private void SelectAction(string action)
    {
        MudDialog.Close(DialogResult.Ok(action));
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }
}
