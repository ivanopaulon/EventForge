@using MudBlazor
@using EventForge.DTOs.Tenants
@using EventForge.Client.Shared.Components
@using EventForge.Client.Constants
@inject ISuperAdminService SuperAdminService
@inject ISnackbar Snackbar
@inject ILogger<TenantDrawer> Logger
@inject ITranslationService TranslationService

<EntityDrawer @bind-IsOpen="@IsOpen"
              @bind-Mode="@Mode"
              EntityName="@TranslationService.GetTranslation("field.tenant")"
              Model="@_model"
              OnSave="@HandleSave"
              OnCancel="@HandleCancel"
              OnClose="@HandleClose"
              CustomTitle="@_customTitle"
              AllowEdit="@AllowEdit"
              Width="700px">
    
    <FormContent>
        <MudGrid>
            <MudItem xs="12" md="6">
                <MudTextField @bind-Value="_model.Name"
                              Label="@($"{TranslationService.GetTranslation("drawer.field.nomeTenant")} *")"
                              Variant="Variant.Outlined"
                              Required="true"
                              RequiredError="@TranslationService.GetTranslation("drawer.error.nomeTenantObbligatorio")"
                              MaxLength="100"
                              ReadOnly="@(Mode == EntityDrawerMode.Edit)"
                              aria-describedby="name-help" />
                <MudText id="name-help" Typo="Typo.caption" Class="mud-input-helper-text">
                    @(Mode == EntityDrawerMode.Edit ? 
                        TranslationService.GetTranslation("drawer.helperText.nomeTenantEdit") : 
                        TranslationService.GetTranslation("drawer.helperText.nomeTenantCreate"))
                </MudText>
            </MudItem>
            
            <MudItem xs="12" md="6">
                <MudTextField @bind-Value="_model.DisplayName"
                              Label="@($"{TranslationService.GetTranslation("drawer.field.nomeVisualizzato")} *")"
                              Variant="Variant.Outlined"
                              Required="true"
                              RequiredError="@TranslationService.GetTranslation("drawer.error.nomeVisualizzatoObbligatorio")"
                              MaxLength="200"
                              aria-describedby="displayName-help" />
                <MudText id="displayName-help" Typo="Typo.caption" Class="mud-input-helper-text">
                    @TranslationService.GetTranslation("drawer.helperText.nomeVisualizzato")
                </MudText>
            </MudItem>
            
            <MudItem xs="12">
                <MudTextField @bind-Value="_model.Description"
                              Label="@TranslationService.GetTranslation("drawer.field.descrizione")"
                              Variant="Variant.Outlined"
                              Lines="3"
                              MaxLength="500"
                              aria-describedby="description-help" />
                <MudText id="description-help" Typo="Typo.caption" Class="mud-input-helper-text">
                    @TranslationService.GetTranslation("drawer.helperText.descrizione")
                </MudText>
            </MudItem>
            
            <MudItem xs="12" md="6">
                <MudTextField @bind-Value="_model.Domain"
                              Label="@TranslationService.GetTranslation("drawer.field.dominio")"
                              Variant="Variant.Outlined"
                              MaxLength="100"
                              aria-describedby="domain-help" />
                <MudText id="domain-help" Typo="Typo.caption" Class="mud-input-helper-text">
                    @TranslationService.GetTranslation("drawer.helperText.dominio")
                </MudText>
            </MudItem>
            
            <MudItem xs="12" md="6">
                <MudTextField @bind-Value="_model.ContactEmail"
                              Label="@($"{TranslationService.GetTranslation("drawer.field.emailContatto")} *")"
                              Variant="Variant.Outlined"
                              InputType="InputType.Email"
                              Required="true"
                              RequiredError="@TranslationService.GetTranslation("drawer.error.emailContattoObbligatoria")"
                              MaxLength="256"
                              aria-describedby="contactEmail-help" />
                <MudText id="contactEmail-help" Typo="Typo.caption" Class="mud-input-helper-text">
                    @TranslationService.GetTranslation("drawer.helperText.emailContatto")
                </MudText>
            </MudItem>
            
            <MudItem xs="12" md="6">
                <MudNumericField @bind-Value="_model.MaxUsers"
                                 Label="@($"{TranslationService.GetTranslation("drawer.field.massimoUtenti")} *")"
                                 Variant="Variant.Outlined"
                                 Min="1"
                                 Max="10000"
                                 Required="true"
                                 aria-describedby="maxUsers-help" />
                <MudText id="maxUsers-help" Typo="Typo.caption" Class="mud-input-helper-text">
                    @TranslationService.GetTranslation("drawer.helperText.massimoUtenti")
                </MudText>
            </MudItem>
            
            @if (Mode == EntityDrawerMode.Edit)
            {
                <MudItem xs="12" md="6">
                    <MudSwitch T="bool" 
                               @bind-Checked="_model.IsActive"
                               Label="@TranslationService.GetTranslation("drawer.field.tenantAttivo")"
                               Color="Color.Primary"
                               aria-describedby="active-help" />
                    <MudText id="active-help" Typo="Typo.caption" Class="mud-input-helper-text">
                        @TranslationService.GetTranslation("drawer.helperText.tenantAttivo")
                    </MudText>
                </MudItem>
            }
            
            @if (Mode == EntityDrawerMode.Edit && OriginalTenant != null)
            {
                <MudItem xs="12" md="6">
                    <MudTextField Value="@OriginalTenant.Id.ToString()"
                                  Label="@TranslationService.GetTranslation("drawer.field.idTenant")"
                                  Variant="Variant.Outlined"
                                  ReadOnly="true"
                                  aria-label="@TranslationService.GetTranslation("drawer.aria.identificativoUnico")" />
                </MudItem>
                
                <MudItem xs="12" md="6">
                    <MudTextField Value="@OriginalTenant.CreatedAt.ToString("dd/MM/yyyy HH:mm")"
                                  Label="@TranslationService.GetTranslation("drawer.field.dataCreazione")"
                                  Variant="Variant.Outlined"
                                  ReadOnly="true"
                                  aria-label="@TranslationService.GetTranslation("drawer.aria.dataOraCreazione")" />
                </MudItem>
                
                <MudItem xs="12" md="6">
                    <MudTextField Value="@_userCount.ToString()"
                                  Label="@TranslationService.GetTranslation("drawer.field.utentiAttuali")"
                                  Variant="Variant.Outlined"
                                  ReadOnly="true"
                                  aria-label="@TranslationService.GetTranslation("drawer.aria.numeroAttualeUtenti")" />
                </MudItem>
            }
        </MudGrid>
    </FormContent>
    
    <ViewContent>
        <MudGrid>
            <MudItem xs="12" md="6">
                <MudTextField Value="@(OriginalTenant?.Name ?? "")"
                              Label="@TranslationService.GetTranslation("drawer.field.nomeTenant")"
                              Variant="Variant.Outlined"
                              ReadOnly="true"
                              aria-label="@TranslationService.GetTranslation("drawer.field.nomeTenant")" />
            </MudItem>
            
            <MudItem xs="12" md="6">
                <MudTextField Value="@(OriginalTenant?.DisplayName ?? "")"
                              Label="@TranslationService.GetTranslation("drawer.field.nomeVisualizzato")"
                              Variant="Variant.Outlined"
                              ReadOnly="true"
                              aria-label="@TranslationService.GetTranslation("drawer.field.nomeVisualizzato")" />
            </MudItem>
            
            <MudItem xs="12">
                <MudTextField Value="@(OriginalTenant?.Description ?? TranslationService.GetTranslation("drawer.status.nessunaDescrizione"))"
                              Label="@TranslationService.GetTranslation("drawer.field.descrizione")"
                              Variant="Variant.Outlined"
                              Lines="3"
                              ReadOnly="true"
                              aria-label="@TranslationService.GetTranslation("drawer.field.descrizione")" />
            </MudItem>
            
            <MudItem xs="12" md="6">
                <MudTextField Value="@(OriginalTenant?.Domain ?? TranslationService.GetTranslation("drawer.status.nessunDominio"))"
                              Label="@TranslationService.GetTranslation("drawer.field.dominio")"
                              Variant="Variant.Outlined"
                              ReadOnly="true"
                              aria-label="@TranslationService.GetTranslation("drawer.field.dominio")" />
            </MudItem>
            
            <MudItem xs="12" md="6">
                <MudTextField Value="@(OriginalTenant?.ContactEmail ?? "")"
                              Label="@TranslationService.GetTranslation("drawer.field.emailContatto")"
                              Variant="Variant.Outlined"
                              ReadOnly="true"
                              aria-label="@TranslationService.GetTranslation("drawer.field.emailContatto")" />
            </MudItem>
            
            <MudItem xs="12" md="6">
                <MudTextField Value="@(OriginalTenant?.MaxUsers.ToString() ?? "")"
                              Label="@TranslationService.GetTranslation("drawer.field.massimoUtenti")"
                              Variant="Variant.Outlined"
                              ReadOnly="true"
                              aria-label="@TranslationService.GetTranslation("drawer.field.massimoUtenti")" />
            </MudItem>
            
            <MudItem xs="12" md="6">
                <MudChip T="string" 
                         Color="@(OriginalTenant?.IsActive == true ? Color.Success : Color.Error)" 
                         Size="Size.Medium"
                         aria-label="@TranslationService.GetTranslation("drawer.aria.statoEntita", TranslationService.GetTranslation("common.tenant"), (OriginalTenant?.IsActive == true ? TranslationService.GetTranslation("drawer.status.attivo") : TranslationService.GetTranslation("drawer.status.inattivo")))">
                    @(OriginalTenant?.IsActive == true ? TranslationService.GetTranslation("drawer.status.attivo") : TranslationService.GetTranslation("drawer.status.inattivo"))
                </MudChip>
            </MudItem>
            
            @if (OriginalTenant != null)
            {
                <MudItem xs="12" md="6">
                    <MudTextField Value="@OriginalTenant.Id.ToString()"
                                  Label="@TranslationService.GetTranslation("drawer.field.idTenant")"
                                  Variant="Variant.Outlined"
                                  ReadOnly="true"
                                  aria-label="@TranslationService.GetTranslation("drawer.aria.identificativoUnico")" />
                </MudItem>
                
                <MudItem xs="12" md="6">
                    <MudTextField Value="@OriginalTenant.CreatedAt.ToString("dd/MM/yyyy HH:mm")"
                                  Label="@TranslationService.GetTranslation("drawer.field.dataCreazione")"
                                  Variant="Variant.Outlined"
                                  ReadOnly="true"
                                  aria-label="@TranslationService.GetTranslation("drawer.aria.dataOraCreazione")" />
                </MudItem>
                
                <MudItem xs="12" md="6">
                    <MudTextField Value="@_userCount.ToString()"
                                  Label="@TranslationService.GetTranslation("drawer.field.utentiAttuali")"
                                  Variant="Variant.Outlined"
                                  ReadOnly="true"
                                  aria-label="@TranslationService.GetTranslation("drawer.aria.numeroAttualeUtenti")" />
                </MudItem>
                
                <MudItem xs="12" md="6">
                    <div class="d-flex align-center">
                        <MudProgressLinear Value="@_userUsagePercentage" 
                                           Color="@GetUsageColor()" 
                                           Size="Size.Medium" 
                                           Rounded="true"
                                           aria-label="@TranslationService.GetTranslation("drawer.aria.utilizzoUtenti", _userUsagePercentage.ToString("F1"))" />
                        <MudText Class="ml-3" Typo="Typo.caption">@($"{_userUsagePercentage:F1}%")</MudText>
                    </div>
                    <MudText Typo="Typo.caption" Class="mud-input-helper-text">
                        @TranslationService.GetTranslation("drawer.helperText.utilizzoUtenti")
                    </MudText>
                </MudItem>
                
                @if (OriginalTenant.UpdatedAt != OriginalTenant.CreatedAt)
                {
                    <MudItem xs="12">
                        <MudTextField Value="@OriginalTenant.UpdatedAt.ToString("dd/MM/yyyy HH:mm")"
                                      Label="@TranslationService.GetTranslation("drawer.field.ultimaModifica")"
                                      Variant="Variant.Outlined"
                                      ReadOnly="true"
                                      aria-label="@TranslationService.GetTranslation("drawer.aria.dataOraUltimaModifica")" />
                    </MudItem>
                }
            }
        </MudGrid>
    </ViewContent>
    
</EntityDrawer>

@code {
    private TenantResponseDto _model = new() { MaxUsers = 100 };
    private string? _customTitle;
    private int _userCount = 0;
    private double _userUsagePercentage = 0;

    /// <summary>
    /// Whether the drawer is open.
    /// </summary>
    [Parameter] public bool IsOpen { get; set; }
    
    /// <summary>
    /// Event callback for when IsOpen changes.
    /// </summary>
    [Parameter] public EventCallback<bool> IsOpenChanged { get; set; }
    
    /// <summary>
    /// The current mode of the drawer.
    /// </summary>
    [Parameter] public EntityDrawerMode Mode { get; set; } = EntityDrawerMode.Create;
    
    /// <summary>
    /// Event callback for when Mode changes.
    /// </summary>
    [Parameter] public EventCallback<EntityDrawerMode> ModeChanged { get; set; }
    
    /// <summary>
    /// The tenant being edited/viewed (for Edit/View modes).
    /// </summary>
    [Parameter] public TenantResponseDto? OriginalTenant { get; set; }
    
    /// <summary>
    /// Whether editing is allowed.
    /// </summary>
    [Parameter] public bool AllowEdit { get; set; } = true;
    
    /// <summary>
    /// Event callback when a tenant is created.
    /// </summary>
    [Parameter] public EventCallback<TenantResponseDto> OnTenantCreated { get; set; }
    
    /// <summary>
    /// Event callback when a tenant is updated.
    /// </summary>
    [Parameter] public EventCallback<TenantResponseDto> OnTenantUpdated { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (Mode == EntityDrawerMode.Edit && OriginalTenant != null)
        {
            // Initialize model for editing
            _model = new TenantResponseDto
            {
                Id = OriginalTenant.Id,
                Name = OriginalTenant.Name,
                DisplayName = OriginalTenant.DisplayName,
                Description = OriginalTenant.Description,
                Domain = OriginalTenant.Domain,
                ContactEmail = OriginalTenant.ContactEmail,
                MaxUsers = OriginalTenant.MaxUsers,
                IsActive = OriginalTenant.IsActive,
                CreatedAt = OriginalTenant.CreatedAt,
                UpdatedAt = OriginalTenant.UpdatedAt
            };
            
            _customTitle = TranslationService.GetTranslation("drawer.title.modificaTenant", OriginalTenant.DisplayName);
            
            // Load user count for this tenant
            await LoadUserCount();
        }
        else if (Mode == EntityDrawerMode.View && OriginalTenant != null)
        {
            _customTitle = TranslationService.GetTranslation("drawer.title.visualizzaTenant", OriginalTenant.DisplayName);
            
            // Load user count for this tenant
            await LoadUserCount();
        }
        else if (Mode == EntityDrawerMode.Create)
        {
            // Reset for create mode
            _model = new TenantResponseDto { MaxUsers = 100 };
            _customTitle = null;
            _userCount = 0;
            _userUsagePercentage = 0;
        }
    }

    private async Task LoadUserCount()
    {
        if (OriginalTenant == null) return;
        
        try
        {
            // Try to get detailed tenant information first, fallback to user count if not available
            var tenantDetails = await SuperAdminService.GetTenantDetailsAsync(OriginalTenant.Id);
            if (tenantDetails != null)
            {
                _userCount = tenantDetails.CurrentUsers;
                _userUsagePercentage = tenantDetails.MaxUsers > 0 
                    ? (tenantDetails.CurrentUsers / (double)tenantDetails.MaxUsers) * 100 
                    : 0;
            }
            else
            {
                // Fallback to original method
                var users = await SuperAdminService.GetUsersAsync(OriginalTenant.Id);
                _userCount = users.Count();
                _userUsagePercentage = OriginalTenant.MaxUsers > 0 
                    ? (_userCount / (double)OriginalTenant.MaxUsers) * 100 
                    : 0;
            }
        }
        catch (Exception ex)
        {
            Logger.LogWarning(ex, "Failed to load user count for tenant {TenantId}", OriginalTenant.Id);
            _userCount = 0;
            _userUsagePercentage = 0;
        }
    }

    private async Task HandleSave()
    {
        try
        {
            if (Mode == EntityDrawerMode.Create)
            {
                var createDto = new CreateTenantDto
                {
                    Name = _model.Name,
                    DisplayName = _model.DisplayName,
                    Description = _model.Description,
                    Domain = _model.Domain,
                    ContactEmail = _model.ContactEmail,
                    MaxUsers = _model.MaxUsers
                };
                
                var newTenant = await SuperAdminService.CreateTenantAsync(createDto);
                Snackbar.Add(TranslationService.GetTranslation("messages.createSuccessful", "Creazione completata con successo"), Severity.Success);
                
                if (OnTenantCreated.HasDelegate)
                {
                    await OnTenantCreated.InvokeAsync(newTenant);
                }
            }
            else if (Mode == EntityDrawerMode.Edit && OriginalTenant != null)
            {
                var updateDto = new UpdateTenantDto
                {
                    DisplayName = _model.DisplayName,
                    Description = _model.Description,
                    Domain = _model.Domain,
                    ContactEmail = _model.ContactEmail,
                    MaxUsers = _model.MaxUsers,
                    IsEnabled = _model.IsActive, // Map IsActive to IsEnabled for the update
                    SubscriptionExpiresAt = null // TODO: Add UI field for subscription expiration if needed
                };
                
                var updatedTenant = await SuperAdminService.UpdateTenantAsync(OriginalTenant.Id, updateDto);
                Snackbar.Add(TranslationService.GetTranslation("messages.updateSuccessful", "Aggiornamento completato con successo"), Severity.Success);
                
                if (OnTenantUpdated.HasDelegate)
                {
                    await OnTenantUpdated.InvokeAsync(updatedTenant);
                }
            }
            
            await HandleClose();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to save tenant");
            var message = Mode == EntityDrawerMode.Create ? 
                TranslationService.GetTranslation("messages.createFailed", "Errore durante la creazione") : 
                TranslationService.GetTranslation("messages.updateFailed", "Errore durante l'aggiornamento");
            Snackbar.Add($"{message}: {ex.Message}", Severity.Error);
        }
    }

    private async Task HandleCancel()
    {
        await HandleClose();
    }

    private async Task HandleClose()
    {
        IsOpen = false;
        await IsOpenChanged.InvokeAsync(IsOpen);
        
        // Reset state
        _model = new TenantResponseDto { MaxUsers = 100 };
        _customTitle = null;
        _userCount = 0;
        _userUsagePercentage = 0;
    }

    private Color GetUsageColor()
    {
        if (_userUsagePercentage < 70)
            return Color.Success;
        else if (_userUsagePercentage < 90)
            return Color.Warning;
        else
            return Color.Error;
    }
}