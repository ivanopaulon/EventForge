@using MudBlazor
@using EventForge.DTOs.Business
@using EventForge.DTOs.Common
@using EventForge.Client.Shared.Components
@inject IBusinessPartyService BusinessPartyService
@inject IEntityManagementService EntityManagementService
@inject ISnackbar Snackbar
@inject ILogger<BusinessPartyDrawer> Logger
@inject ITranslationService TranslationService
@inject IDialogService DialogService

<EntityDrawer @bind-IsOpen="@IsOpen"
              @bind-Mode="@Mode"
              EntityName="@TranslationService.GetTranslation("field.supplier", "Fornitore")"
              Model="@_model"
              OnSave="@HandleSave"
              OnCancel="@HandleCancel"
              OnClose="@HandleClose"
              CustomTitle="@_customTitle"
              AllowEdit="@AllowEdit"
              Width="50%">
    
    <FormContent>
        <MudGrid>
            <MudItem xs="12" md="6">
                <MudSelect @bind-Value="_model.PartyType"
                           Label="@($"{TranslationService.GetTranslation("field.partyType", "Tipo")} *")"
                           Variant="Variant.Outlined"
                           Required="true"
                           aria-describedby="partyType-help">
                    <MudSelectItem Value="@BusinessPartyType.Cliente">@TranslationService.GetTranslation("partyType.cliente", "Cliente")</MudSelectItem>
                    <MudSelectItem Value="@BusinessPartyType.Supplier">@TranslationService.GetTranslation("partyType.supplier", "Fornitore")</MudSelectItem>
                    <MudSelectItem Value="@BusinessPartyType.Both">@TranslationService.GetTranslation("partyType.both", "Cliente/Fornitore")</MudSelectItem>
                </MudSelect>
                <MudText id="partyType-help" Typo="Typo.caption" Class="mud-input-helper-text">
                    @TranslationService.GetTranslation("drawer.helperText.partyType", "Seleziona il tipo di business party")
                </MudText>
            </MudItem>
            
            <MudItem xs="12" md="6">
                <MudTextField @bind-Value="_model.Name"
                              Label="@($"{TranslationService.GetTranslation("field.name", "Nome")} *")"
                              Variant="Variant.Outlined"
                              Required="true"
                              RequiredError="@TranslationService.GetTranslation("validation.nameRequired", "Il nome è obbligatorio")"
                              MaxLength="200"
                              Immediate="true"
                              aria-describedby="name-help" />
                <MudText id="name-help" Typo="Typo.caption" Class="mud-input-helper-text">
                    @TranslationService.GetTranslation("drawer.helperText.name", "Ragione sociale o nome completo")
                </MudText>
            </MudItem>
            
            <MudItem xs="12" md="6">
                <MudTextField @bind-Value="_model.TaxCode"
                              Label="@TranslationService.GetTranslation("field.taxCode", "Codice Fiscale")"
                              Variant="Variant.Outlined"
                              MaxLength="20"
                              aria-describedby="taxCode-help" />
                <MudText id="taxCode-help" Typo="Typo.caption" Class="mud-input-helper-text">
                    @TranslationService.GetTranslation("drawer.helperText.taxCode", "Codice fiscale")
                </MudText>
            </MudItem>
            
            <MudItem xs="12" md="6">
                <MudTextField @bind-Value="_model.VatNumber"
                              Label="@TranslationService.GetTranslation("field.vatNumber", "Partita IVA")"
                              Variant="Variant.Outlined"
                              MaxLength="20"
                              aria-describedby="vatNumber-help" />
                <MudText id="vatNumber-help" Typo="Typo.caption" Class="mud-input-helper-text">
                    @TranslationService.GetTranslation("drawer.helperText.vatNumber", "Partita IVA")
                </MudText>
            </MudItem>
            
            <MudItem xs="12" md="6">
                <MudTextField @bind-Value="_model.SdiCode"
                              Label="@TranslationService.GetTranslation("field.sdiCode", "Codice SDI")"
                              Variant="Variant.Outlined"
                              MaxLength="10"
                              aria-describedby="sdiCode-help" />
                <MudText id="sdiCode-help" Typo="Typo.caption" Class="mud-input-helper-text">
                    @TranslationService.GetTranslation("drawer.helperText.sdiCode", "Codice destinatario SDI per fatturazione elettronica")
                </MudText>
            </MudItem>
            
            <MudItem xs="12" md="6">
                <MudTextField @bind-Value="_model.Pec"
                              Label="@TranslationService.GetTranslation("field.pec", "PEC")"
                              Variant="Variant.Outlined"
                              MaxLength="100"
                              aria-describedby="pec-help" />
                <MudText id="pec-help" Typo="Typo.caption" Class="mud-input-helper-text">
                    @TranslationService.GetTranslation("drawer.helperText.pec", "Posta Elettronica Certificata")
                </MudText>
            </MudItem>
            
            <MudItem xs="12">
                <MudTextField @bind-Value="_model.Notes"
                              Label="@TranslationService.GetTranslation("field.notes", "Note")"
                              Variant="Variant.Outlined"
                              Lines="3"
                              MaxLength="500"
                              aria-describedby="notes-help" />
                <MudText id="notes-help" Typo="Typo.caption" Class="mud-input-helper-text">
                    @TranslationService.GetTranslation("drawer.helperText.notes", "Note aggiuntive")
                </MudText>
            </MudItem>
            
            @if (Mode == EntityDrawerMode.Edit && OriginalBusinessParty != null)
            {
                <MudItem xs="12" md="6">
                    <MudTextField Value="@OriginalBusinessParty.Id.ToString()"
                                  Label="@TranslationService.GetTranslation("field.id", "ID")"
                                  Variant="Variant.Outlined"
                                  ReadOnly="true"
                                  aria-label="@TranslationService.GetTranslation("drawer.aria.id", "Identificativo unico")" />
                </MudItem>
                
                <MudItem xs="12" md="6">
                    <MudTextField Value="@OriginalBusinessParty.CreatedAt.ToString("dd/MM/yyyy HH:mm")"
                                  Label="@TranslationService.GetTranslation("field.createdAt", "Data Creazione")"
                                  Variant="Variant.Outlined"
                                  ReadOnly="true"
                                  aria-label="@TranslationService.GetTranslation("drawer.aria.createdAt", "Data e ora di creazione")" />
                </MudItem>
                
                @* Related Entities Management in Edit Mode *@
                @if (_loadingRelatedEntities)
                {
                    <MudItem xs="12" Class="mt-4">
                        <MudProgressLinear Color="Color.Primary" Indeterminate="true" />
                        <MudText Typo="Typo.caption" Align="Align.Center" Class="mt-2">
                            @TranslationService.GetTranslation("common.loading", "Caricamento...")
                        </MudText>
                    </MudItem>
                }
                else
                {
                    @* Addresses Section with Actions *@
                    <MudItem xs="12" Class="mt-4">
                        <MudExpansionPanels>
                            <MudExpansionPanel>
                                <TitleContent>
                                    <div class="d-flex justify-space-between align-center" style="width: 100%;">
                                        <MudText>@($"{TranslationService.GetTranslation("field.addressCount", "Indirizzi")} ({_addresses?.Count() ?? 0})")</MudText>
                                        <MudIconButton Icon="@Icons.Material.Filled.Add" 
                                                      Color="Color.Primary" 
                                                      Size="Size.Small"
                                                      OnClick="@(() => OpenAddAddressDialog())"
                                                      aria-label="@TranslationService.GetTranslation("button.addAddress", "Aggiungi indirizzo")" />
                                    </div>
                                </TitleContent>
                                <ChildContent>
                                    @if (_addresses?.Any() == true)
                                    {
                                        <MudTable Items="_addresses" Hover="true" Dense="true" Striped="true">
                                            <HeaderContent>
                                                <MudTh>@TranslationService.GetTranslation("field.addressType", "Tipo")</MudTh>
                                                <MudTh>@TranslationService.GetTranslation("field.street", "Via")</MudTh>
                                                <MudTh>@TranslationService.GetTranslation("field.city", "Città")</MudTh>
                                                <MudTh>@TranslationService.GetTranslation("field.zipCode", "CAP")</MudTh>
                                                <MudTh>@TranslationService.GetTranslation("common.actions", "Azioni")</MudTh>
                                            </HeaderContent>
                                            <RowTemplate>
                                                <MudTd DataLabel="@TranslationService.GetTranslation("field.addressType", "Tipo")">@context.AddressType</MudTd>
                                                <MudTd DataLabel="@TranslationService.GetTranslation("field.street", "Via")">@context.Street</MudTd>
                                                <MudTd DataLabel="@TranslationService.GetTranslation("field.city", "Città")">@context.City</MudTd>
                                                <MudTd DataLabel="@TranslationService.GetTranslation("field.zipCode", "CAP")">@context.ZipCode</MudTd>
                                                <MudTd>
                                                    <MudIconButton Icon="@Icons.Material.Filled.Edit" 
                                                                  Color="Color.Primary" 
                                                                  Size="Size.Small"
                                                                  OnClick="@(() => OpenEditAddressDialog(context))"
                                                                  title="@TranslationService.GetTranslation("common.edit", "Modifica")" />
                                                    <MudIconButton Icon="@Icons.Material.Filled.Delete" 
                                                                  Color="Color.Error" 
                                                                  Size="Size.Small"
                                                                  OnClick="@(() => DeleteAddress(context.Id))"
                                                                  title="@TranslationService.GetTranslation("common.delete", "Elimina")" />
                                                </MudTd>
                                            </RowTemplate>
                                        </MudTable>
                                    }
                                    else
                                    {
                                        <MudText Typo="Typo.body2" Class="pa-4">@TranslationService.GetTranslation("messages.noAddresses", "Nessun indirizzo disponibile")</MudText>
                                    }
                                </ChildContent>
                            </MudExpansionPanel>
                        </MudExpansionPanels>
                    </MudItem>
                    
                    @* Contacts Section with Actions *@
                    <MudItem xs="12" Class="mt-2">
                        <MudExpansionPanels>
                            <MudExpansionPanel>
                                <TitleContent>
                                    <div class="d-flex justify-space-between align-center" style="width: 100%;">
                                        <MudText>@($"{TranslationService.GetTranslation("field.contactCount", "Contatti")} ({_contacts?.Count() ?? 0})")</MudText>
                                        <MudIconButton Icon="@Icons.Material.Filled.Add" 
                                                      Color="Color.Primary" 
                                                      Size="Size.Small"
                                                      OnClick="@(() => OpenAddContactDialog())"
                                                      aria-label="@TranslationService.GetTranslation("button.addContact", "Aggiungi contatto")" />
                                    </div>
                                </TitleContent>
                                <ChildContent>
                                    @if (_contacts?.Any() == true)
                                    {
                                        <MudTable Items="_contacts" Hover="true" Dense="true" Striped="true">
                                            <HeaderContent>
                                                <MudTh>@TranslationService.GetTranslation("field.contactType", "Tipo")</MudTh>
                                                <MudTh>@TranslationService.GetTranslation("field.value", "Valore")</MudTh>
                                                <MudTh>@TranslationService.GetTranslation("field.purpose", "Scopo")</MudTh>
                                                <MudTh>@TranslationService.GetTranslation("field.isPrimary", "Primario")</MudTh>
                                                <MudTh>@TranslationService.GetTranslation("common.actions", "Azioni")</MudTh>
                                            </HeaderContent>
                                            <RowTemplate>
                                                <MudTd DataLabel="@TranslationService.GetTranslation("field.contactType", "Tipo")">@context.ContactType</MudTd>
                                                <MudTd DataLabel="@TranslationService.GetTranslation("field.value", "Valore")">@context.Value</MudTd>
                                                <MudTd DataLabel="@TranslationService.GetTranslation("field.purpose", "Scopo")">@context.Purpose</MudTd>
                                                <MudTd DataLabel="@TranslationService.GetTranslation("field.isPrimary", "Primario")">
                                                    @if (context.IsPrimary)
                                                    {
                                                        <MudIcon Icon="@Icons.Material.Filled.Check" Color="Color.Success" Size="Size.Small" />
                                                    }
                                                </MudTd>
                                                <MudTd>
                                                    <MudIconButton Icon="@Icons.Material.Filled.Edit" 
                                                                  Color="Color.Primary" 
                                                                  Size="Size.Small"
                                                                  OnClick="@(() => OpenEditContactDialog(context))"
                                                                  title="@TranslationService.GetTranslation("common.edit", "Modifica")" />
                                                    <MudIconButton Icon="@Icons.Material.Filled.Delete" 
                                                                  Color="Color.Error" 
                                                                  Size="Size.Small"
                                                                  OnClick="@(() => DeleteContact(context.Id))"
                                                                  title="@TranslationService.GetTranslation("common.delete", "Elimina")" />
                                                </MudTd>
                                            </RowTemplate>
                                        </MudTable>
                                    }
                                    else
                                    {
                                        <MudText Typo="Typo.body2" Class="pa-4">@TranslationService.GetTranslation("messages.noContacts", "Nessun contatto disponibile")</MudText>
                                    }
                                </ChildContent>
                            </MudExpansionPanel>
                        </MudExpansionPanels>
                    </MudItem>
                    
                    @* References Section with Actions *@
                    <MudItem xs="12" Class="mt-2">
                        <MudExpansionPanels>
                            <MudExpansionPanel>
                                <TitleContent>
                                    <div class="d-flex justify-space-between align-center" style="width: 100%;">
                                        <MudText>@($"{TranslationService.GetTranslation("field.referenceCount", "Referenti")} ({_references?.Count() ?? 0})")</MudText>
                                        <MudIconButton Icon="@Icons.Material.Filled.Add" 
                                                      Color="Color.Primary" 
                                                      Size="Size.Small"
                                                      OnClick="@(() => OpenAddReferenceDialog())"
                                                      aria-label="@TranslationService.GetTranslation("button.addReference", "Aggiungi referente")" />
                                    </div>
                                </TitleContent>
                                <ChildContent>
                                    @if (_references?.Any() == true)
                                    {
                                        <MudTable Items="_references" Hover="true" Dense="true" Striped="true">
                                            <HeaderContent>
                                                <MudTh>@TranslationService.GetTranslation("field.firstName", "Nome")</MudTh>
                                                <MudTh>@TranslationService.GetTranslation("field.lastName", "Cognome")</MudTh>
                                                <MudTh>@TranslationService.GetTranslation("field.department", "Dipartimento")</MudTh>
                                                <MudTh>@TranslationService.GetTranslation("common.actions", "Azioni")</MudTh>
                                            </HeaderContent>
                                            <RowTemplate>
                                                <MudTd DataLabel="@TranslationService.GetTranslation("field.firstName", "Nome")">@context.FirstName</MudTd>
                                                <MudTd DataLabel="@TranslationService.GetTranslation("field.lastName", "Cognome")">@context.LastName</MudTd>
                                                <MudTd DataLabel="@TranslationService.GetTranslation("field.department", "Dipartimento")">@context.Department</MudTd>
                                                <MudTd>
                                                    <MudIconButton Icon="@Icons.Material.Filled.Edit" 
                                                                  Color="Color.Primary" 
                                                                  Size="Size.Small"
                                                                  OnClick="@(() => OpenEditReferenceDialog(context))"
                                                                  title="@TranslationService.GetTranslation("common.edit", "Modifica")" />
                                                    <MudIconButton Icon="@Icons.Material.Filled.Delete" 
                                                                  Color="Color.Error" 
                                                                  Size="Size.Small"
                                                                  OnClick="@(() => DeleteReference(context.Id))"
                                                                  title="@TranslationService.GetTranslation("common.delete", "Elimina")" />
                                                </MudTd>
                                            </RowTemplate>
                                        </MudTable>
                                    }
                                    else
                                    {
                                        <MudText Typo="Typo.body2" Class="pa-4">@TranslationService.GetTranslation("messages.noReferences", "Nessun referente disponibile")</MudText>
                                    }
                                </ChildContent>
                            </MudExpansionPanel>
                        </MudExpansionPanels>
                    </MudItem>
                }
            }
        </MudGrid>
    </FormContent>
    
    <ViewContent>
        <MudGrid>
            <MudItem xs="12" md="6">
                <MudTextField Value="@GetPartyTypeText(OriginalBusinessParty?.PartyType ?? BusinessPartyType.Cliente)"
                              Label="@TranslationService.GetTranslation("field.partyType", "Tipo")"
                              Variant="Variant.Outlined"
                              ReadOnly="true"
                              aria-label="@TranslationService.GetTranslation("field.partyType", "Tipo")" />
            </MudItem>
            
            <MudItem xs="12" md="6">
                <MudTextField Value="@(OriginalBusinessParty?.Name ?? "")"
                              Label="@TranslationService.GetTranslation("field.name", "Nome")"
                              Variant="Variant.Outlined"
                              ReadOnly="true"
                              aria-label="@TranslationService.GetTranslation("field.name", "Nome")" />
            </MudItem>
            
            @if (!string.IsNullOrWhiteSpace(OriginalBusinessParty?.TaxCode))
            {
                <MudItem xs="12" md="6">
                    <MudTextField Value="@OriginalBusinessParty.TaxCode"
                                  Label="@TranslationService.GetTranslation("field.taxCode", "Codice Fiscale")"
                                  Variant="Variant.Outlined"
                                  ReadOnly="true"
                                  aria-label="@TranslationService.GetTranslation("field.taxCode", "Codice Fiscale")" />
                </MudItem>
            }
            
            @if (!string.IsNullOrWhiteSpace(OriginalBusinessParty?.VatNumber))
            {
                <MudItem xs="12" md="6">
                    <MudTextField Value="@OriginalBusinessParty.VatNumber"
                                  Label="@TranslationService.GetTranslation("field.vatNumber", "Partita IVA")"
                                  Variant="Variant.Outlined"
                                  ReadOnly="true"
                                  aria-label="@TranslationService.GetTranslation("field.vatNumber", "Partita IVA")" />
                </MudItem>
            }
            
            @if (!string.IsNullOrWhiteSpace(OriginalBusinessParty?.SdiCode))
            {
                <MudItem xs="12" md="6">
                    <MudTextField Value="@OriginalBusinessParty.SdiCode"
                                  Label="@TranslationService.GetTranslation("field.sdiCode", "Codice SDI")"
                                  Variant="Variant.Outlined"
                                  ReadOnly="true"
                                  aria-label="@TranslationService.GetTranslation("field.sdiCode", "Codice SDI")" />
                </MudItem>
            }
            
            @if (!string.IsNullOrWhiteSpace(OriginalBusinessParty?.Pec))
            {
                <MudItem xs="12" md="6">
                    <MudTextField Value="@OriginalBusinessParty.Pec"
                                  Label="@TranslationService.GetTranslation("field.pec", "PEC")"
                                  Variant="Variant.Outlined"
                                  ReadOnly="true"
                                  aria-label="@TranslationService.GetTranslation("field.pec", "PEC")" />
                </MudItem>
            }
            
            @if (!string.IsNullOrWhiteSpace(OriginalBusinessParty?.Notes))
            {
                <MudItem xs="12">
                    <MudTextField Value="@OriginalBusinessParty.Notes"
                                  Label="@TranslationService.GetTranslation("field.notes", "Note")"
                                  Variant="Variant.Outlined"
                                  Lines="3"
                                  ReadOnly="true"
                                  aria-label="@TranslationService.GetTranslation("field.notes", "Note")" />
                </MudItem>
            }
            
            @if (OriginalBusinessParty != null)
            {
                <MudItem xs="12" md="4">
                    <MudTextField Value="@OriginalBusinessParty.AddressCount.ToString()"
                                  Label="@TranslationService.GetTranslation("field.addressCount", "Indirizzi")"
                                  Variant="Variant.Outlined"
                                  ReadOnly="true"
                                  aria-label="@TranslationService.GetTranslation("field.addressCount", "Numero di indirizzi")" />
                </MudItem>
                
                <MudItem xs="12" md="4">
                    <MudTextField Value="@OriginalBusinessParty.ContactCount.ToString()"
                                  Label="@TranslationService.GetTranslation("field.contactCount", "Contatti")"
                                  Variant="Variant.Outlined"
                                  ReadOnly="true"
                                  aria-label="@TranslationService.GetTranslation("field.contactCount", "Numero di contatti")" />
                </MudItem>
                
                <MudItem xs="12" md="4">
                    <MudTextField Value="@OriginalBusinessParty.ReferenceCount.ToString()"
                                  Label="@TranslationService.GetTranslation("field.referenceCount", "Referenti")"
                                  Variant="Variant.Outlined"
                                  ReadOnly="true"
                                  aria-label="@TranslationService.GetTranslation("field.referenceCount", "Numero di referenti")" />
                </MudItem>
                
                <MudItem xs="12" md="6">
                    <MudTextField Value="@OriginalBusinessParty.Id.ToString()"
                                  Label="@TranslationService.GetTranslation("field.id", "ID")"
                                  Variant="Variant.Outlined"
                                  ReadOnly="true"
                                  aria-label="@TranslationService.GetTranslation("drawer.aria.id", "Identificativo unico")" />
                </MudItem>
                
                <MudItem xs="12" md="6">
                    <MudTextField Value="@OriginalBusinessParty.CreatedAt.ToString("dd/MM/yyyy HH:mm")"
                                  Label="@TranslationService.GetTranslation("field.createdAt", "Data Creazione")"
                                  Variant="Variant.Outlined"
                                  ReadOnly="true"
                                  aria-label="@TranslationService.GetTranslation("drawer.aria.createdAt", "Data e ora di creazione")" />
                </MudItem>
                
                @if (OriginalBusinessParty.ModifiedAt != null && OriginalBusinessParty.ModifiedAt != OriginalBusinessParty.CreatedAt)
                {
                    <MudItem xs="12" md="6">
                        <MudTextField Value="@OriginalBusinessParty.ModifiedAt?.ToString("dd/MM/yyyy HH:mm")"
                                      Label="@TranslationService.GetTranslation("field.modifiedAt", "Ultima Modifica")"
                                      Variant="Variant.Outlined"
                                      ReadOnly="true"
                                      aria-label="@TranslationService.GetTranslation("drawer.aria.modifiedAt", "Data e ora ultima modifica")" />
                    </MudItem>
                }
                
                @* Related Entities Section *@
                @if (_loadingRelatedEntities)
                {
                    <MudItem xs="12" Class="mt-4">
                        <MudProgressLinear Color="Color.Primary" Indeterminate="true" />
                        <MudText Typo="Typo.caption" Align="Align.Center" Class="mt-2">
                            @TranslationService.GetTranslation("common.loading", "Caricamento...")
                        </MudText>
                    </MudItem>
                }
                else
                {
                    @* Addresses Section *@
                    @if (_addresses?.Any() == true)
                    {
                        <MudItem xs="12" Class="mt-4">
                            <MudExpansionPanels>
                                <MudExpansionPanel Text="@($"{TranslationService.GetTranslation("field.addressCount", "Indirizzi")} ({_addresses.Count()})")" Expanded="false">
                                    <MudTable Items="_addresses" Hover="true" Dense="true" Striped="true">
                                        <HeaderContent>
                                            <MudTh>@TranslationService.GetTranslation("field.addressType", "Tipo")</MudTh>
                                            <MudTh>@TranslationService.GetTranslation("field.street", "Via")</MudTh>
                                            <MudTh>@TranslationService.GetTranslation("field.city", "Città")</MudTh>
                                            <MudTh>@TranslationService.GetTranslation("field.zipCode", "CAP")</MudTh>
                                            <MudTh>@TranslationService.GetTranslation("field.province", "Provincia")</MudTh>
                                            <MudTh>@TranslationService.GetTranslation("field.country", "Paese")</MudTh>
                                        </HeaderContent>
                                        <RowTemplate>
                                            <MudTd DataLabel="@TranslationService.GetTranslation("field.addressType", "Tipo")">@context.AddressType</MudTd>
                                            <MudTd DataLabel="@TranslationService.GetTranslation("field.street", "Via")">@context.Street</MudTd>
                                            <MudTd DataLabel="@TranslationService.GetTranslation("field.city", "Città")">@context.City</MudTd>
                                            <MudTd DataLabel="@TranslationService.GetTranslation("field.zipCode", "CAP")">@context.ZipCode</MudTd>
                                            <MudTd DataLabel="@TranslationService.GetTranslation("field.province", "Provincia")">@context.Province</MudTd>
                                            <MudTd DataLabel="@TranslationService.GetTranslation("field.country", "Paese")">@context.Country</MudTd>
                                        </RowTemplate>
                                    </MudTable>
                                </MudExpansionPanel>
                            </MudExpansionPanels>
                        </MudItem>
                    }
                    
                    @* Contacts Section *@
                    @if (_contacts?.Any() == true)
                    {
                        <MudItem xs="12" Class="mt-2">
                            <MudExpansionPanels>
                                <MudExpansionPanel Text="@($"{TranslationService.GetTranslation("field.contactCount", "Contatti")} ({_contacts.Count()})")" Expanded="false">
                                    <MudTable Items="_contacts" Hover="true" Dense="true" Striped="true">
                                        <HeaderContent>
                                            <MudTh>@TranslationService.GetTranslation("field.contactType", "Tipo")</MudTh>
                                            <MudTh>@TranslationService.GetTranslation("field.value", "Valore")</MudTh>
                                            <MudTh>@TranslationService.GetTranslation("field.purpose", "Scopo")</MudTh>
                                            <MudTh>@TranslationService.GetTranslation("field.isPrimary", "Primario")</MudTh>
                                        </HeaderContent>
                                        <RowTemplate>
                                            <MudTd DataLabel="@TranslationService.GetTranslation("field.contactType", "Tipo")">@context.ContactType</MudTd>
                                            <MudTd DataLabel="@TranslationService.GetTranslation("field.value", "Valore")">@context.Value</MudTd>
                                            <MudTd DataLabel="@TranslationService.GetTranslation("field.purpose", "Scopo")">@context.Purpose</MudTd>
                                            <MudTd DataLabel="@TranslationService.GetTranslation("field.isPrimary", "Primario")">
                                                @if (context.IsPrimary)
                                                {
                                                    <MudIcon Icon="@Icons.Material.Filled.Check" Color="Color.Success" Size="Size.Small" />
                                                }
                                            </MudTd>
                                        </RowTemplate>
                                    </MudTable>
                                </MudExpansionPanel>
                            </MudExpansionPanels>
                        </MudItem>
                    }
                    
                    @* References Section *@
                    @if (_references?.Any() == true)
                    {
                        <MudItem xs="12" Class="mt-2">
                            <MudExpansionPanels>
                                <MudExpansionPanel Text="@($"{TranslationService.GetTranslation("field.referenceCount", "Referenti")} ({_references.Count()})")" Expanded="false">
                                    <MudTable Items="_references" Hover="true" Dense="true" Striped="true">
                                        <HeaderContent>
                                            <MudTh>@TranslationService.GetTranslation("field.firstName", "Nome")</MudTh>
                                            <MudTh>@TranslationService.GetTranslation("field.lastName", "Cognome")</MudTh>
                                            <MudTh>@TranslationService.GetTranslation("field.department", "Dipartimento")</MudTh>
                                            <MudTh>@TranslationService.GetTranslation("field.notes", "Note")</MudTh>
                                        </HeaderContent>
                                        <RowTemplate>
                                            <MudTd DataLabel="@TranslationService.GetTranslation("field.firstName", "Nome")">@context.FirstName</MudTd>
                                            <MudTd DataLabel="@TranslationService.GetTranslation("field.lastName", "Cognome")">@context.LastName</MudTd>
                                            <MudTd DataLabel="@TranslationService.GetTranslation("field.department", "Dipartimento")">@context.Department</MudTd>
                                            <MudTd DataLabel="@TranslationService.GetTranslation("field.notes", "Note")">@context.Notes</MudTd>
                                        </RowTemplate>
                                    </MudTable>
                                </MudExpansionPanel>
                            </MudExpansionPanels>
                        </MudItem>
                    }
                }
            }
        </MudGrid>
    </ViewContent>
    
</EntityDrawer>

@code {
    private BusinessPartyDto _model = new() { PartyType = BusinessPartyType.Cliente, Name = string.Empty };
    private string? _customTitle;
    private bool _loadingRelatedEntities = false;
    private IEnumerable<AddressDto>? _addresses;
    private IEnumerable<ContactDto>? _contacts;
    private IEnumerable<ReferenceDto>? _references;

    /// <summary>
    /// Whether the drawer is open.
    /// </summary>
    [Parameter] public bool IsOpen { get; set; }
    
    /// <summary>
    /// Event callback for when IsOpen changes.
    /// </summary>
    [Parameter] public EventCallback<bool> IsOpenChanged { get; set; }
    
    /// <summary>
    /// The current mode of the drawer.
    /// </summary>
    [Parameter] public EntityDrawerMode Mode { get; set; } = EntityDrawerMode.Create;
    
    /// <summary>
    /// Event callback for when Mode changes.
    /// </summary>
    [Parameter] public EventCallback<EntityDrawerMode> ModeChanged { get; set; }
    
    /// <summary>
    /// The business party being edited/viewed (for Edit/View modes).
    /// </summary>
    [Parameter] public BusinessPartyDto? OriginalBusinessParty { get; set; }
    
    /// <summary>
    /// Whether editing is allowed.
    /// </summary>
    [Parameter] public bool AllowEdit { get; set; } = true;
    
    /// <summary>
    /// Default party type for new business parties.
    /// </summary>
    [Parameter] public BusinessPartyType DefaultPartyType { get; set; } = BusinessPartyType.Supplier;
    
    /// <summary>
    /// Event callback when a business party is created.
    /// </summary>
    [Parameter] public EventCallback<BusinessPartyDto> OnBusinessPartyCreated { get; set; }
    
    /// <summary>
    /// Event callback when a business party is updated.
    /// </summary>
    [Parameter] public EventCallback<BusinessPartyDto> OnBusinessPartyUpdated { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (Mode == EntityDrawerMode.Edit && OriginalBusinessParty != null)
        {
            // Initialize model for editing
            _model = new BusinessPartyDto
            {
                Id = OriginalBusinessParty.Id,
                PartyType = OriginalBusinessParty.PartyType,
                Name = OriginalBusinessParty.Name,
                TaxCode = OriginalBusinessParty.TaxCode,
                VatNumber = OriginalBusinessParty.VatNumber,
                SdiCode = OriginalBusinessParty.SdiCode,
                Pec = OriginalBusinessParty.Pec,
                Notes = OriginalBusinessParty.Notes,
                CreatedAt = OriginalBusinessParty.CreatedAt,
                ModifiedAt = OriginalBusinessParty.ModifiedAt,
                CreatedBy = OriginalBusinessParty.CreatedBy,
                ModifiedBy = OriginalBusinessParty.ModifiedBy
            };
            
            _customTitle = TranslationService.GetTranslation("drawer.title.editBusinessParty", "Modifica {0}", OriginalBusinessParty.Name);
            
            // Load related entities in Edit mode as well
            await LoadRelatedEntitiesAsync();
        }
        else if (Mode == EntityDrawerMode.View && OriginalBusinessParty != null)
        {
            _customTitle = TranslationService.GetTranslation("drawer.title.viewBusinessParty", "Visualizza {0}", OriginalBusinessParty.Name);
            
            // Load related entities in View mode
            await LoadRelatedEntitiesAsync();
        }
        else if (Mode == EntityDrawerMode.Create)
        {
            // Reset for create mode
            _model = new BusinessPartyDto { PartyType = DefaultPartyType, Name = string.Empty };
            _customTitle = null;
            ClearRelatedEntities();
        }

        await Task.CompletedTask;
    }
    
    private async Task LoadRelatedEntitiesAsync()
    {
        if (OriginalBusinessParty == null) return;
        
        try
        {
            _loadingRelatedEntities = true;
            StateHasChanged();
                       
            _addresses = await EntityManagementService.GetAddressesByOwnerAsync(OriginalBusinessParty.Id);
            _contacts = await EntityManagementService.GetContactsByOwnerAsync(OriginalBusinessParty.Id);
            _references = await EntityManagementService.GetReferencesByOwnerAsync(OriginalBusinessParty.Id);
            
            _loadingRelatedEntities = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to load related entities for business party {BusinessPartyId}", OriginalBusinessParty.Id);
            _loadingRelatedEntities = false;
            Snackbar.Add(TranslationService.GetTranslation("messages.loadFailed", "Errore durante il caricamento"), Severity.Warning);
        }
    }
    
    private void ClearRelatedEntities()
    {
        _addresses = null;
        _contacts = null;
        _references = null;
        _loadingRelatedEntities = false;
    }

    private async Task HandleSave()
    {
        try
        {
            if (Mode == EntityDrawerMode.Create)
            {
                var createDto = new CreateBusinessPartyDto
                {
                    PartyType = _model.PartyType,
                    Name = _model.Name,
                    TaxCode = _model.TaxCode,
                    VatNumber = _model.VatNumber,
                    SdiCode = _model.SdiCode,
                    Pec = _model.Pec,
                    Notes = _model.Notes
                };
                
                var newBusinessParty = await BusinessPartyService.CreateBusinessPartyAsync(createDto);
                Snackbar.Add(TranslationService.GetTranslation("messages.createSuccessful", "Creazione completata con successo"), Severity.Success);
                
                if (OnBusinessPartyCreated.HasDelegate)
                {
                    await OnBusinessPartyCreated.InvokeAsync(newBusinessParty);
                }
            }
            else if (Mode == EntityDrawerMode.Edit && OriginalBusinessParty != null)
            {
                var updateDto = new UpdateBusinessPartyDto
                {
                    PartyType = _model.PartyType,
                    Name = _model.Name,
                    TaxCode = _model.TaxCode,
                    VatNumber = _model.VatNumber,
                    SdiCode = _model.SdiCode,
                    Pec = _model.Pec,
                    Notes = _model.Notes
                };
                
                var updatedBusinessParty = await BusinessPartyService.UpdateBusinessPartyAsync(OriginalBusinessParty.Id, updateDto);
                Snackbar.Add(TranslationService.GetTranslation("messages.updateSuccessful", "Aggiornamento completato con successo"), Severity.Success);
                
                if (OnBusinessPartyUpdated.HasDelegate)
                {
                    await OnBusinessPartyUpdated.InvokeAsync(updatedBusinessParty);
                }
            }
            
            await HandleClose();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to save business party");
            var message = Mode == EntityDrawerMode.Create ? 
                TranslationService.GetTranslation("messages.createFailed", "Errore durante la creazione") : 
                TranslationService.GetTranslation("messages.updateFailed", "Errore durante l'aggiornamento");
            Snackbar.Add($"{message}: {ex.Message}", Severity.Error);
        }
    }

    private async Task HandleCancel()
    {
        await HandleClose();
    }

    private async Task HandleClose()
    {
        IsOpen = false;
        await IsOpenChanged.InvokeAsync(IsOpen);
        
        // Reset state
        _model = new BusinessPartyDto { PartyType = BusinessPartyType.Supplier, Name = string.Empty };
        _customTitle = null;
        ClearRelatedEntities();
    }

    private string GetPartyTypeText(BusinessPartyType partyType)
    {
        return partyType switch
        {
            BusinessPartyType.Cliente => TranslationService.GetTranslation("partyType.cliente", "Cliente"),
            BusinessPartyType.Supplier => TranslationService.GetTranslation("partyType.supplier", "Fornitore"),
            BusinessPartyType.Both => TranslationService.GetTranslation("partyType.both", "Cliente/Fornitore"),
            _ => partyType.ToString()
        };
    }
    
    #region Address Management
    
    private async Task OpenAddAddressDialog()
    {
        if (OriginalBusinessParty == null) return;
        
        var parameters = new DialogParameters
        {
            ["OwnerId"] = OriginalBusinessParty.Id,
            ["OwnerType"] = "BusinessParty"
        };
        
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialog = await DialogService.ShowAsync<AddAddressDialog>(
            TranslationService.GetTranslation("dialog.addAddress", "Aggiungi Indirizzo"),
            parameters,
            options
        );
        
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await LoadRelatedEntitiesAsync();
        }
    }
    
    private async Task OpenEditAddressDialog(AddressDto address)
    {
        var parameters = new DialogParameters
        {
            ["Address"] = address
        };
        
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialog = await DialogService.ShowAsync<EditAddressDialog>(
            TranslationService.GetTranslation("dialog.editAddress", "Modifica Indirizzo"),
            parameters,
            options
        );
        
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await LoadRelatedEntitiesAsync();
        }
    }
    
    private async Task DeleteAddress(Guid addressId)
    {
        try
        {
            var parameters = new DialogParameters
            {
                ["ContentText"] = TranslationService.GetTranslation("dialog.confirmDeleteAddress", "Sei sicuro di voler eliminare questo indirizzo?"),
                ["ButtonText"] = TranslationService.GetTranslation("button.delete", "Elimina"),
                ["Color"] = Color.Error
            };
            
            var dialog = await DialogService.ShowAsync<ConfirmationDialog>(
                TranslationService.GetTranslation("dialog.confirmDelete", "Conferma eliminazione"),
                parameters
            );
            
            var result = await dialog.Result;
            if (result.Canceled) return;
            
            await EntityManagementService.DeleteAddressAsync(addressId);
            Snackbar.Add(TranslationService.GetTranslation("messages.deleteSuccessful", "Eliminazione completata con successo"), Severity.Success);
            
            // Reload addresses
            await LoadRelatedEntitiesAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to delete address {AddressId}", addressId);
            Snackbar.Add(TranslationService.GetTranslation("messages.deleteFailed", "Errore durante l'eliminazione"), Severity.Error);
        }
    }
    
    #endregion
    
    #region Contact Management
    
    private async Task OpenAddContactDialog()
    {
        if (OriginalBusinessParty == null) return;
        
        var parameters = new DialogParameters
        {
            ["OwnerId"] = OriginalBusinessParty.Id,
            ["OwnerType"] = "BusinessParty"
        };
        
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialog = await DialogService.ShowAsync<AddContactDialog>(
            TranslationService.GetTranslation("dialog.addContact", "Aggiungi Contatto"),
            parameters,
            options
        );
        
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await LoadRelatedEntitiesAsync();
        }
    }
    
    private async Task OpenEditContactDialog(ContactDto contact)
    {
        var parameters = new DialogParameters
        {
            ["Contact"] = contact
        };
        
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialog = await DialogService.ShowAsync<EditContactDialog>(
            TranslationService.GetTranslation("dialog.editContact", "Modifica Contatto"),
            parameters,
            options
        );
        
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await LoadRelatedEntitiesAsync();
        }
    }
    
    private async Task DeleteContact(Guid contactId)
    {
        try
        {
            var parameters = new DialogParameters
            {
                ["ContentText"] = TranslationService.GetTranslation("dialog.confirmDeleteContact", "Sei sicuro di voler eliminare questo contatto?"),
                ["ButtonText"] = TranslationService.GetTranslation("button.delete", "Elimina"),
                ["Color"] = Color.Error
            };
            
            var dialog = await DialogService.ShowAsync<ConfirmationDialog>(
                TranslationService.GetTranslation("dialog.confirmDelete", "Conferma eliminazione"),
                parameters
            );
            
            var result = await dialog.Result;
            if (result.Canceled) return;
            
            await EntityManagementService.DeleteContactAsync(contactId);
            Snackbar.Add(TranslationService.GetTranslation("messages.deleteSuccessful", "Eliminazione completata con successo"), Severity.Success);
            
            // Reload contacts
            await LoadRelatedEntitiesAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to delete contact {ContactId}", contactId);
            Snackbar.Add(TranslationService.GetTranslation("messages.deleteFailed", "Errore durante l'eliminazione"), Severity.Error);
        }
    }
    
    #endregion
    
    #region Reference Management
    
    private async Task OpenAddReferenceDialog()
    {
        if (OriginalBusinessParty == null) return;
        
        var parameters = new DialogParameters
        {
            ["OwnerId"] = OriginalBusinessParty.Id,
            ["OwnerType"] = "BusinessParty"
        };
        
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialog = await DialogService.ShowAsync<AddReferenceDialog>(
            TranslationService.GetTranslation("dialog.addReference", "Aggiungi Referente"),
            parameters,
            options
        );
        
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await LoadRelatedEntitiesAsync();
        }
    }
    
    private async Task OpenEditReferenceDialog(ReferenceDto reference)
    {
        var parameters = new DialogParameters
        {
            ["Reference"] = reference
        };
        
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialog = await DialogService.ShowAsync<EditReferenceDialog>(
            TranslationService.GetTranslation("dialog.editReference", "Modifica Referente"),
            parameters,
            options
        );
        
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await LoadRelatedEntitiesAsync();
        }
    }
    
    private async Task DeleteReference(Guid referenceId)
    {
        try
        {
            var parameters = new DialogParameters
            {
                ["ContentText"] = TranslationService.GetTranslation("dialog.confirmDeleteReference", "Sei sicuro di voler eliminare questo referente?"),
                ["ButtonText"] = TranslationService.GetTranslation("button.delete", "Elimina"),
                ["Color"] = Color.Error
            };
            
            var dialog = await DialogService.ShowAsync<ConfirmationDialog>(
                TranslationService.GetTranslation("dialog.confirmDelete", "Conferma eliminazione"),
                parameters
            );
            
            var result = await dialog.Result;
            if (result.Canceled) return;
            
            await EntityManagementService.DeleteReferenceAsync(referenceId);
            Snackbar.Add(TranslationService.GetTranslation("messages.deleteSuccessful", "Eliminazione completata con successo"), Severity.Success);
            
            // Reload references
            await LoadRelatedEntitiesAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to delete reference {ReferenceId}", referenceId);
            Snackbar.Add(TranslationService.GetTranslation("messages.deleteFailed", "Errore durante l'eliminazione"), Severity.Error);
        }
    }
    
    #endregion
}
