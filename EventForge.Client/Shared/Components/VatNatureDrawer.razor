@using MudBlazor
@using EventForge.DTOs.VatRates
@using EventForge.Client.Shared.Components
@inject IFinancialService FinancialService
@inject ISnackbar Snackbar
@inject ILogger<VatNatureDrawer> Logger
@inject ITranslationService TranslationService

<EntityDrawer @bind-IsOpen="@IsOpen"
              @bind-Mode="@Mode"
              EntityName="@TranslationService.GetTranslation("field.vatNature", "Natura IVA")"
              Model="@_model"
              OnSave="@HandleSave"
              OnCancel="@HandleCancel"
              OnClose="@HandleClose"
              CustomTitle="@_customTitle"
              AllowEdit="@AllowEdit"
              Width="50%">
    
    <FormContent>
        <MudGrid>
            <MudItem xs="12" md="4">
                <MudTextField @bind-Value="_model.Code"
                              Label="@($"{TranslationService.GetTranslation("drawer.field.codiceNaturaIva", "Codice")} *")"
                              Variant="Variant.Outlined"
                              Required="true"
                              RequiredError="@TranslationService.GetTranslation("drawer.error.codiceObbligatorio", "Il codice è obbligatorio")"
                              MaxLength="10"
                              Immediate="true"
                              aria-describedby="code-help" />
                <MudText id="code-help" Typo="Typo.caption" Class="mud-input-helper-text">
                    @TranslationService.GetTranslation("drawer.helperText.codiceNaturaIva", "Codice della natura IVA (es. N1, N2, N3)")
                </MudText>
            </MudItem>
            
            <MudItem xs="12" md="8">
                <MudTextField @bind-Value="_model.Name"
                              Label="@($"{TranslationService.GetTranslation("drawer.field.nomeNaturaIva", "Nome")} *")"
                              Variant="Variant.Outlined"
                              Required="true"
                              RequiredError="@TranslationService.GetTranslation("drawer.error.nomeObbligatorio", "Il nome è obbligatorio")"
                              MaxLength="100"
                              Immediate="true"
                              aria-describedby="name-help" />
                <MudText id="name-help" Typo="Typo.caption" Class="mud-input-helper-text">
                    @TranslationService.GetTranslation("drawer.helperText.nomeNaturaIva", "Nome descrittivo della natura IVA")
                </MudText>
            </MudItem>
            
            <MudItem xs="12">
                <MudTextField @bind-Value="_model.Description"
                              Label="@TranslationService.GetTranslation("drawer.field.descrizione", "Descrizione")"
                              Variant="Variant.Outlined"
                              Lines="4"
                              MaxLength="500"
                              aria-describedby="description-help" />
                <MudText id="description-help" Typo="Typo.caption" Class="mud-input-helper-text">
                    @TranslationService.GetTranslation("drawer.helperText.descrizioneNaturaIva", "Descrizione dello scopo e utilizzo della natura IVA")
                </MudText>
            </MudItem>
            
            @if (Mode == EntityDrawerMode.Edit && OriginalVatNature != null)
            {
                <MudItem xs="12" md="6">
                    <MudTextField Value="@OriginalVatNature.Id.ToString()"
                                  Label="@TranslationService.GetTranslation("drawer.field.id", "ID")"
                                  Variant="Variant.Outlined"
                                  ReadOnly="true"
                                  aria-label="@TranslationService.GetTranslation("drawer.aria.identificativoUnico", "Identificativo unico")" />
                </MudItem>
                
                <MudItem xs="12" md="6">
                    <MudTextField Value="@OriginalVatNature.CreatedAt.ToString("dd/MM/yyyy HH:mm")"
                                  Label="@TranslationService.GetTranslation("drawer.field.dataCreazione", "Data Creazione")"
                                  Variant="Variant.Outlined"
                                  ReadOnly="true"
                                  aria-label="@TranslationService.GetTranslation("drawer.aria.dataOraCreazione", "Data e ora di creazione")" />
                </MudItem>
            }
        </MudGrid>
    </FormContent>
    
    <ViewContent>
        <MudGrid>
            <MudItem xs="12" md="4">
                <MudTextField Value="@(OriginalVatNature?.Code ?? "")"
                              Label="@TranslationService.GetTranslation("drawer.field.codiceNaturaIva", "Codice")"
                              Variant="Variant.Outlined"
                              ReadOnly="true"
                              aria-label="@TranslationService.GetTranslation("drawer.field.codiceNaturaIva")" />
            </MudItem>
            
            <MudItem xs="12" md="8">
                <MudTextField Value="@(OriginalVatNature?.Name ?? "")"
                              Label="@TranslationService.GetTranslation("drawer.field.nomeNaturaIva", "Nome")"
                              Variant="Variant.Outlined"
                              ReadOnly="true"
                              aria-label="@TranslationService.GetTranslation("drawer.field.nomeNaturaIva")" />
            </MudItem>
            
            @if (!string.IsNullOrWhiteSpace(OriginalVatNature?.Description))
            {
                <MudItem xs="12">
                    <MudTextField Value="@OriginalVatNature.Description"
                                  Label="@TranslationService.GetTranslation("drawer.field.descrizione", "Descrizione")"
                                  Variant="Variant.Outlined"
                                  Lines="4"
                                  ReadOnly="true"
                                  aria-label="@TranslationService.GetTranslation("drawer.field.descrizione")" />
                </MudItem>
            }
            
            @if (OriginalVatNature != null)
            {
                <MudItem xs="12" md="6">
                    <MudTextField Value="@OriginalVatNature.Id.ToString()"
                                  Label="@TranslationService.GetTranslation("drawer.field.id", "ID")"
                                  Variant="Variant.Outlined"
                                  ReadOnly="true"
                                  aria-label="@TranslationService.GetTranslation("drawer.aria.identificativoUnico", "Identificativo unico")" />
                </MudItem>
                
                <MudItem xs="12" md="6">
                    <MudTextField Value="@OriginalVatNature.CreatedAt.ToString("dd/MM/yyyy HH:mm")"
                                  Label="@TranslationService.GetTranslation("drawer.field.dataCreazione", "Data Creazione")"
                                  Variant="Variant.Outlined"
                                  ReadOnly="true"
                                  aria-label="@TranslationService.GetTranslation("drawer.aria.dataOraCreazione", "Data e ora di creazione")" />
                </MudItem>
                
                @if (OriginalVatNature.ModifiedAt != null && OriginalVatNature.ModifiedAt != OriginalVatNature.CreatedAt)
                {
                    <MudItem xs="12">
                        <MudTextField Value="@OriginalVatNature.ModifiedAt?.ToString("dd/MM/yyyy HH:mm")"
                                      Label="@TranslationService.GetTranslation("drawer.field.ultimaModifica", "Ultima Modifica")"
                                      Variant="Variant.Outlined"
                                      ReadOnly="true"
                                      aria-label="@TranslationService.GetTranslation("drawer.aria.dataOraUltimaModifica", "Data e ora ultima modifica")" />
                    </MudItem>
                }
            }
        </MudGrid>
    </ViewContent>
    
</EntityDrawer>

@code {
    private VatNatureDto _model = new();
    private string? _customTitle;

    /// <summary>
    /// Whether the drawer is open.
    /// </summary>
    [Parameter] public bool IsOpen { get; set; }
    
    /// <summary>
    /// Event callback for when IsOpen changes.
    /// </summary>
    [Parameter] public EventCallback<bool> IsOpenChanged { get; set; }
    
    /// <summary>
    /// The current mode of the drawer.
    /// </summary>
    [Parameter] public EntityDrawerMode Mode { get; set; } = EntityDrawerMode.Create;
    
    /// <summary>
    /// Event callback for when Mode changes.
    /// </summary>
    [Parameter] public EventCallback<EntityDrawerMode> ModeChanged { get; set; }
    
    /// <summary>
    /// The VAT nature being edited/viewed (for Edit/View modes).
    /// </summary>
    [Parameter] public VatNatureDto? OriginalVatNature { get; set; }
    
    /// <summary>
    /// Whether editing is allowed.
    /// </summary>
    [Parameter] public bool AllowEdit { get; set; } = true;
    
    /// <summary>
    /// Event callback when a VAT nature is created.
    /// </summary>
    [Parameter] public EventCallback<VatNatureDto> OnVatNatureCreated { get; set; }
    
    /// <summary>
    /// Event callback when a VAT nature is updated.
    /// </summary>
    [Parameter] public EventCallback<VatNatureDto> OnVatNatureUpdated { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (Mode == EntityDrawerMode.Edit && OriginalVatNature != null)
        {
            // Initialize model for editing
            _model = new VatNatureDto
            {
                Id = OriginalVatNature.Id,
                Code = OriginalVatNature.Code,
                Name = OriginalVatNature.Name,
                Description = OriginalVatNature.Description,
                CreatedAt = OriginalVatNature.CreatedAt,
                ModifiedAt = OriginalVatNature.ModifiedAt,
                CreatedBy = OriginalVatNature.CreatedBy,
                ModifiedBy = OriginalVatNature.ModifiedBy
            };
            
            _customTitle = TranslationService.GetTranslation("drawer.title.modificaNaturaIva", "Modifica Natura IVA: {0}", OriginalVatNature.Name);
        }
        else if (Mode == EntityDrawerMode.View && OriginalVatNature != null)
        {
            _customTitle = TranslationService.GetTranslation("drawer.title.visualizzaNaturaIva", "Visualizza Natura IVA: {0}", OriginalVatNature.Name);
        }
        else if (Mode == EntityDrawerMode.Create)
        {
            // Reset for create mode
            _model = new VatNatureDto();
            _customTitle = null;
        }

        await Task.CompletedTask;
    }

    private async Task HandleSave()
    {
        try
        {
            if (Mode == EntityDrawerMode.Create)
            {
                var createDto = new CreateVatNatureDto
                {
                    Code = _model.Code,
                    Name = _model.Name,
                    Description = _model.Description
                };
                
                var newVatNature = await FinancialService.CreateVatNatureAsync(createDto);
                Snackbar.Add(TranslationService.GetTranslation("messages.createSuccessful", "Creazione completata con successo"), Severity.Success);
                
                if (OnVatNatureCreated.HasDelegate)
                {
                    await OnVatNatureCreated.InvokeAsync(newVatNature);
                }
            }
            else if (Mode == EntityDrawerMode.Edit && OriginalVatNature != null)
            {
                var updateDto = new UpdateVatNatureDto
                {
                    Code = _model.Code,
                    Name = _model.Name,
                    Description = _model.Description
                };
                
                var updatedVatNature = await FinancialService.UpdateVatNatureAsync(OriginalVatNature.Id, updateDto);
                Snackbar.Add(TranslationService.GetTranslation("messages.updateSuccessful", "Aggiornamento completato con successo"), Severity.Success);
                
                if (OnVatNatureUpdated.HasDelegate)
                {
                    await OnVatNatureUpdated.InvokeAsync(updatedVatNature);
                }
            }
            
            await HandleClose();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to save VAT nature");
            var message = Mode == EntityDrawerMode.Create ? 
                TranslationService.GetTranslation("messages.createFailed", "Errore durante la creazione") : 
                TranslationService.GetTranslation("messages.updateFailed", "Errore durante l'aggiornamento");
            Snackbar.Add($"{message}: {ex.Message}", Severity.Error);
        }
    }

    private async Task HandleCancel()
    {
        // Close the drawer
        IsOpen = false;
        await IsOpenChanged.InvokeAsync(false);
    }
    
    private async Task HandleClose()
    {
        // Close the drawer
        IsOpen = false;
        await IsOpenChanged.InvokeAsync(false);
    }
}
