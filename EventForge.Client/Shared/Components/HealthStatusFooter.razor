@using EventForge.DTOs.Health
@using EventForge.Client.Services
@inject IHealthService HealthService
@inject ITranslationService TranslationService
@inject IThemeService ThemeService
@implements IDisposable

<!-- 
    Health Status Footer Component (formerly Universal Footer)
    
    This footer component is visible on ALL pages including login, providing:
    - Health status chip with system overview
    - Language selector with flag icons (4 languages: it, en, es, fr)
    - Theme selector with text labels for custom themes
    - Mobile-responsive with expandable menu
    - Keyboard and screen reader accessible
    - Discrete animations for theme/language changes
    - Centralized across all layouts
-->

<footer class="universal-footer @(_isExpanded ? "expanded" : "collapsed")" 
        role="contentinfo" 
        aria-label="@TranslationService.GetTranslation("footer.ariaLabel", "Site footer with system status and preferences")">
    <div class="footer-content pa-1">
        <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween" Spacing="1">
            
            <!-- Health Status Icon Button -->
            <div class="health-section">
                <MudIconButton Icon="@Icons.Material.Filled.Info" 
                               Size="Size.Small"
                               Color="@GetOverallHealthColor()"
                               OnClick="@(() => _isHealthDrawerOpen = true)"
                               aria-label="@TranslationService.GetTranslation("health.openDrawer", "Open system health information")"
                               Title="@TranslationService.GetTranslation("health.systemHealth", "System Health")"
                               Class="health-icon-button" />
            </div>

            <!-- Desktop: Language and Theme selectors always visible -->
            <div class="d-none d-md-flex selectors-section" 
                 role="group" 
                 aria-label="@TranslationService.GetTranslation("footer.preferencesGroup", "User preferences")">
                <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                    <LanguageSelector Dense="true" ShowFlags="true" />
                    <ThemeSelector TextLabels="true" />
                </MudStack>
            </div>

            <!-- Mobile: Expandable menu button -->
            <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1" Class="d-flex d-md-none mobile-section">
                <MudIconButton Icon="@(_isExpanded ? Icons.Material.Filled.ExpandLess : Icons.Material.Filled.ExpandMore)"
                               Size="Size.Small"
                               Color="Color.Inherit"
                               OnClick="@(() => _isExpanded = !_isExpanded)"
                               aria-label="@TranslationService.GetTranslation("footer.expandMenu", "Expand preferences menu")"
                               aria-expanded="@_isExpanded"
                               aria-controls="mobile-preferences-menu" />
            </MudStack>
        </MudStack>

        <!-- Mobile Expanded Menu -->
        <MudCollapse Expanded="@_isExpanded" Class="d-flex d-md-none">
            <div id="mobile-preferences-menu" 
                 class="mobile-preferences-menu pa-3 mt-1"
                 role="region"
                 aria-label="@TranslationService.GetTranslation("footer.preferencesMenu", "Preferences menu")">
                <MudStack Spacing="2">
                    <!-- Language Selector -->
                    <div class="mobile-selector-group">
                        <MudText Typo="Typo.body2" Class="font-weight-medium mb-2">
                            <MudIcon Icon="@Icons.Material.Filled.Language" Size="Size.Small" Class="mr-2" />
                            @TranslationService.GetTranslation("common.language", "Language")
                        </MudText>
                        <LanguageSelector Dense="false" ShowFlags="true" Class="mobile-selector" />
                    </div>
                    
                    <!-- Theme Selector -->
                    <div class="mobile-selector-group">
                        <MudText Typo="Typo.body2" Class="font-weight-medium mb-2">
                            <MudIcon Icon="@Icons.Material.Filled.Palette" Size="Size.Small" Class="mr-2" />
                            @TranslationService.GetTranslation("theme.selector", "Theme")
                        </MudText>
                        <ThemeSelector TextLabels="true" Class="mobile-selector" />
                    </div>
                </MudStack>
            </div>
        </MudCollapse>
    </div>
</footer>

<!-- Health Status Drawer -->
<HealthDrawer @bind-IsOpen="@_isHealthDrawerOpen" 
              HealthData="@_healthData" 
              LastUpdated="@_lastUpdated" />

@code {
    private DetailedHealthStatusDto? _healthData;
    private DateTime? _lastUpdated;
    private Timer? _refreshTimer;
    private bool _isExpanded = false;
    private bool _isHealthDrawerOpen = false;

    /// <summary>
    /// Refresh interval for health data in milliseconds. Default is 60 seconds.
    /// </summary>
    [Parameter] public int RefreshInterval { get; set; } = 60000;

    protected override async Task OnInitializedAsync()
    {
        // Subscribe to theme and language changes for animations
        ThemeService.OnThemeChanged += OnThemeChanged;
        TranslationService.LanguageChanged += OnLanguageChanged;
        
        // Initial health data load
        await RefreshHealthData();
        
        // Set up periodic refresh
        _refreshTimer = new Timer(async _ => 
        {
            await InvokeAsync(async () =>
            {
                await RefreshHealthData();
                StateHasChanged();
            });
        }, null, RefreshInterval, RefreshInterval);
    }

    private async Task RefreshHealthData()
    {
        try
        {
            _healthData = await HealthService.GetDetailedHealthAsync();
            _lastUpdated = DateTime.Now;
        }
        catch (Exception ex)
        {
            // Log error but don't break the UI
            Console.Error.WriteLine($"Health status refresh failed: {ex.Message}");
        }
    }

    private void OnThemeChanged()
    {
        // Add discrete animation class and trigger state change
        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    private void OnLanguageChanged(object? sender, string newLanguage)
    {
        // Add discrete animation class and trigger state change
        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    #region Status Helpers

    private Color GetOverallHealthColor()
    {
        if (_healthData == null) return Color.Default;

        // Check if any major system is unhealthy
        var statuses = new List<string?>
        {
            _healthData.ApiStatus,
            _healthData.DatabaseStatus,
            _healthData.AuthenticationStatus
        };

        // Add dependencies status
        if (_healthData.Dependencies?.Any() == true)
        {
            var dependencyStatuses = _healthData.Dependencies.Values;
            if (dependencyStatuses.Any(s => s?.ToLower().Contains("error") == true || s?.ToLower().Contains("unhealthy") == true))
                statuses.Add("unhealthy");
            else if (dependencyStatuses.Any(s => s?.ToLower().Contains("degraded") == true || s?.ToLower().Contains("warning") == true))
                statuses.Add("degraded");
            else
                statuses.Add("healthy");
        }

        // Determine overall color based on worst status
        if (statuses.Any(s => s?.ToLower() == "unhealthy" || s?.ToLower() == "error"))
            return Color.Error;
        else if (statuses.Any(s => s?.ToLower() == "degraded" || s?.ToLower() == "warning"))
            return Color.Warning;
        else if (statuses.Any(s => s?.ToLower() == "healthy"))
            return Color.Success;
        else
            return Color.Info;
    }

    #endregion

    public void Dispose()
    {
        _refreshTimer?.Dispose();
        ThemeService.OnThemeChanged -= OnThemeChanged;
        TranslationService.LanguageChanged -= OnLanguageChanged;
    }
}

<style>
    .universal-footer {
        position: fixed;
        bottom: 0;
        left: 0;
        right: 0;
        width: 100%;
        background: var(--mud-palette-surface);
        border-top: 1px solid var(--mud-palette-lines-default);
        backdrop-filter: blur(10px);
        z-index: 1000;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        box-shadow: 0 -2px 8px rgba(0, 0, 0, 0.1);
        min-height: 56px;
    }

    .footer-content {
        max-width: 1400px;
        margin: 0 auto;
        width: 100%;
    }

    .universal-footer.expanded {
        /* Additional height when mobile menu is expanded */
    }

    .health-section {
        display: flex;
        align-items: center;
    }

    .health-icon-button {
        transition: all 0.2s ease;
        border-radius: 50%;
    }

    .health-icon-button:hover {
        transform: scale(1.1);
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
    }

    .selectors-section {
        flex-grow: 1;
        justify-content: center;
        gap: 12px;
    }

    .selectors-section > * {
        min-width: 120px;
        height: 32px;
    }

    .mobile-preferences-menu {
        background: var(--mud-palette-surface);
        border-radius: 8px;
        border: 1px solid var(--mud-palette-lines-default);
        animation: slideDown 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        padding: 12px;
    }

    .mobile-selector-group {
        animation: fadeIn 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    }

    .mobile-selector {
        width: 100%;
    }

    /* Discrete animations for theme/language changes */
    .selectors-section > * {
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    }

    .mobile-selector-group > * {
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    }

    /* Ensure body has padding to account for fixed footer */
    body {
        padding-bottom: 70px;
    }

    /* Accessibility improvements */
    .health-chip:focus-visible {
        outline: 2px solid var(--mud-palette-primary);
        outline-offset: 2px;
    }

    .mobile-preferences-menu:focus-within {
        border-color: var(--mud-palette-primary);
    }

    /* Screen reader only text */
    .sr-only {
        position: absolute;
        width: 1px;
        height: 1px;
        padding: 0;
        margin: -1px;
        overflow: hidden;
        clip: rect(0, 0, 0, 0);
        white-space: nowrap;
        border: 0;
    }

    .sr-only:focus {
        position: static;
        width: auto;
        height: auto;
        padding: 0.25rem 0.5rem;
        margin: 0;
        overflow: visible;
        clip: auto;
        white-space: normal;
    }
</style>

