@using MudBlazor
@using EventForge.DTOs.SuperAdmin
@using EventForge.DTOs.Tenants
@using EventForge.Client.Shared.Components
@using EventForge.Client.Constants
@inject ISuperAdminService SuperAdminService
@inject ITenantContextService TenantContextService
@inject ISnackbar Snackbar
@inject ILogger<UserDrawer> Logger
@inject ITranslationService TranslationService

<EntityDrawer @bind-IsOpen="@IsOpen"
              @bind-Mode="@Mode"
              EntityName="@TranslationService.GetTranslation("field.username")"
              Model="@_model"
              OnSave="@HandleSave"
              OnCancel="@HandleCancel"
              OnClose="@HandleClose"
              CustomTitle="@_customTitle"
              AllowEdit="@AllowEdit"
              Width="700px">
    
    <FormContent>
        <MudGrid>
            <MudItem xs="12" md="6">
                <MudTextField @bind-Value="_model.FirstName"
                              Label="@($"{TranslationService.GetTranslation("drawer.field.nome")} *")"
                              Variant="Variant.Outlined"
                              Required="true"
                              RequiredError="@TranslationService.GetTranslation("drawer.error.nomeObbligatorio", "Il nome è obbligatorio")"
                              MaxLength="100"
                              Immediate="true"
                              OnBlur="@ValidateFirstName"
                              aria-describedby="firstName-help"
                              For="@(() => _model.FirstName)" />
                <MudText id="firstName-help" Typo="Typo.caption" Class="mud-input-helper-text">
                    @TranslationService.GetTranslation("drawer.helperText.nome", "Inserisci il nome dell'utente")
                </MudText>
            </MudItem>
            
            <MudItem xs="12" md="6">
                <MudTextField @bind-Value="_model.LastName"
                              Label="@($"{TranslationService.GetTranslation("drawer.field.cognome")} *")"
                              Variant="Variant.Outlined"
                              Required="true"
                              RequiredError="@TranslationService.GetTranslation("drawer.error.cognomeObbligatorio", "Il cognome è obbligatorio")"
                              MaxLength="100"
                              Immediate="true"
                              OnBlur="@ValidateLastName"
                              aria-describedby="lastName-help"
                              For="@(() => _model.LastName)" />
                <MudText id="lastName-help" Typo="Typo.caption" Class="mud-input-helper-text">
                    @TranslationService.GetTranslation("drawer.helperText.cognome", "Inserisci il cognome dell'utente")
                </MudText>
            </MudItem>
            
            <MudItem xs="12" md="6">
                <MudTextField @bind-Value="_model.Username"
                              Label="@($"{TranslationService.GetTranslation("drawer.field.username")} *")"
                              Variant="Variant.Outlined"
                              Required="true"
                              RequiredError="@TranslationService.GetTranslation("drawer.error.usernameObbligatorio", "L'username è obbligatorio")"
                              MaxLength="100"
                              ReadOnly="@(Mode == EntityDrawerMode.Edit)"
                              Immediate="true"
                              OnBlur="@ValidateUsername"
                              aria-describedby="username-help"
                              For="@(() => _model.Username)" />
                <MudText id="username-help" Typo="Typo.caption" Class="mud-input-helper-text">
                    @(Mode == EntityDrawerMode.Edit ? 
                        TranslationService.GetTranslation("drawer.helperText.usernameEdit", "L'username non può essere modificato") : 
                        TranslationService.GetTranslation("drawer.helperText.usernameCreate", "Inserisci un username unico"))
                </MudText>
            </MudItem>
            
            <MudItem xs="12" md="6">
                <MudTextField @bind-Value="_model.Email"
                              Label="@($"{TranslationService.GetTranslation("drawer.field.email")} *")"
                              Variant="Variant.Outlined"
                              InputType="InputType.Email"
                              Required="true"
                              RequiredError="@TranslationService.GetTranslation("drawer.error.emailObbligatoria", "L'email è obbligatoria")"
                              MaxLength="256"
                              Immediate="true"
                              OnBlur="@ValidateEmail"
                              aria-describedby="email-help"
                              For="@(() => _model.Email)" />
                <MudText id="email-help" Typo="Typo.caption" Class="mud-input-helper-text">
                    @TranslationService.GetTranslation("drawer.helperText.email", "Inserisci un indirizzo email valido")
                </MudText>
            </MudItem>
            
            <MudItem xs="12">
                <MudSelect T="Guid?" 
                           @bind-Value="_model.TenantId" 
                           Label="@($"{TranslationService.GetTranslation("drawer.field.tenant")} *")" 
                           Variant="Variant.Outlined" 
                           Required="true"
                           RequiredError="@TranslationService.GetTranslation("drawer.error.tenantObbligatorio", "È necessario selezionare un tenant")"
                           Disabled="@(Mode == EntityDrawerMode.Edit)"
                           aria-describedby="tenant-help"
                           For="@(() => _model.TenantId)">
                    @foreach (var tenant in _tenants)
                    {
                        <MudSelectItem T="Guid?" Value="@tenant.Id">@tenant.DisplayName</MudSelectItem>
                    }
                </MudSelect>
                <MudText id="tenant-help" Typo="Typo.caption" Class="mud-input-helper-text">
                    @(Mode == EntityDrawerMode.Edit ? 
                        TranslationService.GetTranslation("drawer.helperText.tenantEdit", "Il tenant non può essere modificato dopo la creazione") : 
                        TranslationService.GetTranslation("drawer.helperText.tenantCreate", "Seleziona il tenant a cui assegnare l'utente"))
                </MudText>
            </MudItem>
            
            @if (Mode == EntityDrawerMode.Create)
            {
                <MudItem xs="12">
                    <MudAlert Severity="Severity.Info" Icon="@Icons.Material.Outlined.Info">
                        @TranslationService.GetTranslation("drawer.info.passwordAutoGenerated", "Una password temporanea verrà generata automaticamente e inviata all'utente via email. L'utente dovrà cambiarla al primo accesso.")
                    </MudAlert>
                </MudItem>
            }
            
            @if (Mode == EntityDrawerMode.Edit)
            {
                <MudItem xs="12" md="6">
                    <MudSwitch T="bool" 
                               @bind-Checked="_model.IsActive"
                               Label="@TranslationService.GetTranslation("drawer.field.utenteAttivo")"
                               Color="Color.Primary"
                               aria-describedby="active-help" />
                    <MudText id="active-help" Typo="Typo.caption" Class="mud-input-helper-text">
                        @TranslationService.GetTranslation("drawer.helperText.utenteAttivo")
                    </MudText>
                </MudItem>
            }
            
            <MudItem xs="12">
                <MudText Typo="Typo.subtitle1" Class="mb-3">@TranslationService.GetTranslation("drawer.field.ruoli")</MudText>
                <fieldset aria-labelledby="roles-legend">
                    <legend id="roles-legend" style="display: none;">@TranslationService.GetTranslation("drawer.aria.selezionaRuoli")</legend>
                    <MudGrid>
                        @foreach (var role in _availableRoles)
                        {
                            <MudItem xs="12" sm="6" md="4">
                                <MudCheckBox @bind-Value="_selectedRoles[role]"
                                             Color="Color.Primary"
                                             Label="@role"
                                             aria-describedby="@($"role-{role}-help")" />
                                <MudText id="@($"role-{role}-help")" Typo="Typo.caption" Class="mud-input-helper-text">
                                    @GetRoleDescription(role)
                                </MudText>
                            </MudItem>
                        }
                    </MudGrid>
                </fieldset>
            </MudItem>
            
            @if (Mode == EntityDrawerMode.Edit && OriginalUser != null)
            {
                <MudItem xs="12" md="6">
                    <MudTextField Value="@OriginalUser.Id.ToString()"
                                  Label="@TranslationService.GetTranslation("drawer.field.idUtente")"
                                  Variant="Variant.Outlined"
                                  ReadOnly="true"
                                  aria-label="@TranslationService.GetTranslation("drawer.aria.identificativoUnico")" />
                </MudItem>
                
                <MudItem xs="12" md="6">
                    <MudTextField Value="@OriginalUser.CreatedAt.ToString("dd/MM/yyyy HH:mm")"
                                  Label="@TranslationService.GetTranslation("drawer.field.dataCreazione")"
                                  Variant="Variant.Outlined"
                                  ReadOnly="true"
                                  aria-label="@TranslationService.GetTranslation("drawer.aria.dataOraCreazione")" />
                </MudItem>
            }
        </MudGrid>
    </FormContent>
    
    <ViewContent>
        <MudGrid>
            <MudItem xs="12" md="6">
                <MudTextField Value="@(OriginalUser?.FirstName ?? "")"
                              Label="@TranslationService.GetTranslation("drawer.field.nome")"
                              Variant="Variant.Outlined"
                              ReadOnly="true"
                              aria-label="@TranslationService.GetTranslation("drawer.field.nome")" />
            </MudItem>
            
            <MudItem xs="12" md="6">
                <MudTextField Value="@(OriginalUser?.LastName ?? "")"
                              Label="@TranslationService.GetTranslation("drawer.field.cognome")"
                              Variant="Variant.Outlined"
                              ReadOnly="true"
                              aria-label="@TranslationService.GetTranslation("drawer.field.cognome")" />
            </MudItem>
            
            <MudItem xs="12" md="6">
                <MudTextField Value="@(OriginalUser?.Username ?? "")"
                              Label="@TranslationService.GetTranslation("drawer.field.username")"
                              Variant="Variant.Outlined"
                              ReadOnly="true"
                              aria-label="@TranslationService.GetTranslation("drawer.field.username")" />
            </MudItem>
            
            <MudItem xs="12" md="6">
                <MudTextField Value="@(OriginalUser?.Email ?? "")"
                              Label="@TranslationService.GetTranslation("drawer.field.email")"
                              Variant="Variant.Outlined"
                              ReadOnly="true"
                              aria-label="@TranslationService.GetTranslation("drawer.field.email")" />
            </MudItem>
            
            <MudItem xs="12" md="6">
                <MudTextField Value="@(OriginalUser?.TenantName ?? TranslationService.GetTranslation("common.notAvailable"))"
                              Label="@TranslationService.GetTranslation("drawer.field.tenant")"
                              Variant="Variant.Outlined"
                              ReadOnly="true"
                              aria-label="@TranslationService.GetTranslation("drawer.field.tenant")" />
            </MudItem>
            
            <MudItem xs="12" md="6">
                <MudChip T="string" 
                         Color="@(OriginalUser?.IsActive == true ? Color.Success : Color.Error)" 
                         Size="Size.Medium"
                         aria-label="@TranslationService.GetTranslation("drawer.aria.statoEntita", TranslationService.GetTranslation("common.user"), (OriginalUser?.IsActive == true ? TranslationService.GetTranslation("drawer.status.attivo") : TranslationService.GetTranslation("drawer.status.inattivo")))">
                    @(OriginalUser?.IsActive == true ? TranslationService.GetTranslation("drawer.status.attivo") : TranslationService.GetTranslation("drawer.status.inattivo"))
                </MudChip>
            </MudItem>
            
            <MudItem xs="12">
                <MudText Typo="Typo.subtitle1" Class="mb-3">@TranslationService.GetTranslation("drawer.field.ruoli")</MudText>
                <div class="d-flex flex-wrap gap-2" role="list" aria-label="@TranslationService.GetTranslation("drawer.aria.ruoliAssegnati")">
                    @if (OriginalUser?.Roles?.Any() == true)
                    {
                        @foreach (var role in OriginalUser.Roles)
                        {
                            <MudChip T="string" 
                                     Color="@GetRoleColor(role)" 
                                     Size="Size.Small"
                                     role="listitem"
                                     aria-label="@TranslationService.GetTranslation("drawer.aria.ruolo", role)">
                                @role
                            </MudChip>
                        }
                    }
                    else
                    {
                        <MudText Typo="Typo.body2" Class="text-muted">@TranslationService.GetTranslation("drawer.status.nessunRuolo")</MudText>
                    }
                </div>
            </MudItem>
            
            @if (OriginalUser != null)
            {
                <MudItem xs="12" md="6">
                    <MudTextField Value="@OriginalUser.Id.ToString()"
                                  Label="@TranslationService.GetTranslation("drawer.field.idUtente")"
                                  Variant="Variant.Outlined"
                                  ReadOnly="true"
                                  aria-label="@TranslationService.GetTranslation("drawer.aria.identificativoUnico")" />
                </MudItem>
                
                <MudItem xs="12" md="6">
                    <MudTextField Value="@OriginalUser.CreatedAt.ToString("dd/MM/yyyy HH:mm")"
                                  Label="@TranslationService.GetTranslation("drawer.field.dataCreazione")"
                                  Variant="Variant.Outlined"
                                  ReadOnly="true"
                                  aria-label="@TranslationService.GetTranslation("drawer.aria.dataOraCreazione")" />
                </MudItem>
                
                <MudItem xs="12">
                    <MudTextField Value="@(OriginalUser.LastLoginAt?.ToString("dd/MM/yyyy HH:mm") ?? TranslationService.GetTranslation("drawer.status.maiEffettuato"))"
                                  Label="@TranslationService.GetTranslation("drawer.field.ultimoAccesso")"
                                  Variant="Variant.Outlined"
                                  ReadOnly="true"
                                  aria-label="@TranslationService.GetTranslation("drawer.aria.dataOraUltimoAccesso")" />
                </MudItem>
            }
        </MudGrid>
    </ViewContent>
    
</EntityDrawer>

@code {
    private UserManagementDto _model = new();
    private string? _customTitle;
    
    private List<TenantResponseDto> _tenants = new();
    private readonly List<string> _availableRoles = new() { "User", "Manager", "Admin" };
    private Dictionary<string, bool> _selectedRoles = new();

    /// <summary>
    /// Whether the drawer is open.
    /// </summary>
    [Parameter] public bool IsOpen { get; set; }
    
    /// <summary>
    /// Event callback for when IsOpen changes.
    /// </summary>
    [Parameter] public EventCallback<bool> IsOpenChanged { get; set; }
    
    /// <summary>
    /// The current mode of the drawer.
    /// </summary>
    [Parameter] public EntityDrawerMode Mode { get; set; } = EntityDrawerMode.Create;
    
    /// <summary>
    /// Event callback for when Mode changes.
    /// </summary>
    [Parameter] public EventCallback<EntityDrawerMode> ModeChanged { get; set; }
    
    /// <summary>
    /// The user being edited/viewed (for Edit/View modes).
    /// </summary>
    [Parameter] public UserManagementDto? OriginalUser { get; set; }
    
    /// <summary>
    /// Whether editing is allowed.
    /// </summary>
    [Parameter] public bool AllowEdit { get; set; } = true;
    
    /// <summary>
    /// Event callback when a user is created.
    /// </summary>
    [Parameter] public EventCallback<UserManagementDto> OnUserCreated { get; set; }
    
    /// <summary>
    /// Event callback when a user is updated.
    /// </summary>
    [Parameter] public EventCallback<UserManagementDto> OnUserUpdated { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _tenants = (await SuperAdminService.GetTenantsAsync()).ToList();
            InitializeRoles();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to initialize UserDrawer");
            Snackbar.Add($"Errore nel caricamento dei dati: {ex.Message}", Severity.Error);
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Mode == EntityDrawerMode.Edit && OriginalUser != null)
        {
            // Initialize model for editing
            _model = new UserManagementDto
            {
                Id = OriginalUser.Id,
                FirstName = OriginalUser.FirstName,
                LastName = OriginalUser.LastName,
                Username = OriginalUser.Username,
                Email = OriginalUser.Email,
                TenantId = OriginalUser.TenantId,
                TenantName = OriginalUser.TenantName,
                IsActive = OriginalUser.IsActive,
                Roles = OriginalUser.Roles.ToList(),
                CreatedAt = OriginalUser.CreatedAt,
                LastLoginAt = OriginalUser.LastLoginAt
            };
            
            InitializeRoles();
            foreach (var role in OriginalUser.Roles)
            {
                if (_selectedRoles.ContainsKey(role))
                    _selectedRoles[role] = true;
            }
            
            _customTitle = TranslationService.GetTranslation("drawer.title.modificaUtente", OriginalUser.FirstName, OriginalUser.LastName);
        }
        else if (Mode == EntityDrawerMode.View && OriginalUser != null)
        {
            _customTitle = TranslationService.GetTranslation("drawer.title.visualizzaUtente", OriginalUser.FirstName, OriginalUser.LastName);
        }
        else if (Mode == EntityDrawerMode.Create)
        {
            // Reset for create mode and pre-select tenant from context
            _model = new UserManagementDto();
            InitializeRoles();
            _selectedRoles["User"] = true; // Default role
            
            // Pre-select tenant from context if available
            var currentTenantId = TenantContextService.CurrentTenantId;
            if (currentTenantId.HasValue && _tenants.Any(t => t.Id == currentTenantId))
            {
                _model.TenantId = currentTenantId;
            }
            
            _customTitle = null;
        }
        
        await Task.CompletedTask;
    }

    private void InitializeRoles()
    {
        _selectedRoles.Clear();
        foreach (var role in _availableRoles)
        {
            _selectedRoles[role] = false;
        }
    }

    private async Task HandleSave()
    {
        try
        {
            // Additional validation for business rules
            if (!ValidateBusinessRules())
            {
                return;
            }

            // Update roles from selection
            var roles = _selectedRoles.Where(kvp => kvp.Value).Select(kvp => kvp.Key).ToList();
            
            if (Mode == EntityDrawerMode.Create)
            {
                var createDto = new CreateUserManagementDto
                {
                    FirstName = _model.FirstName,
                    LastName = _model.LastName,
                    Username = _model.Username,
                    Email = _model.Email,
                    TenantId = _model.TenantId!.Value, // EntityDrawer form validation ensures this is not null
                    Roles = roles
                };
                
                var newUser = await SuperAdminService.CreateUserAsync(createDto);
                Snackbar.Add(TranslationService.GetTranslation("drawer.success.userCreated", "Utente creato con successo! Una password temporanea è stata inviata via email."), Severity.Success);
                
                if (OnUserCreated.HasDelegate)
                {
                    await OnUserCreated.InvokeAsync(newUser);
                }
            }
            else if (Mode == EntityDrawerMode.Edit && OriginalUser != null)
            {
                var updateDto = new UpdateUserManagementDto
                {
                    FirstName = _model.FirstName,
                    LastName = _model.LastName,
                    Email = _model.Email,
                    IsActive = _model.IsActive,
                    Roles = roles
                };
                
                var updatedUser = await SuperAdminService.UpdateUserAsync(OriginalUser.Id, updateDto);
                Snackbar.Add(TranslationService.GetTranslation("drawer.success.userUpdated", "Utente aggiornato con successo!"), Severity.Success);
                
                if (OnUserUpdated.HasDelegate)
                {
                    await OnUserUpdated.InvokeAsync(updatedUser);
                }
            }
            
            await HandleClose();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to save user");
            var message = Mode == EntityDrawerMode.Create ? 
                TranslationService.GetTranslation("drawer.error.userCreationFailed", "Errore nella creazione dell'utente") : 
                TranslationService.GetTranslation("drawer.error.userUpdateFailed", "Errore nell'aggiornamento dell'utente");
            Snackbar.Add($"{message}: {ex.Message}", Severity.Error);
        }
    }

    private async Task HandleCancel()
    {
        await HandleClose();
    }

    private async Task HandleClose()
    {
        IsOpen = false;
        await IsOpenChanged.InvokeAsync(IsOpen);
        
        // Reset state more thoroughly like TenantDrawer
        _model = new UserManagementDto();
        InitializeRoles();
        _customTitle = null;
    }

    private bool ValidateBusinessRules()
    {
        var isValid = true;

        // Validate at least one role is selected
        if (!_selectedRoles.Any(kvp => kvp.Value))
        {
            Snackbar.Add(TranslationService.GetTranslation("drawer.error.ruoloObbligatorio", "È necessario selezionare almeno un ruolo"), Severity.Error);
            isValid = false;
        }

        return isValid;
    }

    private Color GetRoleColor(string role)
    {
        return role.ToLower() switch
        {
            "superadmin" => Color.Error,
            "admin" => Color.Warning,
            "manager" => Color.Info,
            "user" => Color.Primary,
            _ => Color.Default
        };
    }

    private string GetRoleDescription(string role)
    {
        return role.ToLower() switch
        {
            "user" => TranslationService.GetTranslation("drawer.role.user"),
            "manager" => TranslationService.GetTranslation("drawer.role.manager"),
            "admin" => TranslationService.GetTranslation("drawer.role.admin"),
            "superadmin" => TranslationService.GetTranslation("drawer.role.superadmin"),
            _ => TranslationService.GetTranslation("drawer.role.default")
        };
    }

    // Immediate validation methods for fields
    private void ValidateFirstName()
    {
        if (string.IsNullOrWhiteSpace(_model.FirstName))
        {
            Snackbar.Add(TranslationService.GetTranslation("drawer.error.nomeObbligatorio", "Il nome è obbligatorio"), Severity.Warning);
        }
        else if (_model.FirstName.Length < 2)
        {
            Snackbar.Add(TranslationService.GetTranslation("drawer.error.nomeMinLength", "Il nome deve essere di almeno 2 caratteri"), Severity.Warning);
        }
    }

    private void ValidateLastName()
    {
        if (string.IsNullOrWhiteSpace(_model.LastName))
        {
            Snackbar.Add(TranslationService.GetTranslation("drawer.error.cognomeObbligatorio", "Il cognome è obbligatorio"), Severity.Warning);
        }
        else if (_model.LastName.Length < 2)
        {
            Snackbar.Add(TranslationService.GetTranslation("drawer.error.cognomeMinLength", "Il cognome deve essere di almeno 2 caratteri"), Severity.Warning);
        }
    }

    private void ValidateUsername()
    {
        if (string.IsNullOrWhiteSpace(_model.Username))
        {
            Snackbar.Add(TranslationService.GetTranslation("drawer.error.usernameObbligatorio", "L'username è obbligatorio"), Severity.Warning);
        }
        else if (_model.Username.Length < 3)
        {
            Snackbar.Add(TranslationService.GetTranslation("drawer.error.usernameMinLength", "L'username deve essere di almeno 3 caratteri"), Severity.Warning);
        }
    }

    private void ValidateEmail()
    {
        if (string.IsNullOrWhiteSpace(_model.Email))
        {
            Snackbar.Add(TranslationService.GetTranslation("drawer.error.emailObbligatoria", "L'email è obbligatoria"), Severity.Warning);
        }
        else if (!IsValidEmail(_model.Email))
        {
            Snackbar.Add(TranslationService.GetTranslation("drawer.error.emailInvalida", "L'email inserita non è valida"), Severity.Warning);
        }
    }

    private bool IsValidEmail(string email)
    {
        try
        {
            var addr = new System.Net.Mail.MailAddress(email);
            return addr.Address == email;
        }
        catch
        {
            return false;
        }
    }
}