@inherits ErrorBoundaryBase
@using Microsoft.Extensions.Logging
@inject ILogger<ErrorBoundary> Logger
@inject ITranslationService TranslationService

<MudAlert Severity="Severity.Error" Variant="Variant.Outlined">
    @if (CurrentException is not null)
    {
        <div class="d-flex align-center">
            <MudIcon Icon="@Icons.Material.Filled.Error" Class="mr-3" />
            <div>
                <MudText Typo="Typo.h6" Class="mb-1">@TranslationService.GetTranslation("error.title", "Si è verificato un errore")</MudText>
                <MudText Typo="Typo.body2" Class="mb-2">@GetUserFriendlyMessage(CurrentException)</MudText>
                @if (ShowDetails)
                {
                    <MudCollapse Expanded="ShowDetails">
                        <div class="mt-2">
                            <MudText Typo="Typo.caption">@TranslationService.GetTranslation("error.technicalDetails", "Dettagli tecnici")</MudText>
                            <div class="mt-1">
                                <MudText Typo="Typo.caption"><strong>@TranslationService.GetTranslation("error.type", "Tipo"):</strong> @CurrentException.GetType().Name</MudText>
                                <MudText Typo="Typo.caption"><strong>@TranslationService.GetTranslation("error.message", "Messaggio"):</strong> @CurrentException.Message</MudText>
                                @if (!string.IsNullOrWhiteSpace(CurrentException.StackTrace))
                                {
                                    <MudText Typo="Typo.caption"><strong>@TranslationService.GetTranslation("error.stackTrace", "Stack Trace"):</strong></MudText>
                                    <MudText Typo="Typo.caption" Style="font-family: monospace; white-space: pre-wrap; font-size: 0.75rem;">@CurrentException.StackTrace</MudText>
                                }
                            </div>
                        </div>
                    </MudCollapse>
                }
                <div class="mt-3">
                    <MudButton Variant="Variant.Filled" 
                              Color="Color.Primary" 
                              StartIcon="@Icons.Material.Filled.Refresh"
                              OnClick="Recover">
                        @TranslationService.GetTranslation("error.retry", "Riprova")
                    </MudButton>
                    <MudButton Variant="Variant.Text" 
                              Color="Color.Primary"
                              Class="ml-2"
                              OnClick="() => ShowDetails = !ShowDetails">
                        @(ShowDetails ? TranslationService.GetTranslation("error.hideDetails", "Nascondi") : TranslationService.GetTranslation("error.showDetails", "Mostra")) dettagli
                    </MudButton>
                </div>
            </div>
        </div>
    }
</MudAlert>

@code {
    [Parameter] public bool ShowDetails { get; set; } = false;
    [Parameter] public EventCallback<Exception> OnError { get; set; }

    protected override async Task OnErrorAsync(Exception exception)
    {
        Logger.LogError(exception, "An unhandled error occurred in the UI");
        
        // Notify parent component if callback is provided
        if (OnError.HasDelegate)
        {
            await OnError.InvokeAsync(exception);
        }
    }

    private string GetUserFriendlyMessage(Exception exception)
    {
        return exception switch
        {
            HttpRequestException => TranslationService.GetTranslation("error.connectionError", "Errore di connessione al server. Verificare la connessione di rete."),
            TaskCanceledException => TranslationService.GetTranslation("error.requestTimeout", "La richiesta ha impiegato troppo tempo. Riprovare."),
            UnauthorizedAccessException => TranslationService.GetTranslation("error.unauthorizedOperation", "Non si dispone delle autorizzazioni necessarie per questa operazione."),
            ArgumentException => TranslationService.GetTranslation("error.invalidData", "Dati non validi forniti."),
            InvalidOperationException => TranslationService.GetTranslation("error.invalidOperation", "Operazione non valida in questo momento."),
            _ => TranslationService.GetTranslation("error.unexpectedError", "Si è verificato un errore imprevisto. Riprovare o contattare l'assistenza se il problema persiste.")
        };
    }
}