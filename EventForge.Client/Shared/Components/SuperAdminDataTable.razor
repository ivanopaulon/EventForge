@using MudBlazor
@typeparam T
@inject ITranslationService TranslationService

<!-- Enhanced data table with MudPaper container -->
<MudPaper Elevation="2" Class="border-rounded mb-1">
    <MudCardHeader Class="pa-2">
        <CardHeaderContent>
            <MudText Typo="Typo.h6">
                <MudIcon Icon="@TableIcon" Class="mr-2" />
                @TableTitle
                @if (ShowItemCount)
                {
                    <MudText Typo="Typo.body2" Class="mud-text-secondary ml-2" Component="span">
                        (@TotalItems @TranslationService.GetTranslation("superAdmin.itemsFound", "elementi trovati"))
                    </MudText>
                }
            </MudText>
        </CardHeaderContent>
        <CardHeaderActions>
            @if (ToolbarContent != null)
            {
                @ToolbarContent
            }
        </CardHeaderActions>
    </MudCardHeader>
    <MudCardContent Class="pa-1">
        @if (IsLoading)
        {
            <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="mt-4" />
        }
        else
        {
            <MudTable T="T" 
                      Items="@Items" 
                      Hover="true" 
                      Striped="true"
                      Loading="@IsLoading"
                      LoadingProgressColor="Color.Info"
                      SortLabel="@TranslationService.GetTranslation("tooltip.sortColumn", "Ordina colonna")"
                      AllowUnsorted="false"
                      Dense="@IsDense"
                      Breakpoint="@ResponsiveBreakpoint"
                      FixedHeader="@FixedHeader"
                      Height="@TableHeight"
                      ServerData="@ServerReload"
                      @ref="@_table">
                
                <ToolBarContent>
                    @if (TableToolbarContent != null)
                    {
                        @TableToolbarContent
                    }
                </ToolBarContent>

                <HeaderContent>
                    @HeaderContent
                </HeaderContent>
                
                <RowTemplate>
                    @RowTemplate(context)
                </RowTemplate>
                
                <NoRecordsContent>
                    <div class="text-center pa-8">
                        <MudIcon Icon="@NoDataIcon" Size="Size.Large" Class="mb-4 mud-text-secondary" />
                        <MudText Typo="Typo.h6" Class="mb-2">
                            @NoDataMessage
                        </MudText>
                        @if (NoDataActions != null)
                        {
                            @NoDataActions
                        }
                    </div>
                </NoRecordsContent>

                <LoadingContent>
                    <div class="text-center pa-8">
                        <MudProgressCircular Size="Size.Medium" Indeterminate="true" />
                        <MudText Typo="Typo.body1" Class="mt-4">
                            @TranslationService.GetTranslation("common.loading", "Caricamento in corso...")
                        </MudText>
                    </div>
                </LoadingContent>

                <PagerContent>
                    @if (EnablePagination)
                    {
                        <MudTablePager PageSizeOptions="@PageSizeOptions" 
                                       HorizontalAlignment="HorizontalAlignment.Right"
                                       InfoFormat="@TranslationService.GetTranslation("table.pagerInfo", "{first_item}-{last_item} di {all_items}")"
                                       RowsPerPageString="@TranslationService.GetTranslation("table.rowsPerPage", "Righe per pagina")" />
                    }
                </PagerContent>
            </MudTable>
        }
    </MudCardContent>
</MudPaper>

@code {
    private MudTable<T>? _table;

    /// <summary>
    /// Title to display in the table header.
    /// </summary>
    [Parameter, EditorRequired] public string TableTitle { get; set; } = string.Empty;

    /// <summary>
    /// Icon to display next to the table title.
    /// </summary>
    [Parameter] public string TableIcon { get; set; } = Icons.Material.Filled.TableChart;

    /// <summary>
    /// Items to display in the table.
    /// </summary>
    [Parameter] public IEnumerable<T> Items { get; set; } = Enumerable.Empty<T>();

    /// <summary>
    /// Whether the table is currently loading.
    /// </summary>
    [Parameter] public bool IsLoading { get; set; } = false;

    /// <summary>
    /// Whether to show the item count in the header.
    /// </summary>
    [Parameter] public bool ShowItemCount { get; set; } = true;

    /// <summary>
    /// Total number of items (for pagination info).
    /// </summary>
    [Parameter] public int TotalItems { get; set; } = 0;

    /// <summary>
    /// Whether to use dense table layout.
    /// </summary>
    [Parameter] public bool IsDense { get; set; } = true;

    /// <summary>
    /// Responsive breakpoint for mobile view.
    /// </summary>
    [Parameter] public Breakpoint ResponsiveBreakpoint { get; set; } = Breakpoint.Sm;

    /// <summary>
    /// Whether to enable fixed header.
    /// </summary>
    [Parameter] public bool FixedHeader { get; set; } = false;

    /// <summary>
    /// Height for the table with fixed header.
    /// </summary>
    [Parameter] public string? TableHeight { get; set; }

    /// <summary>
    /// Whether to enable server-side pagination.
    /// </summary>
    [Parameter] public bool EnablePagination { get; set; } = true;

    /// <summary>
    /// Page size options for pagination.
    /// </summary>
    [Parameter] public int[] PageSizeOptions { get; set; } = { 10, 25, 50, 100 };

    /// <summary>
    /// Server data loading function for pagination and sorting.
    /// </summary>
    [Parameter] public Func<TableState, CancellationToken, Task<TableData<T>>>? ServerReload { get; set; }

    /// <summary>
    /// Icon to display when no data is available.
    /// </summary>
    [Parameter] public string NoDataIcon { get; set; } = Icons.Material.Filled.TableChart;

    /// <summary>
    /// Message to display when no data is available.
    /// </summary>
    [Parameter] public string NoDataMessage { get; set; } = string.Empty;

    /// <summary>
    /// Content to render in the toolbar area of the card header.
    /// </summary>
    [Parameter] public RenderFragment? ToolbarContent { get; set; }

    /// <summary>
    /// Content to render in the table's toolbar area.
    /// </summary>
    [Parameter] public RenderFragment? TableToolbarContent { get; set; }

    /// <summary>
    /// Content to render for table headers.
    /// </summary>
    [Parameter] public RenderFragment? HeaderContent { get; set; }

    /// <summary>
    /// Template for rendering table rows.
    /// </summary>
    [Parameter] public RenderFragment<T>? RowTemplate { get; set; }

    /// <summary>
    /// Actions to show when no data is available.
    /// </summary>
    [Parameter] public RenderFragment? NoDataActions { get; set; }

    protected override void OnInitialized()
    {
        // Set default no data message if not provided
        if (string.IsNullOrEmpty(NoDataMessage))
        {
            NoDataMessage = TranslationService.GetTranslation("table.noData", "Nessun dato disponibile");
        }

        // Calculate total items if not set and using static data
        if (TotalItems == 0 && Items != null)
        {
            TotalItems = Items.Count();
        }
    }

    /// <summary>
    /// Reload the table data (useful for refreshing server-side data).
    /// </summary>
    public async Task ReloadServerData()
    {
        if (_table != null)
        {
            await _table.ReloadServerData();
        }
    }
}