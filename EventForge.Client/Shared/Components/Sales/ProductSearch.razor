@using EventForge.DTOs.Products
@using EventForge.Client.Services
@inject ISnackbar Snackbar
@inject IProductService ProductService
@inject ILogger<ProductSearch> Logger

<MudPaper Class="pa-4 product-search" Elevation="2">
    <div class="d-flex align-center mb-3">
        <MudIcon Icon="@Icons.Material.Filled.Search" Class="mr-2" Color="Color.Primary" />
        <MudText Typo="Typo.h6">Cerca Prodotto</MudText>
    </div>

    <!-- Search Field -->
    <MudTextField @bind-Value="_searchText"
                  Label="Cerca prodotto"
                  Placeholder="Nome, codice o barcode..."
                  Variant="Variant.Outlined"
                  Margin="Margin.Dense"
                  Adornment="Adornment.Start"
                  AdornmentIcon="@Icons.Material.Filled.Search"
                  OnKeyUp="OnSearchKeyUp"
                  DebounceInterval="300"
                  Class="mb-3"
                  Immediate="true" />

    <!-- Search Results -->
    @if (_isSearching)
    {
        <div class="d-flex justify-center pa-4">
            <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
        </div>
    }
    else if (_searchResults?.Any() == true)
    {
        <MudText Typo="Typo.caption" Color="Color.Secondary" Class="mb-2">
            Trovati @_searchResults.Count risultati
        </MudText>
        
        <div class="search-results">
            @foreach (var product in _searchResults)
            {
                <MudCard Class="mb-2 search-result-card" @onclick="@(() => SelectProduct(product))">
                    <MudCardContent Class="pa-3">
                        <div class="d-flex align-center">
                            @if (!string.IsNullOrEmpty(product.ImageUrl))
                            {
                                <MudAvatar Image="@product.ImageUrl" Size="Size.Medium" Class="mr-3" />
                            }
                            else
                            {
                                <MudAvatar Color="Color.Primary" Size="Size.Medium" Class="mr-3">
                                    <MudIcon Icon="@Icons.Material.Filled.Inventory" />
                                </MudAvatar>
                            }
                            
                            <div class="flex-grow-1">
                                <MudText Typo="Typo.body1"><strong>@product.Name</strong></MudText>
                                <MudText Typo="Typo.caption" Color="Color.Secondary">
                                    Cod: @product.Code @(string.IsNullOrEmpty(product.ShortDescription) ? "" : " | " + product.ShortDescription)
                                </MudText>
                            </div>
                            
                            <div class="text-right">
                                @if (product.DefaultPrice.HasValue)
                                {
                                    <MudText Typo="Typo.h6" Color="Color.Primary">
                                        â‚¬@product.DefaultPrice.Value.ToString("F2")
                                    </MudText>
                                }
                                else
                                {
                                    <MudText Typo="Typo.caption" Color="Color.Warning">
                                        Prezzo non disponibile
                                    </MudText>
                                }
                            </div>
                        </div>
                    </MudCardContent>
                </MudCard>
            }
        </div>
    }
    else if (!string.IsNullOrWhiteSpace(_searchText) && _searchText.Length >= 2)
    {
        <MudAlert Severity="Severity.Info" Dense="true">
            Nessun prodotto trovato per "@_searchText"
        </MudAlert>
    }
    else
    {
        <MudAlert Severity="Severity.Normal" Dense="true" Icon="@Icons.Material.Filled.Info">
            Inserisci almeno 2 caratteri per cercare un prodotto
        </MudAlert>
    }

    <!-- Quick Actions -->
    @if (ShowQuickActions && _searchResults?.Any() != true)
    {
        <MudDivider Class="my-3" />
        <MudText Typo="Typo.subtitle2" Class="mb-2">Azioni Rapide</MudText>
        <div class="d-flex ga-2">
            <MudButton Variant="Variant.Outlined" 
                       Size="Size.Small"
                       StartIcon="@Icons.Material.Filled.QrCodeScanner"
                       OnClick="ScanBarcode">
                Scansiona Barcode
            </MudButton>
            <MudButton Variant="Variant.Outlined" 
                       Size="Size.Small"
                       StartIcon="@Icons.Material.Filled.Clear"
                       OnClick="ClearSearch"
                       Disabled="string.IsNullOrEmpty(_searchText)">
                Pulisci
            </MudButton>
        </div>
    }
</MudPaper>

@code {
    [Parameter]
    public bool ShowQuickActions { get; set; } = true;

    [Parameter]
    public EventCallback<ProductDto> OnProductSelected { get; set; }

    private string _searchText = string.Empty;
    private bool _isSearching = false;
    private List<ProductDto>? _searchResults;

    private async Task OnSearchKeyUp(KeyboardEventArgs e)
    {
        // Handle Enter key for quick search
        if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(_searchText))
        {
            await PerformSearch();
        }
        // Auto-search when typing (with debounce via MudTextField)
        else if (_searchText.Length >= 2)
        {
            await PerformSearch();
        }
        else
        {
            _searchResults = null;
        }
    }

    private async Task PerformSearch()
    {
        _isSearching = true;
        try
        {
            // Search products using the actual API
            var result = await ProductService.GetProductsAsync(page: 1, pageSize: 20);
            
            if (result != null && result.Items != null)
            {
                // Filter by search text
                _searchResults = result.Items
                    .Where(p => p.Name.Contains(_searchText, StringComparison.OrdinalIgnoreCase) ||
                               p.Code.Contains(_searchText, StringComparison.OrdinalIgnoreCase))
                    .ToList();
                
                Logger.LogInformation($"Found {_searchResults.Count} products matching '{_searchText}'");
            }
            else
            {
                _searchResults = new List<ProductDto>();
                Logger.LogWarning("No products returned from API");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error searching products: {ex.Message}");
            Snackbar.Add($"Errore durante la ricerca: {ex.Message}", Severity.Error);
            _searchResults = new List<ProductDto>();
        }
        finally
        {
            _isSearching = false;
        }
    }

    private async Task SelectProduct(ProductDto product)
    {
        await OnProductSelected.InvokeAsync(product);
        
        // Clear search after selection
        _searchText = string.Empty;
        _searchResults = null;
    }

    private async Task ScanBarcode()
    {
        // TODO: Implement barcode scanner integration
        Snackbar.Add("Scanner barcode non ancora implementato", Severity.Info);
    }

    private void ClearSearch()
    {
        _searchText = string.Empty;
        _searchResults = null;
    }
}
