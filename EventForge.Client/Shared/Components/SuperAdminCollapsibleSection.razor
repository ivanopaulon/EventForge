@using MudBlazor
@inject ITranslationService TranslationService

<!-- Collapsible Section with MudPaper container and border-rounded styling -->
<MudPaper Elevation="@Elevation" Class="@($"border-rounded pa-2 mb-1 {Class}")">
    <!-- Clickable header to toggle expansion -->
    <div style="cursor: pointer;" 
         @onclick="@(() => ToggleExpanded())" 
         class="d-flex align-center pa-2 hover:bg-gray-100">
        <MudIcon Icon="@SectionIcon" Class="mr-2" />
        <MudText Typo="Typo.h6" Class="flex-grow-1">
            @SectionTitle
        </MudText>
        <MudIconButton Icon="@(IsExpanded ? Icons.Material.Outlined.ExpandLess : Icons.Material.Outlined.ExpandMore)"
                       Size="Size.Small"
                       Color="Color.Inherit"
                       aria-label="@TranslationService.GetTranslation("tooltip.toggleSection", "Mostra/Nascondi sezione {0}", SectionTitle)" />
    </div>
    
    <!-- Collapsible content -->
    <MudCollapse Expanded="IsExpanded">
        <div class="pa-2">
            @ChildContent
        </div>
    </MudCollapse>
</MudPaper>

@code {
    /// <summary>
    /// Title to display in the section header.
    /// </summary>
    [Parameter, EditorRequired] public string SectionTitle { get; set; } = string.Empty;

    /// <summary>
    /// Icon to display next to the section title.
    /// </summary>
    [Parameter] public string SectionIcon { get; set; } = Icons.Material.Outlined.ExpandMore;

    /// <summary>
    /// Whether the section is expanded by default. Defaults to false as per issue requirements.
    /// </summary>
    [Parameter] public bool IsExpanded { get; set; } = false;

    /// <summary>
    /// Event callback when the expansion state changes.
    /// </summary>
    [Parameter] public EventCallback<bool> IsExpandedChanged { get; set; }

    /// <summary>
    /// Additional CSS classes to apply to the container.
    /// </summary>
    [Parameter] public string Class { get; set; } = string.Empty;

    /// <summary>
    /// Elevation level for the MudPaper container.
    /// </summary>
    [Parameter] public int Elevation { get; set; } = 1;

    /// <summary>
    /// Content to render inside the collapsible section.
    /// </summary>
    [Parameter] public RenderFragment? ChildContent { get; set; }

    /// <summary>
    /// Toggle the expanded state of the section.
    /// </summary>
    private async Task ToggleExpanded()
    {
        IsExpanded = !IsExpanded;
        await IsExpandedChanged.InvokeAsync(IsExpanded);
    }
}