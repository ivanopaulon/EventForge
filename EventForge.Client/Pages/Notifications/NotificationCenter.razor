@page "/notifications"
@using Microsoft.AspNetCore.Authorization
@using EventForge.DTOs.Notifications
@attribute [Authorize]
@inject IAuthService AuthService
@inject INotificationService NotificationService
@inject SignalRService SignalRService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject ITranslationService TranslationService
@inject IHelpService HelpService
@implements IDisposable

<PageTitle>@TranslationService.GetTranslation("notifications.title", "Centro Notifiche - EventForge")</PageTitle>

<!-- Main container following existing project pattern -->
<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <MudGrid Spacing="4">
        
        <!-- Page Header Card -->
        <MudItem xs="12">
            <MudCard Class="pa-4 pa-sm-6 pa-md-8" Elevation="4" id="notification-header">
                <MudCardContent>
                    <header class="text-center mb-6">
                        <div class="d-flex justify-center align-center mb-4">
                            <MudText Typo="Typo.h3" 
                                     Component="h1" 
                                     Align="Align.Center" 
                                     Class="mr-2"
                                     aria-label="@TranslationService.GetTranslation("notifications.pageTitle", "Centro Notifiche")">
                                <MudIcon Icon="@Icons.Material.Filled.Notifications" 
                                         Class="mr-2" 
                                         Size="Size.Large"
                                         aria-hidden="true" />
                                @TranslationService.GetTranslation("notifications.pageTitle", "Centro Notifiche")
                            </MudText>
                            <HelpTooltip TranslationKey="help.tooltips.notifications.center"
                                        FallbackText="View and manage all your notifications in one place"
                                        ShowHelpIcon="true"
                                        Placement="Placement.Right" />
                        </div>
                        <MudText Typo="Typo.body1" 
                                 Align="Align.Center" 
                                 Color="Color.Secondary">
                            @TranslationService.GetTranslation("notifications.subtitle", "Gestisci le tue notifiche e preferenze")
                        </MudText>
                        
                        <!-- Quick Start Help Buttons -->
                        <div class="d-flex justify-center ga-2 mt-4">
                            <MudButton Variant="Variant.Text" 
                                       Color="Color.Info"
                                       Size="Size.Small"
                                       StartIcon="@Icons.Material.Filled.Help"
                                       OnClick="@(() => _showOnboarding = true)">
                                @TranslationService.GetTranslation("help.quickStart", "Quick Start")
                            </MudButton>
                            <MudButton Variant="Variant.Text" 
                                       Color="Color.Info"
                                       Size="Size.Small"
                                       StartIcon="@Icons.Material.Filled.Tour"
                                       OnClick="@StartWalkthrough">
                                @TranslationService.GetTranslation("help.takeATour", "Take a Tour")
                            </MudButton>
                        </div>
                    </header>
                </MudCardContent>
            </MudCard>
        </MudItem>

        <!-- Notification Actions Toolbar -->
        <MudItem xs="12">
            <MudCard Elevation="2" Class="pa-4">
                <MudCardContent>
                    <div class="d-flex justify-space-between align-center mb-4">
                        <MudText Typo="Typo.h6" Class="d-flex align-center">
                            <MudIcon Icon="@Icons.Material.Filled.Settings" 
                                     Class="mr-2" 
                                     Color="Color.Primary"
                                     aria-hidden="true" />
                            @TranslationService.GetTranslation("notifications.actions", "Azioni Notifiche")
                        </MudText>
                        <HelpTooltip TranslationKey="help.tooltips.notifications.markRead"
                                    FallbackText="Mark selected notifications as read"
                                    ShowHelpIcon="true"
                                    Placement="Placement.Left" />
                    </div>

                    <!-- Action buttons following MudBlazor pattern -->
                    <div class="d-flex justify-start flex-wrap ga-2 mb-4 notification-actions">
                        <HelpTooltip TranslationKey="help.tooltips.notifications.markRead"
                                    FallbackText="Mark all notifications as read at once">
                            <MudButton Variant="Variant.Filled"
                                       Color="Color.Primary"
                                       StartIcon="@Icons.Material.Filled.DoneAll"
                                       OnClick="@MarkAllAsReadAsync"
                                       Disabled="@_isLoading">
                                @TranslationService.GetTranslation("notifications.markAllRead", "Segna tutte come lette")
                            </MudButton>
                        </HelpTooltip>
                        
                        <HelpTooltip TranslationKey="help.tooltips.notifications.delete"
                                    FallbackText="Archive read notifications to clean up your list">
                            <MudButton Variant="Variant.Outlined"
                                       Color="Color.Secondary"
                                       StartIcon="@Icons.Material.Filled.Archive"
                                       OnClick="@ArchiveAllReadAsync"
                                       Disabled="@_isLoading">
                                @TranslationService.GetTranslation("notifications.archiveRead", "Archivia lette")
                            </MudButton>
                        </HelpTooltip>

                        <HelpTooltip TranslationKey="help.tooltips.notifications.refresh"
                                    FallbackText="Refresh the notification list manually"
                                    Placement="Placement.Top">
                            <MudButton Variant="Variant.Text"
                                       Color="Color.Info"
                                       StartIcon="@Icons.Material.Filled.Refresh"
                                       OnClick="@RefreshNotificationsAsync"
                                       Disabled="@_isLoading">
                                @TranslationService.GetTranslation("notifications.refresh", "Aggiorna")
                            </MudButton>
                        </HelpTooltip>

                        <!-- Preferences Button -->
                        <HelpTooltip TranslationKey="help.tooltips.notifications.preferences"
                                    FallbackText="Customize your notification preferences and settings"
                                    Placement="Placement.Top">
                            <MudButton Variant="Variant.Text"
                                       Color="Color.Default"
                                       StartIcon="@Icons.Material.Filled.Settings"
                                       OnClick="@(() => NavigationManager.NavigateTo("/notifications/preferences"))">
                                @TranslationService.GetTranslation("notifications.preferences", "Preferenze")
                            </MudButton>
                        </HelpTooltip>

                        <!-- Help tooltip following existing pattern -->
                        <MudTooltip Text="@TranslationService.GetTranslation("notifications.helpTooltip", "Le notifiche vengono aggiornate in tempo reale")">
                            <MudIconButton Icon="@Icons.Material.Filled.Help" 
                                           Size="Size.Small"
                                           Color="Color.Info"
                                           aria-label="@TranslationService.GetTranslation("common.help", "Aiuto")" />
                        </MudTooltip>
                    </div>

                    <!-- Filter options -->
                    <MudGrid Spacing="2">
                        <MudItem xs="12" sm="6" md="3">
                            <MudSelect T="string" @bind-Value="_selectedFilter" 
                                       Label="@TranslationService.GetTranslation("notifications.filter", "Filtra per stato")" 
                                       Variant="Variant.Outlined"
                                       Clearable="true"
                                       @bind-Value:after="OnFilterChanged">
                                <MudSelectItem Value="@("")">@TranslationService.GetTranslation("notifications.allNotifications", "Tutte")</MudSelectItem>
                                <MudSelectItem Value="@("unread")">@TranslationService.GetTranslation("notifications.unreadOnly", "Non lette")</MudSelectItem>
                                <MudSelectItem Value="@("important")">@TranslationService.GetTranslation("notifications.importantOnly", "Importanti")</MudSelectItem>
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="12" sm="6" md="3">
                            <MudSelect T="string" @bind-Value="_selectedType" 
                                       Label="@TranslationService.GetTranslation("notifications.type", "Tipo notifica")" 
                                       Variant="Variant.Outlined"
                                       Clearable="true">
                                <MudSelectItem Value="@("")">@TranslationService.GetTranslation("notifications.allTypes", "Tutti i tipi")</MudSelectItem>
                                <MudSelectItem Value="@("event")">@TranslationService.GetTranslation("notifications.eventNotifications", "Eventi")</MudSelectItem>
                                <MudSelectItem Value="@("system")">@TranslationService.GetTranslation("notifications.systemNotifications", "Sistema")</MudSelectItem>
                                <MudSelectItem Value="@("chat")">@TranslationService.GetTranslation("notifications.chatNotifications", "Chat")</MudSelectItem>
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="12" sm="6" md="3">
                            <MudTextField @bind-Value="_searchText"
                                          Label="@TranslationService.GetTranslation("notifications.search", "Cerca notifiche")"
                                          Variant="Variant.Outlined"
                                          StartIcon="@Icons.Material.Filled.Search"
                                          Clearable="true"
                                          Immediate="true"
                                          DebounceInterval="300" />
                        </MudItem>
                        <MudItem xs="12" sm="6" md="3" Class="d-flex align-center">
                            <MudSwitch @bind-Value="_enableGrouping"
                                       Label="@TranslationService.GetTranslation("notifications.grouping", "Raggruppa")"
                                       Color="Color.Primary"
                                       @bind-Value:after="OnGroupingChanged" />
                        </MudItem>
                    </MudGrid>
                </MudCardContent>
            </MudCard>
        </MudItem>

        <!-- Notification List -->
        <MudItem xs="12">
            <MudCard Elevation="2" Class="pa-4">
                <MudCardContent>
                    <MudText Typo="Typo.h6" Class="mb-4 d-flex align-center justify-space-between">
                        <div class="d-flex align-center">
                            <MudIcon Icon="@Icons.Material.Filled.List" 
                                     Class="mr-2" 
                                     Color="Color.Primary"
                                     aria-hidden="true" />
                            @TranslationService.GetTranslation("notifications.list", "Lista Notifiche")
                        </div>
                        <!-- Notification count badge -->
                        <MudBadge Content="@_unreadCount.ToString()" 
                                  Color="Color.Error" 
                                  Overlap="true" 
                                  Bordered="true">
                            <MudIcon Icon="@Icons.Material.Filled.NotificationsActive" 
                                     Color="Color.Primary" />
                        </MudBadge>
                    </MudText>

                    <!-- Loading state -->
                    @if (_isLoading)
                    {
                        <MudProgressLinear Indeterminate="true" 
                                           Color="Color.Primary" 
                                           Class="mb-4" />
                        <MudText Align="Align.Center" Class="pa-4">
                            @TranslationService.GetTranslation("common.loading", "Caricamento...")
                        </MudText>
                    }
                    else if (_notifications?.Any() == true)
                    {
                        @if (_enableGrouping && _notificationGroups?.Any() == true)
                        {
                            <!-- Grouped Notification Display -->
                            <div class="notification-groups">
                                @foreach (var group in _notificationGroups)
                                {
                                    <NotificationGrouping Group="@group" 
                                                          AllNotifications="@_notifications"
                                                          OnGroupToggle="@OnGroupToggle"
                                                          OnGroupMarkAsRead="@OnGroupMarkAsRead"
                                                          OnGroupArchive="@OnGroupArchive"
                                                          OnGroupUngroup="@OnGroupUngroup"
                                                          OnNotificationMarkAsRead="@OnNotificationMarkAsRead"
                                                          OnNotificationArchive="@OnNotificationArchive"
                                                          OnNotificationShowDetails="@OnNotificationShowDetails"
                                                          OnNotificationActionExecuted="@OnNotificationActionExecuted" />
                                }
                            </div>
                        }
                        else
                        {
                            <!-- Individual Rich Notification Cards -->
                            <div class="notification-cards">
                                @foreach (var notification in GetFilteredNotifications())
                                {
                                    <RichNotificationCard Notification="@notification"
                                                          OnMarkAsRead="@OnNotificationMarkAsRead"
                                                          OnArchive="@OnNotificationArchive"
                                                          OnShowDetails="@OnNotificationShowDetails"
                                                          OnActionExecuted="@OnNotificationActionExecuted" />
                                }
                            </div>
                        }

                        <!-- Pagination placeholder -->
                        <div class="d-flex justify-center mt-4">
                            <MudPagination Count="@_totalPages" 
                                           @bind-Selected="_currentPage" 
                                           Color="Color.Primary"
                                           Size="Size.Medium"
                                           @bind-Selected:after="(() => OnPageChanged(_currentPage))" />
                        </div>
                    }
                    else
                    {
                        <!-- Empty state -->
                        <div class="text-center pa-8">
                            <MudIcon Icon="@Icons.Material.Filled.NotificationsNone" 
                                     Size="Size.Large" 
                                     Color="Color.Tertiary" 
                                     Class="mb-4" />
                            <MudText Typo="Typo.h6" Color="Color.Tertiary">
                                @TranslationService.GetTranslation("notifications.noNotifications", "Nessuna notifica disponibile")
                            </MudText>
                            <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mt-2">
                                @TranslationService.GetTranslation("notifications.noNotificationsSubtext", "Le tue notifiche appariranno qui")
                            </MudText>
                        </div>
                    }
                </MudCardContent>
            </MudCard>
        </MudItem>

        <!-- Settings Card -->
        <MudItem xs="12">
            <MudCard Elevation="2" Class="pa-4">
                <MudCardContent>
                    <MudText Typo="Typo.h6" Class="mb-4 d-flex align-center">
                        <MudIcon Icon="@Icons.Material.Filled.Tune" 
                                 Class="mr-2" 
                                 Color="Color.Primary"
                                 aria-hidden="true" />
                        @TranslationService.GetTranslation("notifications.settings", "Impostazioni Notifiche")
                    </MudText>

                    <MudGrid Spacing="2">
                        <MudItem xs="12" sm="6">
                            <MudSwitch T="bool" 
                                       @bind-Value="_emailNotificationsEnabled"
                                       Label="@TranslationService.GetTranslation("notifications.emailEnabled", "Notifiche email")"
                                       Color="Color.Primary" />
                            <MudText Typo="Typo.caption" Color="Color.Secondary">
                                @TranslationService.GetTranslation("notifications.emailDescription", "Ricevi notifiche via email")
                            </MudText>
                        </MudItem>
                        <MudItem xs="12" sm="6">
                            <MudSwitch T="bool" 
                                       @bind-Value="_pushNotificationsEnabled"
                                       Label="@TranslationService.GetTranslation("notifications.pushEnabled", "Notifiche push")"
                                       Color="Color.Primary" />
                            <MudText Typo="Typo.caption" Color="Color.Secondary">
                                @TranslationService.GetTranslation("notifications.pushDescription", "Notifiche in tempo reale nel browser")
                            </MudText>
                        </MudItem>
                    </MudGrid>

                    <div class="mt-4">
                        <MudButton Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   StartIcon="@Icons.Material.Filled.Save"
                                   OnClick="@SaveSettingsAsync"
                                   Disabled="@_isLoading">
                            @TranslationService.GetTranslation("common.save", "Salva Impostazioni")
                        </MudButton>
                    </div>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>
</MudContainer>

<!-- Help Components -->
<OnboardingModal ComponentId="notifications" 
                 @bind-IsVisible="_showOnboarding"
                 OnOnboardingCompleted="@OnOnboardingCompleted" />

<InteractiveWalkthrough ComponentId="notifications" 
                        @bind-IsActive="_showWalkthrough"
                        OnWalkthroughCompleted="@OnWalkthroughCompleted" />

@code {
    // State variables following existing patterns
    private bool _isLoading = false;
    private string _selectedFilter = "";
    private string _selectedType = "";
    private string _searchText = "";
    private int _currentPage = 1;
    private int _totalPages = 1;
    private int _unreadCount = 0;
    private bool _emailNotificationsEnabled = true;
    private bool _pushNotificationsEnabled = true;
    private bool _enableGrouping = false;
    
    // Help system state
    private bool _showOnboarding = false;
    private bool _showWalkthrough = false;

    // Real notification data from service
    private List<NotificationResponseDto> _notifications = new();
    private List<NotificationGroupDto> _notificationGroups = new();
    private NotificationStatsDto _stats = new();
    private List<NotificationTypes> _subscriptions = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Start SignalR connections if not already started
            if (!SignalRService.IsNotificationConnected)
            {
                await SignalRService.StartNotificationConnectionAsync();
            }

            // Subscribe to real-time events
            NotificationService.NotificationReceived += OnNotificationReceived;
            NotificationService.NotificationRead += OnNotificationRead;
            NotificationService.NotificationArchived += OnNotificationArchived;
            NotificationService.StatsUpdated += OnStatsUpdated;

            // Load initial data
            await LoadNotificationsAsync();
            await LoadStatsAsync();
            await LoadSubscriptionsAsync();
            
            // Check if user needs onboarding for notifications
            await CheckOnboardingStatusAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Errore durante l'inizializzazione: {ex.Message}", Severity.Error);
        }
    }

    public void Dispose()
    {
        // Unsubscribe from events
        NotificationService.NotificationReceived -= OnNotificationReceived;
        NotificationService.NotificationRead -= OnNotificationRead;
        NotificationService.NotificationArchived -= OnNotificationArchived;
        NotificationService.StatsUpdated -= OnStatsUpdated;
    }

    #region Help System Methods

    /// <summary>
    /// Checks if user needs onboarding and shows it if required.
    /// </summary>
    private async Task CheckOnboardingStatusAsync()
    {
        try
        {
            var hasCompletedOnboarding = await HelpService.IsOnboardingStepCompletedAsync("notifications_onboarding_completed");
            if (!hasCompletedOnboarding)
            {
                // Add a small delay to ensure the page is fully loaded
                await Task.Delay(1000);
                _showOnboarding = true;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            // Non-critical error, just log it
            Console.WriteLine($"Error checking onboarding status: {ex.Message}");
        }
    }

    /// <summary>
    /// Starts the interactive walkthrough for notifications.
    /// </summary>
    private async Task StartWalkthrough()
    {
        try
        {
            _showWalkthrough = true;
            StateHasChanged();
            await Task.Delay(100); // Small delay for UI to update
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error starting walkthrough: {ex.Message}", Severity.Warning);
        }
    }

    /// <summary>
    /// Called when onboarding is completed.
    /// </summary>
    private async Task OnOnboardingCompleted()
    {
        try
        {
            await HelpService.SetOnboardingStepCompletedAsync("notifications_onboarding_completed");
            Snackbar.Add(TranslationService.GetTranslation("onboarding.completed", "Onboarding completed successfully!"), Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error completing onboarding: {ex.Message}", Severity.Warning);
        }
    }

    /// <summary>
    /// Called when walkthrough is completed.
    /// </summary>
    private async Task OnWalkthroughCompleted()
    {
        try
        {
            await HelpService.SetOnboardingStepCompletedAsync("notifications_walkthrough_completed");
            Snackbar.Add(TranslationService.GetTranslation("walkthrough.completed", "Tour completed! You're now ready to use notifications effectively."), Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error completing walkthrough: {ex.Message}", Severity.Warning);
        }
    }

    #endregion

    /// <summary>
    /// Load notifications from the API
    /// </summary>
    private async Task LoadNotificationsAsync()
    {
        _isLoading = true;
        StateHasChanged();

        try
        {
            var filterValue = _selectedFilter switch
            {
                "unread" => "unread",
                "important" => "high",
                _ => null
            };

            _notifications = await NotificationService.GetNotificationsAsync(_currentPage, 20, filterValue);
            _unreadCount = _notifications.Count(n => n.Status != NotificationStatus.Read);
            
            // Calculate total pages (assuming API returns paged results)
            _totalPages = Math.Max(1, (int)Math.Ceiling(_notifications.Count / 20.0));
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Errore nel caricamento delle notifiche: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    /// <summary>
    /// Load notification statistics
    /// </summary>
    private async Task LoadStatsAsync()
    {
        try
        {
            _stats = await NotificationService.GetNotificationStatsAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Errore nel caricamento delle statistiche: {ex.Message}", Severity.Error);
        }
    }

    /// <summary>
    /// Load notification subscriptions
    /// </summary>
    private async Task LoadSubscriptionsAsync()
    {
        try
        {
            _subscriptions = await NotificationService.GetSubscriptionsAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Errore nel caricamento delle preferenze: {ex.Message}", Severity.Error);
        }
    }

    /// <summary>
    /// Mark all notifications as read using real API
    /// </summary>
    private async Task MarkAllAsReadAsync()
    {
        _isLoading = true;
        StateHasChanged();

        try
        {
            var success = await NotificationService.MarkAllAsReadAsync();
            if (success)
            {
                // Update local state
                foreach (var notification in _notifications)
                {
                    notification.Status = NotificationStatus.Read;
                }
                _unreadCount = 0;
                
                Snackbar.Add(TranslationService.GetTranslation("notifications.allMarkedRead", "Tutte le notifiche sono state segnate come lette"), Severity.Success);
            }
            else
            {
                Snackbar.Add("Errore nell'operazione", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Errore nell'operazione: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    /// <summary>
    /// Archive all read notifications using real API
    /// </summary>
    private async Task ArchiveAllReadAsync()
    {
        try
        {
            var success = await NotificationService.ArchiveAllReadAsync();
            if (success)
            {
                // Remove archived notifications from local state
                _notifications.RemoveAll(n => n.Status == NotificationStatus.Read);
                
                Snackbar.Add(TranslationService.GetTranslation("notifications.readArchived", "Notifiche lette archiviate"), Severity.Success);
                StateHasChanged();
            }
            else
            {
                Snackbar.Add("Errore nell'archiviazione", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Errore nell'archiviazione: {ex.Message}", Severity.Error);
        }
    }

    /// <summary>
    /// Refresh notifications list
    /// </summary>
    private async Task RefreshNotificationsAsync()
    {
        await LoadNotificationsAsync();
        Snackbar.Add(TranslationService.GetTranslation("notifications.refreshed", "Notifiche aggiornate"), Severity.Info);
    }

    /// <summary>
    /// Mark single notification as read using real API
    /// </summary>
    private async Task MarkAsReadAsync(Guid notificationId)
    {
        try
        {
            var success = await NotificationService.MarkAsReadAsync(notificationId);
            if (success)
            {
                var notification = _notifications.FirstOrDefault(n => n.Id == notificationId);
                if (notification != null)
                {
                    notification.Status = NotificationStatus.Read;
                    _unreadCount = _notifications.Count(n => n.Status != NotificationStatus.Read);
                    StateHasChanged();
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Errore nell'operazione: {ex.Message}", Severity.Error);
        }
    }

    /// <summary>
    /// Archive single notification using real API
    /// </summary>
    private async Task ArchiveNotificationAsync(Guid notificationId)
    {
        try
        {
            var success = await NotificationService.ArchiveNotificationAsync(notificationId);
            if (success)
            {
                _notifications.RemoveAll(n => n.Id == notificationId);
                _unreadCount = _notifications.Count(n => n.Status != NotificationStatus.Read);
                StateHasChanged();
                
                Snackbar.Add(TranslationService.GetTranslation("notifications.archived", "Notifica archiviata"), Severity.Success);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Errore nell'archiviazione: {ex.Message}", Severity.Error);
        }
    }

    /// <summary>
    /// Show notification details in dialog
    /// </summary>
    private async Task ShowNotificationDetailsAsync(NotificationResponseDto notification)
    {
        // For now, just show a snackbar with the notification details
        Snackbar.Add($"{notification.Payload.Title}: {notification.Payload.Message}", Severity.Info);
        await Task.CompletedTask;
    }

    /// <summary>
    /// Save notification settings using real API
    /// </summary>
    private async Task SaveSettingsAsync()
    {
        _isLoading = true;
        StateHasChanged();

        try
        {
            // Update subscriptions based on settings
            var newSubscriptions = new List<NotificationTypes>();
            if (_emailNotificationsEnabled)
            {
                newSubscriptions.AddRange(Enum.GetValues<NotificationTypes>());
            }

            var success = await NotificationService.UpdateSubscriptionsAsync(newSubscriptions);
            if (success)
            {
                _subscriptions = newSubscriptions;
                Snackbar.Add(TranslationService.GetTranslation("notifications.settingsSaved", "Impostazioni salvate con successo"), Severity.Success);
            }
            else
            {
                Snackbar.Add("Errore nel salvataggio delle impostazioni", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Errore nel salvataggio: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    /// <summary>
    /// Handle filter changes
    /// </summary>
    private async Task OnFilterChanged()
    {
        _currentPage = 1;
        await LoadNotificationsAsync();
    }

    /// <summary>
    /// Handle page changes
    /// </summary>
    private async Task OnPageChanged(int page)
    {
        _currentPage = page;
        await LoadNotificationsAsync();
    }

    /// <summary>
    /// Get icon based on notification type
    /// </summary>
    private string GetNotificationIcon(NotificationTypes type) => type switch
    {
        NotificationTypes.Event => Icons.Material.Filled.Event,
        NotificationTypes.System => Icons.Material.Filled.Computer,
        NotificationTypes.User => Icons.Material.Filled.Person,
        NotificationTypes.Security => Icons.Material.Filled.Security,
        NotificationTypes.Audit => Icons.Material.Filled.Assignment,
        NotificationTypes.Marketing => Icons.Material.Filled.Campaign,
        _ => Icons.Material.Filled.Notifications
    };

    /// <summary>
    /// Get color based on notification priority
    /// </summary>
    private Color GetNotificationColor(NotificationPriority priority) => priority switch
    {
        NotificationPriority.Critical => Color.Error,
        NotificationPriority.High => Color.Warning,
        NotificationPriority.Normal => Color.Info,
        NotificationPriority.Low => Color.Default,
        _ => Color.Default
    };

    #region Real-time Event Handlers

    private void OnNotificationReceived(NotificationResponseDto notification)
    {
        // Add new notification to the beginning of the list
        _notifications.Insert(0, notification);
        
        if (notification.Status != NotificationStatus.Read)
        {
            _unreadCount++;
        }

        InvokeAsync(StateHasChanged);
        
        // Show snackbar for new notification
        InvokeAsync(() => Snackbar.Add($"Nuova notifica: {notification.Payload.Title}", Severity.Info));
    }

    private void OnNotificationRead(Guid notificationId)
    {
        var notification = _notifications.FirstOrDefault(n => n.Id == notificationId);
        if (notification != null && notification.Status != NotificationStatus.Read)
        {
            notification.Status = NotificationStatus.Read;
            _unreadCount = _notifications.Count(n => n.Status != NotificationStatus.Read);
            InvokeAsync(StateHasChanged);
        }
    }

    private void OnNotificationArchived(Guid notificationId)
    {
        _notifications.RemoveAll(n => n.Id == notificationId);
        _unreadCount = _notifications.Count(n => n.Status != NotificationStatus.Read);
        InvokeAsync(StateHasChanged);
    }

    private void OnStatsUpdated(NotificationStatsDto stats)
    {
        _stats = stats;
        InvokeAsync(StateHasChanged);
    }

    #endregion

    #region Rich Notification and Grouping Methods

    private IEnumerable<NotificationResponseDto> GetFilteredNotifications()
    {
        var filtered = _notifications.AsEnumerable();

        // Apply filters
        if (!string.IsNullOrEmpty(_selectedFilter))
        {
            filtered = _selectedFilter switch
            {
                "unread" => filtered.Where(n => n.Status != NotificationStatus.Read),
                "important" => filtered.Where(n => n.Priority == NotificationPriority.High || n.Priority == NotificationPriority.Critical),
                _ => filtered
            };
        }

        if (!string.IsNullOrEmpty(_selectedType))
        {
            if (Enum.TryParse<NotificationTypes>(_selectedType, true, out var type))
            {
                filtered = filtered.Where(n => n.Type == type);
            }
        }

        if (!string.IsNullOrEmpty(_searchText))
        {
            var search = _searchText.ToLower();
            filtered = filtered.Where(n => 
                n.Payload.Title.ToLower().Contains(search) ||
                n.Payload.Message.ToLower().Contains(search) ||
                (n.Payload.Tags?.Any(t => t.ToLower().Contains(search)) == true));
        }

        return filtered.OrderByDescending(n => n.CreatedAt);
    }

    private async Task OnGroupingChanged()
    {
        if (_enableGrouping)
        {
            await GenerateNotificationGroups();
        }
        else
        {
            _notificationGroups.Clear();
        }
        StateHasChanged();
    }

    private async Task GenerateNotificationGroups()
    {
        try
        {
            // Group notifications by GroupId or by Type if no GroupId
            var groups = _notifications
                .GroupBy(n => !string.IsNullOrEmpty(n.Payload.GroupId) ? n.Payload.GroupId : n.Type.ToString())
                .Select(g => new NotificationGroupDto
                {
                    GroupId = g.Key,
                    Title = GetGroupTitle(g.Key, g.First().Type),
                    Count = g.Count(),
                    UnreadCount = g.Count(n => n.Status != NotificationStatus.Read),
                    LatestNotification = g.OrderByDescending(n => n.CreatedAt).First(),
                    PreviewNotifications = g.OrderByDescending(n => n.CreatedAt).Take(3).ToList(),
                    IsCollapsed = true,
                    CreatedAt = g.Min(n => n.CreatedAt),
                    UpdatedAt = g.Max(n => n.CreatedAt)
                })
                .OrderByDescending(g => g.UpdatedAt)
                .ToList();

            _notificationGroups = groups;
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Errore nel raggruppamento: {ex.Message}", Severity.Error);
        }
    }

    private string GetGroupTitle(string groupId, NotificationTypes fallbackType)
    {
        if (groupId == fallbackType.ToString())
        {
            return fallbackType switch
            {
                NotificationTypes.System => TranslationService.GetTranslation("notifications.groups.system", "Notifiche di Sistema"),
                NotificationTypes.Event => TranslationService.GetTranslation("notifications.groups.event", "Notifiche Eventi"),
                NotificationTypes.User => TranslationService.GetTranslation("notifications.groups.user", "Notifiche Utente"),
                NotificationTypes.Security => TranslationService.GetTranslation("notifications.groups.security", "Notifiche di Sicurezza"),
                NotificationTypes.Audit => TranslationService.GetTranslation("notifications.groups.audit", "Notifiche Audit"),
                NotificationTypes.Marketing => TranslationService.GetTranslation("notifications.groups.marketing", "Notifiche Marketing"),
                _ => groupId
            };
        }
        return groupId;
    }

    // Group event handlers
    private async Task OnGroupToggle(NotificationGroupDto group)
    {
        // Group toggle is handled by the component itself
        StateHasChanged();
    }

    private async Task OnGroupMarkAsRead(NotificationGroupDto group)
    {
        try
        {
            var groupNotifications = _notifications.Where(n => 
                (!string.IsNullOrEmpty(n.Payload.GroupId) ? n.Payload.GroupId : n.Type.ToString()) == group.GroupId)
                .Where(n => n.Status != NotificationStatus.Read)
                .ToList();

            foreach (var notification in groupNotifications)
            {
                await NotificationService.MarkAsReadAsync(notification.Id);
            }

            Snackbar.Add(TranslationService.GetTranslation("notifications.groupMarkedAsRead", "Gruppo segnato come letto"), Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Errore: {ex.Message}", Severity.Error);
        }
    }

    private async Task OnGroupArchive(NotificationGroupDto group)
    {
        try
        {
            var groupNotifications = _notifications.Where(n => 
                (!string.IsNullOrEmpty(n.Payload.GroupId) ? n.Payload.GroupId : n.Type.ToString()) == group.GroupId)
                .ToList();

            foreach (var notification in groupNotifications)
            {
                await NotificationService.ArchiveNotificationAsync(notification.Id);
            }

            Snackbar.Add(TranslationService.GetTranslation("notifications.groupArchived", "Gruppo archiviato"), Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Errore: {ex.Message}", Severity.Error);
        }
    }

    private async Task OnGroupUngroup(NotificationGroupDto group)
    {
        try
        {
            // Remove grouping for this group by clearing GroupId
            var groupNotifications = _notifications.Where(n => 
                (!string.IsNullOrEmpty(n.Payload.GroupId) ? n.Payload.GroupId : n.Type.ToString()) == group.GroupId)
                .ToList();

            foreach (var notification in groupNotifications)
            {
                if (!string.IsNullOrEmpty(notification.Payload.GroupId))
                {
                    notification.Payload.GroupId = null;
                }
            }

            await GenerateNotificationGroups();
            Snackbar.Add(TranslationService.GetTranslation("notifications.groupUngrouped", "Notifiche separate"), Severity.Info);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Errore: {ex.Message}", Severity.Error);
        }
    }

    // Individual notification event handlers for rich cards
    private async Task OnNotificationMarkAsRead(NotificationResponseDto notification)
    {
        await MarkAsReadAsync(notification.Id);
    }

    private async Task OnNotificationArchive(NotificationResponseDto notification)
    {
        await ArchiveNotificationAsync(notification.Id);
    }

    private async Task OnNotificationShowDetails(NotificationResponseDto notification)
    {
        await ShowNotificationDetailsAsync(notification);
    }

    private async Task OnNotificationActionExecuted(NotificationActionDto action)
    {
        try
        {
            // Handle custom action execution
            if (!string.IsNullOrEmpty(action.ApiEndpoint))
            {
                // TODO: Implement API call for custom actions
                Snackbar.Add($"Azione '{action.Label}' eseguita", Severity.Success);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Errore nell'esecuzione dell'azione: {ex.Message}", Severity.Error);
        }
    }

    #endregion
}