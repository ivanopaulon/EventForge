@page "/performance-demo"
@using EventForge.DTOs.Chat
@using EventForge.DTOs.Notifications
@inject IPerformanceOptimizationService PerformanceService
@inject ILogger<PerformanceDemo> Logger

<PageTitle>Performance Optimization Demo - EventForge</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <MudText Typo="Typo.h4" Class="mb-4">
        <MudIcon Icon="@Icons.Material.Filled.Speed" Class="mr-2" />
        MudBlazor Performance Optimization Demo
    </MudText>
    
    <MudGrid>
        <!-- Chat Messages Demo -->
        <MudItem xs="12" md="6">
            <MudCard Class="mb-4">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">
                            <MudIcon Icon="@Icons.Material.Filled.Chat" Class="mr-2" />
                            Optimized Chat Messages (@_sampleMessages.Count items)
                        </MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        <MudButton StartIcon="@Icons.Material.Filled.Add" 
                                   Color="Color.Primary" 
                                   Size="Size.Small"
                                   OnClick="GenerateSampleMessages">
                            Generate 500 Messages
                        </MudButton>
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardContent>
                    <MudText Typo="Typo.body2" Class="mb-2">
                        Featuring: Virtualization, Lazy Loading, Optimized Rendering
                    </MudText>
                    <OptimizedChatMessageList Messages="_sampleMessages" 
                                              Height="400px"
                                              CurrentUserId="_currentUserId"
                                              OnReplyMessage="HandleReplyMessage"
                                              OnEditMessage="HandleEditMessage" />
                </MudCardContent>
            </MudCard>
        </MudItem>

        <!-- Notifications Demo -->
        <MudItem xs="12" md="6">
            <MudCard Class="mb-4">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">
                            <MudIcon Icon="@Icons.Material.Filled.Notifications" Class="mr-2" />
                            Optimized Notifications (@_sampleNotifications.Count items)
                        </MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        <MudButton StartIcon="@Icons.Material.Filled.Add" 
                                   Color="Color.Secondary" 
                                   Size="Size.Small"
                                   OnClick="GenerateSampleNotifications">
                            Generate 200 Notifications
                        </MudButton>
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardContent>
                    <MudText Typo="Typo.body2" Class="mb-2">
                        Featuring: Virtualization, Debounced Search, Smart Filtering
                    </MudText>
                    <OptimizedNotificationList Notifications="_sampleNotifications"
                                               Height="400px"
                                               OnNotificationClick="HandleNotificationClick"
                                               OnNotificationRead="HandleNotificationRead"
                                               OnNotificationArchived="HandleNotificationArchived" />
                </MudCardContent>
            </MudCard>
        </MudItem>

        <!-- Performance Metrics -->
        <MudItem xs="12">
            <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">
                            <MudIcon Icon="@Icons.Material.Filled.Analytics" Class="mr-2" />
                            Performance Metrics & Cache Status
                        </MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        <MudButton StartIcon="@Icons.Material.Filled.Refresh" 
                                   Color="Color.Info" 
                                   Size="Size.Small"
                                   OnClick="RefreshMetrics">
                            Refresh
                        </MudButton>
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardContent>
                    <MudGrid>
                        <MudItem xs="12" sm="6" md="3">
                            <MudPaper Class="pa-4 text-center">
                                <MudIcon Icon="@Icons.Material.Filled.Storage" Color="Color.Primary" Size="Size.Large" />
                                <MudText Typo="Typo.h6">@_metricsData.CacheItemCount</MudText>
                                <MudText Typo="Typo.body2">Cache Items</MudText>
                            </MudPaper>
                        </MudItem>
                        <MudItem xs="12" sm="6" md="3">
                            <MudPaper Class="pa-4 text-center">
                                <MudIcon Icon="@Icons.Material.Filled.Message" Color="Color.Secondary" Size="Size.Large" />
                                <MudText Typo="Typo.h6">@_sampleMessages.Count</MudText>
                                <MudText Typo="Typo.body2">Total Messages</MudText>
                            </MudPaper>
                        </MudItem>
                        <MudItem xs="12" sm="6" md="3">
                            <MudPaper Class="pa-4 text-center">
                                <MudIcon Icon="@Icons.Material.Filled.Notifications" Color="Color.Tertiary" Size="Size.Large" />
                                <MudText Typo="Typo.h6">@_sampleNotifications.Count</MudText>
                                <MudText Typo="Typo.body2">Notifications</MudText>
                            </MudPaper>
                        </MudItem>
                        <MudItem xs="12" sm="6" md="3">
                            <MudPaper Class="pa-4 text-center">
                                <MudIcon Icon="@Icons.Material.Filled.Speed" Color="Color.Success" Size="Size.Large" />
                                <MudText Typo="Typo.h6">@($"{_metricsData.LastRenderTime:F2}ms")</MudText>
                                <MudText Typo="Typo.body2">Render Time</MudText>
                            </MudPaper>
                        </MudItem>
                    </MudGrid>
                    
                    <MudDivider Class="my-4" />
                    
                    <MudText Typo="Typo.h6" Class="mb-2">Optimization Features Demonstrated:</MudText>
                    <MudSimpleTable Dense="true">
                        <tbody>
                            <tr>
                                <td><MudIcon Icon="@Icons.Material.Filled.ViewList" Size="Size.Small" /></td>
                                <td><strong>Virtualization:</strong> Only renders visible items for optimal performance</td>
                            </tr>
                            <tr>
                                <td><MudIcon Icon="@Icons.Material.Filled.CloudDownload" Size="Size.Small" /></td>
                                <td><strong>Lazy Loading:</strong> Attachments and rich content load on demand</td>
                            </tr>
                            <tr>
                                <td><MudIcon Icon="@Icons.Material.Filled.Storage" Size="Size.Small" /></td>
                                <td><strong>Intelligent Caching:</strong> Reduces API calls with smart cache invalidation</td>
                            </tr>
                            <tr>
                                <td><MudIcon Icon="@Icons.Material.Filled.Search" Size="Size.Small" /></td>
                                <td><strong>Debounced Search:</strong> 300ms debouncing prevents excessive filtering</td>
                            </tr>
                            <tr>
                                <td><MudIcon Icon="@Icons.Material.Filled.PhoneIphone" Size="Size.Small" /></td>
                                <td><strong>Mobile Optimized:</strong> Responsive design with touch-friendly interfaces</td>
                            </tr>
                            <tr>
                                <td><MudIcon Icon="@Icons.Material.Filled.Hub" Size="Size.Small" /></td>
                                <td><strong>SignalR Optimization:</strong> Event batching and connection pooling</td>
                            </tr>
                        </tbody>
                    </MudSimpleTable>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private readonly List<ChatMessageDto> _sampleMessages = new();
    private readonly List<NotificationResponseDto> _sampleNotifications = new();
    private readonly Guid _currentUserId = Guid.NewGuid();
    private PerformanceMetrics _metricsData = new();
    private readonly System.Diagnostics.Stopwatch _renderStopwatch = new();

    private class PerformanceMetrics
    {
        public int CacheItemCount { get; set; }
        public double LastRenderTime { get; set; }
        public DateTime LastUpdate { get; set; } = DateTime.UtcNow;
    }

    protected override async Task OnInitializedAsync()
    {
        _renderStopwatch.Start();
        
        // Generate initial sample data
        GenerateSampleMessages();
        GenerateSampleNotifications();
        
        await RefreshMetrics();
        
        _renderStopwatch.Stop();
        _metricsData.LastRenderTime = _renderStopwatch.Elapsed.TotalMilliseconds;
    }

    private void GenerateSampleMessages()
    {
        _sampleMessages.Clear();
        
        var random = new Random();
        var sampleUsers = new[]
        {
            ("Alice Johnson", "alice@example.com"),
            ("Bob Smith", "bob@example.com"),
            ("Carol Williams", "carol@example.com"),
            ("David Brown", "david@example.com"),
            ("Eve Davis", "eve@example.com")
        };

        var sampleMessages = new[]
        {
            "Hello everyone! How are you doing today?",
            "I just finished the latest feature implementation. It's working great!",
            "Can someone help me with the database migration?",
            "The new performance optimizations are showing excellent results.",
            "Let's schedule a meeting to discuss the upcoming release.",
            "I found an interesting article about Blazor performance: https://example.com/blazor-perf",
            "The virtualization component is handling large datasets beautifully.",
            "Great work on the SignalR optimizations! 🚀",
            "Testing the new caching system - response times are much better.",
            "Mobile experience feels much smoother now."
        };

        for (int i = 0; i < 500; i++)
        {
            var user = sampleUsers[random.Next(sampleUsers.Length)];
            var message = sampleMessages[random.Next(sampleMessages.Length)];
            var isCurrentUser = random.Next(4) == 0; // 25% chance of being current user
            
            _sampleMessages.Add(new ChatMessageDto
            {
                Id = Guid.NewGuid(),
                ChatId = Guid.NewGuid(),
                SenderId = isCurrentUser ? _currentUserId : Guid.NewGuid(),
                SenderName = isCurrentUser ? "You" : user.Item1,
                Content = $"{message} (Message #{i + 1})",
                SentAt = DateTime.UtcNow.AddMinutes(-random.Next(1440)), // Random time in last 24 hours
                Status = MessageStatus.Sent,
                Attachments = random.Next(10) == 0 ? GenerateSampleAttachments(random) : null
            });
        }

        // Sort by sent time (newest first)
        _sampleMessages.Sort((a, b) => b.SentAt.CompareTo(a.SentAt));
        
        Logger.LogInformation("Generated {Count} sample chat messages", _sampleMessages.Count);
    }

    private List<MessageAttachmentDto> GenerateSampleAttachments(Random random)
    {
        var attachments = new List<MessageAttachmentDto>();
        var attachmentCount = random.Next(1, 4); // 1-3 attachments
        
        var sampleFiles = new[]
        {
            ("document.pdf", "application/pdf", 1024 * 500),
            ("image.jpg", "image/jpeg", 1024 * 200),
            ("video.mp4", "video/mp4", 1024 * 1024 * 5),
            ("spreadsheet.xlsx", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", 1024 * 300)
        };

        for (int i = 0; i < attachmentCount; i++)
        {
            var file = sampleFiles[random.Next(sampleFiles.Length)];
            attachments.Add(new MessageAttachmentDto
            {
                Id = Guid.NewGuid(),
                FileName = file.Item1,
                ContentType = file.Item2,
                FileSize = file.Item3,
                UploadedAt = DateTime.UtcNow
            });
        }

        return attachments;
    }

    private void GenerateSampleNotifications()
    {
        _sampleNotifications.Clear();
        
        var random = new Random();
        var notificationTypes = Enum.GetValues<NotificationTypes>();
        var priorities = Enum.GetValues<NotificationPriority>();
        
        var sampleTitles = new[]
        {
            "New message received",
            "System maintenance scheduled",
            "Security alert detected",
            "Event reminder",
            "User profile updated",
            "Marketing campaign launched",
            "Audit log generated",
            "Performance metrics available"
        };

        var sampleMessages = new[]
        {
            "You have received a new message in the chat room.",
            "System will be under maintenance tonight from 2-4 AM.",
            "Suspicious login activity detected from new location.",
            "Don't forget about the team meeting at 3 PM today.",
            "Your profile information has been successfully updated.",
            "Check out our new features and special offers!",
            "New audit log entry has been created for your account.",
            "Monthly performance report is now available for review."
        };

        for (int i = 0; i < 200; i++)
        {
            var isRead = random.Next(3) != 0; // 66% chance of being read
            
            _sampleNotifications.Add(new NotificationResponseDto
            {
                Id = Guid.NewGuid(),
                Type = notificationTypes[random.Next(notificationTypes.Length)],
                Priority = priorities[random.Next(priorities.Length)],
                Payload = new NotificationPayloadDto
                {
                    Title = sampleTitles[random.Next(sampleTitles.Length)] + $" #{i + 1}",
                    Message = sampleMessages[random.Next(sampleMessages.Length)]
                },
                CreatedAt = DateTime.UtcNow.AddHours(-random.Next(72)), // Random time in last 3 days
                ReadAt = isRead ? DateTime.UtcNow.AddHours(-random.Next(24)) : null,
                Status = isRead ? NotificationStatus.Read : NotificationStatus.Delivered
            });
        }

        // Sort by creation date (newest first)
        _sampleNotifications.Sort((a, b) => b.CreatedAt.CompareTo(a.CreatedAt));
        
        Logger.LogInformation("Generated {Count} sample notifications", _sampleNotifications.Count);
    }

    private async Task RefreshMetrics()
    {
        // Simulate cache statistics (in a real app, this would come from the PerformanceOptimizationService)
        _metricsData.CacheItemCount = 15 + new Random().Next(10); // Simulated cache count
        _metricsData.LastUpdate = DateTime.UtcNow;
        
        // Demonstrate cache usage
        await PerformanceService.GetCachedDataAsync("demo_cache_key", async () =>
        {
            await Task.Delay(10); // Simulate work
            return "Demo cache value";
        }, TimeSpan.FromMinutes(5));
        
        Logger.LogInformation("Performance metrics refreshed");
        StateHasChanged();
    }

    private async Task HandleReplyMessage(ChatMessageDto message)
    {
        Logger.LogInformation("Reply clicked for message: {MessageId}", message.Id);
        // In a real app, this would open reply interface
        await Task.CompletedTask;
    }

    private async Task HandleEditMessage(ChatMessageDto message)
    {
        Logger.LogInformation("Edit clicked for message: {MessageId}", message.Id);
        // In a real app, this would open edit interface
        await Task.CompletedTask;
    }

    private async Task HandleNotificationClick(NotificationResponseDto notification)
    {
        Logger.LogInformation("Notification clicked: {NotificationId}", notification.Id);
        // In a real app, this would navigate to notification details
        await Task.CompletedTask;
    }

    private async Task HandleNotificationRead(NotificationResponseDto notification)
    {
        Logger.LogInformation("Notification marked as read: {NotificationId}", notification.Id);
        // In a real app, this would update the notification status
        await Task.CompletedTask;
    }

    private async Task HandleNotificationArchived(NotificationResponseDto notification)
    {
        Logger.LogInformation("Notification archived: {NotificationId}", notification.Id);
        // In a real app, this would archive the notification
        await Task.CompletedTask;
    }
}

