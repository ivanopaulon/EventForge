@page "/superadmin/tenant-management"
@using Microsoft.AspNetCore.Authorization
@using EventForge.DTOs.Tenants
@using EventForge.DTOs.SuperAdmin
@using EventForge.Client.Shared.Components
@attribute [Authorize(Roles = "SuperAdmin")]
@inject IAuthService AuthService
@inject ISuperAdminService SuperAdminService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject ITranslationService TranslationService
@inject ILogger<TenantManagement> Logger

<SuperAdminPageLayout PageTitle="@TranslationService.GetTranslation("superAdmin.tenantManagement", "Gestione Tenant")"
                      PageIcon="@Icons.Material.Outlined.Business"
                      IsLoading="_isLoading"
                      IsAuthorized="_isAuthorized"
                      OnNavigateHome="@(() => NavigationManager.NavigateTo("/"))">

    <!-- Statistics Section -->
    <SuperAdminCollapsibleSection SectionTitle="@TranslationService.GetTranslation("superAdmin.showStatistics", "Mostra Statistiche")"
                                  SectionIcon="@Icons.Material.Outlined.Analytics"
                                  @bind-IsExpanded="_statisticsExpanded">
        <MudGrid Spacing="2">
            <MudItem xs="12" sm="6" md="3">
                <MudPaper Class="d-flex justify-space-between align-center pa-3 border-rounded" Elevation="1">
                    <MudText Typo="Typo.body2">@TranslationService.GetTranslation("superAdmin.totalTenants", "Tenant Totali"):</MudText>
                    <MudChip T="string" Color="Color.Info" Size="Size.Small">@(_tenantStats?.TotalTenants ?? 0)</MudChip>
                </MudPaper>
            </MudItem>
            <MudItem xs="12" sm="6" md="3">
                <MudPaper Class="d-flex justify-space-between align-center pa-3 border-rounded" Elevation="1">
                    <MudText Typo="Typo.body2">@TranslationService.GetTranslation("superAdmin.activeTenants", "Tenant Attivi"):</MudText>
                    <MudChip T="string" Color="Color.Success" Size="Size.Small">@(_tenantStats?.ActiveTenants ?? 0)</MudChip>
                </MudPaper>
            </MudItem>
            <MudItem xs="12" sm="6" md="3">
                <MudPaper Class="d-flex justify-space-between align-center pa-3 border-rounded" Elevation="1">
                    <MudText Typo="Typo.body2">@TranslationService.GetTranslation("superAdmin.inactiveTenants", "Tenant Inattivi"):</MudText>
                    <MudChip T="string" Color="Color.Warning" Size="Size.Small">@(_tenantStats?.InactiveTenants ?? 0)</MudChip>
                </MudPaper>
            </MudItem>
            <MudItem xs="12" sm="6" md="3">
                <MudPaper Class="d-flex justify-space-between align-center pa-3 border-rounded" Elevation="1">
                    <MudText Typo="Typo.body2">@TranslationService.GetTranslation("superAdmin.totalUsers", "Utenti Totali"):</MudText>
                    <MudChip T="string" Color="Color.Primary" Size="Size.Small">@(_tenantStats?.TotalUsers ?? 0)</MudChip>
                </MudPaper>
            </MudItem>
        </MudGrid>
    </SuperAdminCollapsibleSection>

    <!-- Advanced Filters Section -->
    <SuperAdminCollapsibleSection SectionTitle="@TranslationService.GetTranslation("superAdmin.advancedFilters", "Filtri Avanzati")"
                                  SectionIcon="@Icons.Material.Outlined.FilterList"
                                  @bind-IsExpanded="_filtersExpanded">
        <div class="d-flex gap-4 align-center flex-wrap">
            <MudTextField @bind-Value="_searchTerm"
                          @bind-Value:after="OnSearchChanged"
                          Label="@TranslationService.GetTranslation("superAdmin.searchByNameOrDomain", "Cerca per nome o dominio")"
                          Placeholder="@TranslationService.GetTranslation("superAdmin.searchPlaceholder", "Inserisci testo da cercare...")"
                          Variant="Variant.Outlined"
                          Adornment="Adornment.End"
                          AdornmentIcon="@Icons.Material.Outlined.Search"
                          Clearable="true"
                          Style="flex: 2;" />
            <MudSelect T="string" @bind-Value="_statusFilter" @bind-Value:after="OnStatusFilterChanged" 
                       Label="@TranslationService.GetTranslation("field.status", "Stato")" 
                       Placeholder="@TranslationService.GetTranslation("superAdmin.selectStatus", "Seleziona stato...")"
                       Variant="Variant.Outlined"
                       Clearable="true"
                       Style="flex: 1;">
                <MudSelectItem Value="@("all")">@TranslationService.GetTranslation("common.selectAll", "Tutti")</MudSelectItem>
                <MudSelectItem Value="@("active")">@TranslationService.GetTranslation("field.active", "Attivo")</MudSelectItem>
                <MudSelectItem Value="@("inactive")">@TranslationService.GetTranslation("field.inactive", "Inattivo")</MudSelectItem>
            </MudSelect>
        </div>
    </SuperAdminCollapsibleSection>

    <!-- Tenants Data Table -->
    <MudPaper Elevation="2" Class="border-rounded mb-1">
        <MudCardHeader Class="pa-2">
            <CardHeaderContent>
                <MudText Typo="Typo.h6">
                    <MudIcon Icon="@Icons.Material.Outlined.Business" Class="mr-2" />
                    @TranslationService.GetTranslation("superAdmin.tenantList", "Lista Tenant")
                    <MudText Typo="Typo.body2" Class="mud-text-secondary ml-2">
                        (@_filteredTenants.Count() @TranslationService.GetTranslation("superAdmin.itemsFound", "elementi trovati"))
                    </MudText>
                </MudText>
            </CardHeaderContent>
            <CardHeaderActions>
                <SuperAdminToolbar ShowRefresh="true"
                                   ShowExport="true" 
                                   ShowCreate="true"
                                   ShowAuditLog="false"
                                   CreateIcon="@Icons.Material.Outlined.Add"
                                   CreateTooltip="@TranslationService.GetTranslation("superAdmin.createNewTenant", "Crea nuovo tenant")"
                                   IsLoading="_isLoadingTenants"
                                   OnRefresh="@LoadTenantsAsync"
                                   OnExport="@ExportTenants"
                                   OnCreate="@OpenCreateTenantDrawer" />
            </CardHeaderActions>
        </MudCardHeader>
        <MudCardContent Class="pa-1">
            @if (_isLoadingTenants)
            {
                <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="mt-4" />
            }
            else
            {
                <MudTable T="TenantResponseDto" 
                          Items="_filteredTenants" 
                          Hover="true" 
                          Striped="true"
                          Loading="_isLoadingTenants"
                          LoadingProgressColor="Color.Info"
                          SortLabel="@TranslationService.GetTranslation("tooltip.sortColumn", "Ordina colonna")"
                          AllowUnsorted="false"
                          Dense="true"
                          Breakpoint="Breakpoint.Sm">
                    <HeaderContent>
                        <MudTh><MudTableSortLabel SortBy="@(new Func<TenantResponseDto, object>(x => x.DisplayName))">@TranslationService.GetTranslation("field.displayName", "Nome")</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="@(new Func<TenantResponseDto, object>(x => x.Name))">@TranslationService.GetTranslation("field.name", "Nome Sistema")</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="@(new Func<TenantResponseDto, object>(x => x.Description ?? string.Empty))">@TranslationService.GetTranslation("field.description", "Descrizione")</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="@(new Func<TenantResponseDto, object>(x => x.IsActive))">@TranslationService.GetTranslation("field.status", "Stato")</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel InitialDirection="SortDirection.Descending" SortBy="@(new Func<TenantResponseDto, object>(x => x.CreatedAt))">@TranslationService.GetTranslation("field.createdAt", "Creato il")</MudTableSortLabel></MudTh>
                        <MudTh Class="text-center" Style="min-width: 120px;">@TranslationService.GetTranslation("common.actions", "Azioni")</MudTh>
                    </HeaderContent>

                    <RowTemplate>
                        <MudTd DataLabel="@TranslationService.GetTranslation("field.displayName", "Nome")">
                            <div class="d-flex align-center">
                                <MudAvatar Color="Color.Primary" Size="Size.Small" Class="mr-2">
                                    @(context.DisplayName.FirstOrDefault())
                                </MudAvatar>
                                <div>
                                    <MudText Typo="Typo.body2">@context.DisplayName</MudText>
                                    <MudText Typo="Typo.caption" Class="mud-text-secondary">ID: @context.Id</MudText>
                                </div>
                            </div>
                        </MudTd>
                        <MudTd DataLabel="@TranslationService.GetTranslation("field.name", "Nome Sistema")">
                            <MudChip T="string" Size="Size.Small" Color="Color.Default">@context.Name</MudChip>
                        </MudTd>
                        <MudTd DataLabel="@TranslationService.GetTranslation("field.description", "Descrizione")">
                            <MudText Typo="Typo.body2">@(context.Description ?? TranslationService.GetTranslation("common.notAvailable", "N/A"))</MudText>
                        </MudTd>
                        <MudTd DataLabel="@TranslationService.GetTranslation("field.status", "Stato")">
                            <MudChip T="string" Color="@(context.IsActive ? Color.Success : Color.Error)" 
                                     Size="Size.Small"
                                     Icon="@(context.IsActive ? Icons.Material.Outlined.CheckCircle : Icons.Material.Outlined.Cancel)">
                                @(context.IsActive ? TranslationService.GetTranslation("field.active", "Attivo") : TranslationService.GetTranslation("field.inactive", "Inattivo"))
                            </MudChip>
                        </MudTd>
                        <MudTd DataLabel="@TranslationService.GetTranslation("field.createdAt", "Creato il")">
                            <MudText Typo="Typo.body2">@context.CreatedAt.ToString("dd/MM/yyyy HH:mm")</MudText>
                        </MudTd>
                        <MudTd DataLabel="@TranslationService.GetTranslation("common.actions", "Azioni")" Class="text-center">
                            <SuperAdminRowActions EntityName="@context.DisplayName"
                                                  ShowView="true"
                                                  ShowEdit="true"
                                                  ShowAuditLog="true"
                                                  ShowToggleStatus="true"
                                                  ShowDelete="true"
                                                  IsActive="@context.IsActive"
                                                  OnView="@(() => ViewTenant(context))"
                                                  OnEdit="@(() => EditTenant(context))"
                                                  OnAuditLog="@(() => ViewTenantAuditLog(context))"
                                                  OnToggleStatus="@(() => ToggleTenantStatus(context))"
                                                  OnDelete="@(() => DeleteTenant(context))" />
                        </MudTd>
                    </RowTemplate>

                    <NoRecordsContent>
                        <div class="text-center pa-2 pa-sm-3 pa-md-4">
                            <MudIcon Icon="@Icons.Material.Outlined.Business" Size="Size.Medium" Class="mb-4 mud-text-secondary" />
                            <MudText Typo="Typo.h6" Class="mb-2">
                                @(_tenants.Any() ? 
                                    TranslationService.GetTranslation("superAdmin.noTenantsMatchFilters", "Nessun tenant corrisponde ai filtri applicati") : 
                                    TranslationService.GetTranslation("superAdmin.noTenantsFound", "Nessun tenant trovato"))
                            </MudText>
                            @if (_tenants.Any())
                            {
                                <MudButton Variant="Variant.Text" 
                                           Color="Color.Primary" 
                                           StartIcon="@Icons.Material.Outlined.Clear"
                                           OnClick="@ClearFilters">
                                    @TranslationService.GetTranslation("superAdmin.clearFilters", "Cancella filtri")
                                </MudButton>
                            }
                        </div>
                    </NoRecordsContent>
                </MudTable>
            }
        </MudCardContent>
    </MudPaper>

</SuperAdminPageLayout>

<!-- Tenant Management Drawer -->
<TenantDrawer @bind-IsOpen="_tenantDrawerOpen" 
              @bind-Mode="_tenantDrawerMode"
              OriginalTenant="_selectedTenant"
              AllowEdit="true"
              OnTenantCreated="@OnTenantCreated"
              OnTenantUpdated="@OnTenantUpdated" />

<!-- Audit History Drawer -->
<AuditHistoryDrawer @bind-IsOpen="_auditDrawerOpen"
                    EntityType="Tenant"
                    EntityId="@_selectedTenantForAudit?.Id"
                    EntityName="@_selectedTenantForAudit?.DisplayName" />

@code {
    // UI State Management
    private bool _isLoading = true;
    private bool _isAuthorized = false;
    private bool _isLoadingTenants = false;
    private bool _tenantDrawerOpen = false;
    private bool _auditDrawerOpen = false;
    
    // MudCollapse state management (all closed by default as per issue #98)
    private bool _statisticsExpanded = false;      // Closed by default
    private bool _filtersExpanded = false;         // Closed by default
    
    // Drawer and modal management
    private EntityDrawerMode _tenantDrawerMode = EntityDrawerMode.Create;
    private TenantResponseDto? _selectedTenant;
    private TenantResponseDto? _selectedTenantForAudit;
    private UserDto? _currentUser;
    
    // Filter and search state
    private string _searchTerm = string.Empty;
    private string _statusFilter = "all";
    
    // Data collections
    private List<TenantResponseDto> _tenants = new();
    private TenantStatisticsDto? _tenantStats;

    /// <summary>
    /// Computed property for filtered tenants based on search criteria.
    /// Applies multiple filters: search term and status.
    /// </summary>
    private IEnumerable<TenantResponseDto> _filteredTenants => 
        _tenants.Where(t => 
            // Search filter: check displayName and name
            (string.IsNullOrEmpty(_searchTerm) || 
             t.DisplayName.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase) ||
             t.Name.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase) ||
             (!string.IsNullOrEmpty(t.Domain) && t.Domain.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase))) &&
            // Status filter
            (_statusFilter == "all" || 
             (_statusFilter == "active" && t.IsActive) ||
             (_statusFilter == "inactive" && !t.IsActive)));

    /// <summary>
    /// Component initialization with enhanced security checks and responsive UI setup.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Set all collapse sections to closed by default as per issue #98 requirements
            _statisticsExpanded = false;
            _filtersExpanded = false;
            
            // Enhanced authentication and authorization flow
            var isAuthenticated = await AuthService.IsAuthenticatedAsync();
            if (!isAuthenticated)
            {
                NavigationManager.NavigateTo("/login");
                return;
            }

            // SuperAdmin role verification with proper error handling
            var isSuperAdmin = await AuthService.IsSuperAdminAsync();
            if (!isSuperAdmin)
            {
                _isAuthorized = false;
                _isLoading = false;
                Snackbar.Add(TranslationService.GetTranslation("superAdmin.accessDeniedSuperAdmin", "Accesso negato. È richiesto il ruolo Super Amministratore."), Severity.Warning);
                return;
            }

            // Load current user info for audit purposes
            _currentUser = await AuthService.GetCurrentUserAsync();
            _isAuthorized = true;
            
            // Parallel data loading for better performance
            await Task.WhenAll(
                LoadTenantsAsync(),
                LoadTenantStatisticsAsync()
            );
        }
        catch (Exception ex)
        {
            Snackbar.Add(TranslationService.GetTranslation("superAdmin.loadingPageError", "Errore nel caricamento della pagina: {0}", ex.Message), Severity.Error);
            NavigationManager.NavigateTo("/");
        }
        finally
        {
            _isLoading = false;
        }
    }

    /// <summary>
    /// Loads tenant data with proper error handling and loading state management.
    /// </summary>
    private async Task LoadTenantsAsync()
    {
        try
        {
            _isLoadingTenants = true;
            _tenants = (await SuperAdminService.GetTenantsAsync()).ToList();
        }
        catch (Exception ex)
        {
            Snackbar.Add(TranslationService.GetTranslation("superAdmin.loadingTenantsError", "Errore nel caricamento dei tenant: {0}", ex.Message), Severity.Error);
        }
        finally
        {
            _isLoadingTenants = false;
        }
    }

    /// <summary>
    /// Loads tenant statistics with enhanced error handling.
    /// </summary>
    private async Task LoadTenantStatisticsAsync()
    {
        try
        {
            _tenantStats = await SuperAdminService.GetTenantStatisticsAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add(TranslationService.GetTranslation("superAdmin.loadingStatisticsError", "Errore nel caricamento delle statistiche: {0}", ex.Message), Severity.Error);
        }
    }

    /// <summary>
    /// Clears all active filters and resets search form to initial state.
    /// </summary>
    private async Task ClearFilters()
    {
        _searchTerm = string.Empty;
        _statusFilter = "all";
        await Task.CompletedTask;
        StateHasChanged();
    }

    private async Task OnSearchChanged()
    {
        await Task.Delay(300); // Debounce
        StateHasChanged();
    }

    private async Task OnStatusFilterChanged()
    {
        await Task.CompletedTask;
        StateHasChanged();
    }

    private async Task ExportTenants()
    {
        // TODO: Implement export functionality
        Snackbar.Add(TranslationService.GetTranslation("superAdmin.exportFunctionalityComingSoon", "La funzionalità di esportazione sarà implementata presto."), Severity.Info);
        await Task.CompletedTask;
    }

    private async Task OpenCreateTenantDrawer()
    {
        _tenantDrawerMode = EntityDrawerMode.Create;
        _selectedTenant = null;
        _tenantDrawerOpen = true;
        await Task.CompletedTask;
    }

    private async Task OnTenantCreated(TenantResponseDto newTenant)
    {
        _tenants.Add(newTenant);
        await LoadTenantStatisticsAsync();
        StateHasChanged();
    }

    private async Task OnTenantUpdated(TenantResponseDto updatedTenant)
    {
        var index = _tenants.FindIndex(t => t.Id == updatedTenant.Id);
        if (index >= 0)
        {
            _tenants[index] = updatedTenant;
        }
        await LoadTenantStatisticsAsync();
        StateHasChanged();
    }

    private async Task ViewTenant(TenantResponseDto tenant)
    {
        _tenantDrawerMode = EntityDrawerMode.View;
        _selectedTenant = tenant;
        _tenantDrawerOpen = true;
        await Task.CompletedTask;
    }

    private async Task EditTenant(TenantResponseDto tenant)
    {
        _tenantDrawerMode = EntityDrawerMode.Edit;
        _selectedTenant = tenant;
        _tenantDrawerOpen = true;
        await Task.CompletedTask;
    }

    private async Task ViewTenantAuditLog(TenantResponseDto tenant)
    {
        _selectedTenantForAudit = tenant;
        _auditDrawerOpen = true;
        await Task.CompletedTask;
    }

    /// <summary>
    /// Toggles tenant active status with enhanced confirmation dialog and error handling.
    /// Implements proper audit trail logging and user feedback.
    /// </summary>
    private async Task ToggleTenantStatus(TenantResponseDto tenant)
    {
        var actionText = tenant.IsActive ? 
            TranslationService.GetTranslation("superAdmin.disable", "disabilitare") : 
            TranslationService.GetTranslation("superAdmin.enable", "abilitare");
            
        var confirmTitle = TranslationService.GetTranslation("common.confirm", "Conferma");
        var confirmMessage = TranslationService.GetTranslation("superAdmin.confirmTenantStatusChange", 
            "Sei sicuro di voler {0} il tenant '{1}'? Questa azione verrà registrata nei log di audit e potrebbe influenzare tutti gli utenti del tenant.", 
            actionText, tenant.DisplayName);

        var confirm = await DialogService.ShowMessageBox(
            confirmTitle,
            confirmMessage,
            yesText: TranslationService.GetTranslation("common.confirm", "Conferma"),
            cancelText: TranslationService.GetTranslation("common.cancel", "Annulla"));

        if (confirm == true)
        {
            try
            {
                var reason = tenant.IsActive 
                    ? $"Tenant disabled by superadmin on {DateTime.UtcNow:yyyy-MM-dd HH:mm:ss} UTC"
                    : $"Tenant enabled by superadmin on {DateTime.UtcNow:yyyy-MM-dd HH:mm:ss} UTC";

                if (tenant.IsActive)
                {
                    await SuperAdminService.DisableTenantAsync(tenant.Id, reason);
                }
                else
                {
                    await SuperAdminService.EnableTenantAsync(tenant.Id, reason);
                }

                // Update the local state
                tenant.IsActive = !tenant.IsActive;
                await LoadTenantStatisticsAsync();
                
                var successMessage = tenant.IsActive 
                    ? TranslationService.GetTranslation("superAdmin.tenantEnabled", "Tenant abilitato con successo!")
                    : TranslationService.GetTranslation("superAdmin.tenantDisabled", "Tenant disabilitato con successo!");
                    
                Snackbar.Add(successMessage, Severity.Success);
                StateHasChanged();
            }
            catch (Exception ex)
            {
                // Revert the change if API call failed
                var errorMessage = TranslationService.GetTranslation("superAdmin.toggleTenantStatusError", 
                    "Errore nel cambio stato del tenant: {0}", ex.Message);
                Snackbar.Add(errorMessage, Severity.Error);
                Logger.LogError(ex, "Failed to toggle tenant status for tenant {TenantId}", tenant.Id);
            }
        }
    }

    private async Task DeleteTenant(TenantResponseDto tenant)
    {
        var confirmTitle = TranslationService.GetTranslation("common.confirm", "Conferma");
        var confirmMessage = TranslationService.GetTranslation("superAdmin.confirmTenantDelete", 
            "Sei sicuro di voler eliminare il tenant '{0}'? Questa azione non può essere annullata e eliminerà tutti i dati associati.", 
            tenant.DisplayName);

        var confirm = await DialogService.ShowMessageBox(
            confirmTitle,
            confirmMessage,
            yesText: TranslationService.GetTranslation("common.delete", "Elimina"),
            cancelText: TranslationService.GetTranslation("common.cancel", "Annulla"));

        if (confirm == true)
        {
            try
            {
                // Chiamata API per soft delete
                await SuperAdminService.DeleteTenantAsync(tenant.Id, "Soft deleted by superadmin");

                _tenants.Remove(tenant);
                await LoadTenantStatisticsAsync();

                Snackbar.Add(TranslationService.GetTranslation("superAdmin.tenantDeleted", "Tenant eliminato con successo!"), Severity.Success);
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Snackbar.Add(TranslationService.GetTranslation("superAdmin.deleteTenantError", 
                    "Errore nell'eliminazione del tenant: {0}", ex.Message), Severity.Error);
            }
        }
    }
}