@page "/superadmin/tenant-management"
@using Microsoft.AspNetCore.Authorization
@using EventForge.DTOs.Tenants
@using EventForge.DTOs.SuperAdmin
@attribute [Authorize(Roles = "SuperAdmin")]
@inject IAuthService AuthService
@inject ISuperAdminService SuperAdminService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<PageTitle>Gestione Tenant - EventForge Super Admin</PageTitle>

<SuperAdminBanner />

@if (_isLoading)
{
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" />
}
else if (!_isAuthorized)
{
    <MudContainer MaxWidth="MaxWidth.Medium" Class="mt-8">
        <MudPaper Class="pa-8" Elevation="4">
            <MudGrid Justify="Justify.Center">
                <MudItem xs="12">
                    <div class="d-flex flex-column align-center">
                        <MudIcon Icon="Icons.Material.Filled.Block" Color="Color.Error" Size="Size.Large" Class="mb-4" Style="font-size: 72px;" />
                        <MudText Typo="Typo.h4" Align="Align.Center" Class="mb-4">Accesso Negato</MudText>
                        <MudText Typo="Typo.body1" Align="Align.Center" Class="mb-6">
                            Non hai i permessi per accedere a questa pagina. Ãˆ richiesto il ruolo Super Amministratore.
                        </MudText>
                        <MudButton Variant="Variant.Filled" 
                                   Color="Color.Primary" 
                                   StartIcon="Icons.Material.Filled.ArrowBack"
                                   OnClick="@(() => NavigationManager.NavigateTo("/"))">
                            Torna alla Home
                        </MudButton>
                    </div>
                </MudItem>
            </MudGrid>
        </MudPaper>
    </MudContainer>
}
else
{
    <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
        <MudText Typo="Typo.h3" Class="mb-8">
            <MudIcon Icon="Icons.Material.Filled.Business" Class="mr-3" />
            Gestione Tenant
        </MudText>

        <MudGrid>
            <!-- Informazioni Utente Corrente -->
            <MudItem xs="12">
                <MudCard Elevation="2">
                    <MudCardContent>
                        <div class="d-flex align-center">
                            <MudAvatar Color="Color.Primary" Size="Size.Large" Class="mr-4">
                                <MudIcon Icon="Icons.Material.Filled.AdminPanelSettings" />
                            </MudAvatar>
                            <div>
                                <MudText Typo="Typo.h5">Super Amministratore: @(_currentUser?.FullName ?? "N/A")</MudText>
                                <MudText Typo="Typo.body2" Class="mud-text-secondary">
                                    Gestione completa di tutti i tenant del sistema
                                </MudText>
                                <MudChip T="string" Color="Color.Warning" Size="Size.Small" Class="mt-2">Super Admin</MudChip>
                            </div>
                        </div>
                    </MudCardContent>
                </MudCard>
            </MudItem>

            <!-- Ricerca e Filtri -->
            <MudItem xs="12" md="6">
                <MudCard Elevation="2">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">
                                <MudIcon Icon="Icons.Material.Filled.Search" Class="mr-2" />
                                Ricerca Tenant
                            </MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudTextField @bind-Value="_searchTerm"
                                      @bind-Value:after="OnSearchChanged"
                                      Label="Cerca per nome o dominio"
                                      Variant="Variant.Outlined"
                                      Adornment="Adornment.End"
                                      AdornmentIcon="Icons.Material.Filled.Search"
                                      Class="mb-3" />
                        <MudSelect T="string" @bind-Value="_statusFilter" @bind-Value:after="OnStatusFilterChanged" Label="Stato" Variant="Variant.Outlined">
                            <MudSelectItem Value="@("all")">Tutti</MudSelectItem>
                            <MudSelectItem Value="@("active")">Attivi</MudSelectItem>
                            <MudSelectItem Value="@("inactive")">Inattivi</MudSelectItem>
                        </MudSelect>
                    </MudCardContent>
                </MudCard>
            </MudItem>

            <!-- Statistiche -->
            <MudItem xs="12" md="6">
                <MudCard Elevation="2">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">
                                <MudIcon Icon="Icons.Material.Filled.Analytics" Class="mr-2" />
                                Statistiche
                            </MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <div class="d-flex flex-column ga-3">
                            <div class="d-flex justify-space-between">
                                <MudText>Tenant Totali:</MudText>
                                <MudChip T="string" Color="Color.Info" Size="Size.Small">TODO: API</MudChip>
                            </div>
                            <div class="d-flex justify-space-between">
                                <MudText>Tenant Attivi:</MudText>
                                <MudChip T="string" Color="Color.Success" Size="Size.Small">TODO: API</MudChip>
                            </div>
                            <div class="d-flex justify-space-between">
                                <MudText>Utenti Totali:</MudText>
                                <MudChip T="string" Color="Color.Primary" Size="Size.Small">TODO: API</MudChip>
                            </div>
                        </div>
                    </MudCardContent>
                </MudCard>
            </MudItem>

            <!-- Lista Tenant -->
            <MudItem xs="12">
                <MudCard Elevation="2">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">
                                <MudIcon Icon="Icons.Material.Filled.List" Class="mr-2" />
                                Lista Tenant
                            </MudText>
                        </CardHeaderContent>
                        <CardHeaderActions>
                            <MudButton Variant="Variant.Filled" 
                                       Color="Color.Primary" 
                                       StartIcon="Icons.Material.Filled.Add"
                                       OnClick="@OpenCreateTenantDialog">
                                Nuovo Tenant
                            </MudButton>
                        </CardHeaderActions>
                    </MudCardHeader>
                    <MudCardContent>
                        @if (_isLoadingTenants)
                        {
                            <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="mt-4" />
                        }
                        else
                        {
                            <!-- Tenant Table -->
                            <MudTable T="TenantResponseDto" 
                                      Items="_filteredTenants" 
                                      Hover="true" 
                                      Striped="true"
                                      Loading="_isLoadingTenants"
                                      LoadingProgressColor="Color.Info">
                                <HeaderContent>
                                    <MudTh>Nome</MudTh>
                                    <MudTh>Display Name</MudTh>
                                    <MudTh>Dominio</MudTh>
                                    <MudTh>Email Contatto</MudTh>
                                    <MudTh>Stato</MudTh>
                                    <MudTh>Max Utenti</MudTh>
                                    <MudTh>Creato</MudTh>
                                    <MudTh>Azioni</MudTh>
                                </HeaderContent>
                                <RowTemplate>
                                    <MudTd DataLabel="Nome">
                                        <MudText>@context.Name</MudText>
                                    </MudTd>
                                    <MudTd DataLabel="Display Name">
                                        <MudText>@context.DisplayName</MudText>
                                    </MudTd>
                                    <MudTd DataLabel="Dominio">
                                        <MudText>@(context.Domain ?? "N/A")</MudText>
                                    </MudTd>
                                    <MudTd DataLabel="Email Contatto">
                                        <MudText>@context.ContactEmail</MudText>
                                    </MudTd>
                                    <MudTd DataLabel="Stato">
                                        <MudChip T="string" Color="@(context.IsActive ? Color.Success : Color.Error)" 
                                                 Size="Size.Small">
                                            @(context.IsActive ? "Attivo" : "Inattivo")
                                        </MudChip>
                                    </MudTd>
                                    <MudTd DataLabel="Max Utenti">
                                        <MudText>@context.MaxUsers</MudText>
                                    </MudTd>
                                    <MudTd DataLabel="Creato">
                                        <MudText>@context.CreatedAt.ToString("dd/MM/yyyy")</MudText>
                                    </MudTd>
                                    <MudTd DataLabel="Azioni">
                                        <MudButtonGroup Color="Color.Primary" Variant="Variant.Text" Size="Size.Small">
                                            <MudIconButton Icon="Icons.Material.Filled.Visibility" 
                                                           Title="Visualizza"
                                                           OnClick="@(() => ViewTenant(context))" />
                                            <MudIconButton Icon="Icons.Material.Filled.Edit" 
                                                           Title="Modifica"
                                                           OnClick="@(() => EditTenant(context))" />
                                            <MudIconButton Icon="@(context.IsActive ? Icons.Material.Filled.Block : Icons.Material.Filled.CheckCircle)" 
                                                           Title="@(context.IsActive ? "Disabilita" : "Abilita")"
                                                           OnClick="@(() => ToggleTenantStatus(context))" 
                                                           Color="@(context.IsActive ? Color.Warning : Color.Success)" />
                                        </MudButtonGroup>
                                    </MudTd>
                                </RowTemplate>
                                <NoRecordsContent>
                                    <MudText>@(_tenants.Any() ? "Nessun tenant corrisponde ai filtri applicati." : "Nessun tenant trovato.")</MudText>
                                </NoRecordsContent>
                            </MudTable>
                        }
                    </MudCardContent>
                </MudCard>
            </MudItem>
        </MudGrid>
    </MudContainer>
}

@code {
    private bool _isLoading = true;
    private bool _isAuthorized = false;
    private bool _isLoadingTenants = false;
    private UserDto? _currentUser;
    private string _searchTerm = string.Empty;
    private string _statusFilter = "all";
    
    // Data
    private List<TenantResponseDto> _tenants = new();
    private TenantStatisticsDto? _statistics;
    
    // Computed properties
    private IEnumerable<TenantResponseDto> _filteredTenants => 
        _tenants.Where(t => 
            (string.IsNullOrEmpty(_searchTerm) || 
             t.Name.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase) ||
             t.DisplayName.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase) ||
             (!string.IsNullOrEmpty(t.Domain) && t.Domain.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase))) &&
            (_statusFilter == "all" || 
             (_statusFilter == "active" && t.IsActive) ||
             (_statusFilter == "inactive" && !t.IsActive)));

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Verifica autenticazione
            var isAuthenticated = await AuthService.IsAuthenticatedAsync();
            if (!isAuthenticated)
            {
                NavigationManager.NavigateTo("/login");
                return;
            }

            // Verifica ruolo SuperAdmin
            var isSuperAdmin = await AuthService.IsSuperAdminAsync();
            if (!isSuperAdmin)
            {
                _isAuthorized = false;
                _isLoading = false;
                Snackbar.Add("Accesso negato. Ãˆ richiesto il ruolo Super Amministratore.", Severity.Warning);
                return;
            }

            // Carica informazioni utente corrente
            _currentUser = await AuthService.GetCurrentUserAsync();
            _isAuthorized = true;
            
            // Carica dati tenant
            await LoadTenantsAsync();
            await LoadStatisticsAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Errore nel caricamento della pagina: {ex.Message}", Severity.Error);
            NavigationManager.NavigateTo("/");
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task LoadTenantsAsync()
    {
        try
        {
            _isLoadingTenants = true;
            _tenants = (await SuperAdminService.GetTenantsAsync()).ToList();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Errore nel caricamento dei tenant: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isLoadingTenants = false;
        }
    }

    private async Task LoadStatisticsAsync()
    {
        try
        {
            _statistics = await SuperAdminService.GetTenantStatisticsAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Errore nel caricamento delle statistiche: {ex.Message}", Severity.Error);
        }
    }

    private async Task OpenCreateTenantDialog()
    {
        var dialog = await DialogService.ShowAsync<CreateTenantDialog>("Nuovo Tenant");
        var result = await dialog.Result;
        
        if (result is not null && !result.Canceled && result.Data is TenantResponseDto newTenant)
        {
            _tenants.Add(newTenant);
            await LoadStatisticsAsync();
            Snackbar.Add("Tenant creato con successo!", Severity.Success);
        }
    }

    private async Task ViewTenant(TenantResponseDto tenant)
    {
        var parameters = new DialogParameters { ["Tenant"] = tenant };
        await DialogService.ShowAsync<ViewTenantDialog>("Dettagli Tenant", parameters);
    }

    private async Task EditTenant(TenantResponseDto tenant)
    {
        var parameters = new DialogParameters { ["Tenant"] = tenant };
        var dialog = await DialogService.ShowAsync<EditTenantDialog>("Modifica Tenant", parameters);
        var result = await dialog.Result;
        
        if (result is not null && !result.Canceled && result.Data is TenantResponseDto updatedTenant)
        {
            var index = _tenants.FindIndex(t => t.Id == updatedTenant.Id);
            if (index >= 0)
            {
                _tenants[index] = updatedTenant;
            }
            Snackbar.Add("Tenant aggiornato con successo!", Severity.Success);
        }
    }

    private async Task ToggleTenantStatus(TenantResponseDto tenant)
    {
        var action = tenant.IsActive ? "disabilitare" : "abilitare";
        var confirm = await DialogService.ShowMessageBox(
            "Conferma",
            $"Sei sicuro di voler {action} il tenant '{tenant.DisplayName}'?",
            yesText: "Conferma",
            cancelText: "Annulla");

        if (confirm == true)
        {
            try
            {
                // For now, just toggle locally - implement actual API call when available
                tenant.IsActive = !tenant.IsActive;
                await LoadStatisticsAsync();
                Snackbar.Add($"Tenant {(tenant.IsActive ? "abilitato" : "disabilitato")} con successo!", Severity.Success);
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Errore nel cambio stato del tenant: {ex.Message}", Severity.Error);
            }
        }
    }

    private async Task OnSearchChanged()
    {
        await Task.Delay(300); // Debounce
        StateHasChanged();
    }

    private async Task OnStatusFilterChanged()
    {
        await Task.CompletedTask;
        StateHasChanged();
    }
}