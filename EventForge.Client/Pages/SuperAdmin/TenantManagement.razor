@page "/superadmin/tenant-management"
@using Microsoft.AspNetCore.Authorization
@using EventForge.DTOs.Tenants
@using EventForge.DTOs.SuperAdmin
@using EventForge.Client.Shared.Components
@attribute [Authorize(Roles = "SuperAdmin")]
@inject IAuthService AuthService
@inject ISuperAdminService SuperAdminService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject ITranslationService TranslationService

<PageTitle>@TranslationService.GetTranslation("superAdmin.pageTitle", "{0} - EventForge Super Admin", TranslationService.GetTranslation("superAdmin.tenantManagement", "Gestione Tenant"))</PageTitle>

@* SuperAdminBanner removed as per refactoring requirements *@

@if (_isLoading)
{
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" />
}
else if (!_isAuthorized)
{
    <MudContainer MaxWidth="MaxWidth.Medium" Class="mt-8">
        <MudPaper Class="pa-8" Elevation="4">
            <MudGrid Justify="Justify.Center">
                <MudItem xs="12">
                    <div class="d-flex flex-column align-center">
                        <MudIcon Icon="Icons.Material.Filled.Block" Color="Color.Error" Size="Size.Large" Class="mb-4" Style="font-size: 72px;" />
                        <MudText Typo="Typo.h4" Align="Align.Center" Class="mb-4">@TranslationService.GetTranslation("error.accessDenied", "Accesso Negato")</MudText>
                        <MudText Typo="Typo.body1" Align="Align.Center" Class="mb-6">
                            @TranslationService.GetTranslation("superAdmin.superAdminRoleRequired", "Non hai i permessi per accedere a questa pagina. Ãˆ richiesto il ruolo Super Amministratore.")
                        </MudText>
                        <MudButton Variant="Variant.Filled" 
                                   Color="Color.Primary" 
                                   StartIcon="Icons.Material.Filled.ArrowBack"
                                   OnClick="@(() => NavigationManager.NavigateTo("/"))">
                            @TranslationService.GetTranslation("superAdmin.returnToHome", "Torna alla Home")
                        </MudButton>
                    </div>
                </MudItem>
            </MudGrid>
        </MudPaper>
    </MudContainer>
}
else
{
    <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
        <MudText Typo="Typo.h3" Class="mb-8">
            <MudIcon Icon="Icons.Material.Filled.Business" Class="mr-3" />
            @TranslationService.GetTranslation("superAdmin.tenantManagement", "Gestione Tenant")
        </MudText>

        <MudGrid>
            <!-- User info section removed as per refactoring requirements -->

            <!-- Tenant Selection -->
            <MudItem xs="12">
                <MudCard Elevation="2" Class="mb-4">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">
                                <MudIcon Icon="Icons.Material.Filled.Business" Class="mr-2" />
                                @TranslationService.GetTranslation("superAdmin.tenantSelection")
                            </MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudSelect T="string" @bind-Value="_selectedTenantFilter" @bind-Value:after="OnTenantFilterChanged" 
                                   Label="@TranslationService.GetTranslation("field.tenant")" 
                                   Variant="Variant.Outlined"
                                   FullWidth="true">
                            <MudSelectItem Value="@("")">@TranslationService.GetTranslation("superAdmin.allTenants")</MudSelectItem>
                            @foreach (var tenant in _tenants)
                            {
                                <MudSelectItem Value="@tenant.Id.ToString()">@tenant.DisplayName</MudSelectItem>
                            }
                        </MudSelect>
                    </MudCardContent>
                </MudCard>
            </MudItem>

            <!-- Statistics -->
            <MudItem xs="12">
                <MudCard Elevation="2" Class="mb-4">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">
                                <MudIcon Icon="Icons.Material.Filled.Analytics" Class="mr-2" />
                                @TranslationService.GetTranslation("superAdmin.statistics")
                            </MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudGrid>
                            <MudItem xs="12" sm="4">
                                <div class="d-flex justify-space-between">
                                    <MudText>@TranslationService.GetTranslation("superAdmin.totalTenants"):</MudText>
                                    <MudChip T="string" Color="Color.Info" Size="Size.Small">@(_statistics?.TotalTenants ?? 0)</MudChip>
                                </div>
                            </MudItem>
                            <MudItem xs="12" sm="4">
                                <div class="d-flex justify-space-between">
                                    <MudText>@TranslationService.GetTranslation("superAdmin.activeTenants"):</MudText>
                                    <MudChip T="string" Color="Color.Success" Size="Size.Small">@(_statistics?.ActiveTenants ?? 0)</MudChip>
                                </div>
                            </MudItem>
                            <MudItem xs="12" sm="4">
                                <div class="d-flex justify-space-between">
                                    <MudText>@TranslationService.GetTranslation("superAdmin.totalUsers"):</MudText>
                                    <MudChip T="string" Color="Color.Primary" Size="Size.Small">@(_statistics?.TotalUsers ?? 0)</MudChip>
                                </div>
                            </MudItem>
                        </MudGrid>
                    </MudCardContent>
                </MudCard>
            </MudItem>

            <!-- Search Filters -->
            <MudItem xs="12">
                <MudCard Elevation="2" Class="mb-4">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">
                                <MudIcon Icon="Icons.Material.Filled.Search" Class="mr-2" />
                                @TranslationService.GetTranslation("superAdmin.searchFilters")
                            </MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudGrid>
                            <MudItem xs="12" md="8">
                                <MudTextField @bind-Value="_searchTerm"
                                              @bind-Value:after="OnSearchChanged"
                                              Label="@TranslationService.GetTranslation("superAdmin.searchByNameOrDomain")"
                                              Variant="Variant.Outlined"
                                              Adornment="Adornment.End"
                                              AdornmentIcon="Icons.Material.Filled.Search"
                                              FullWidth="true" />
                            </MudItem>
                            <MudItem xs="12" md="4">
                                <MudSelect T="string" @bind-Value="_statusFilter" @bind-Value:after="OnStatusFilterChanged" 
                                           Label="@TranslationService.GetTranslation("field.status")" 
                                           Variant="Variant.Outlined"
                                           FullWidth="true">
                                    <MudSelectItem Value="@("all")">@TranslationService.GetTranslation("common.selectAll")</MudSelectItem>
                                    <MudSelectItem Value="@("active")">@TranslationService.GetTranslation("field.active")</MudSelectItem>
                                    <MudSelectItem Value="@("inactive")">@TranslationService.GetTranslation("field.inactive")</MudSelectItem>
                                </MudSelect>
                            </MudItem>
                        </MudGrid>
                    </MudCardContent>
                </MudCard>
            </MudItem>

            <!-- Tenant List -->
            <MudItem xs="12">
                <MudCard Elevation="2">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">
                                <MudIcon Icon="Icons.Material.Filled.List" Class="mr-2" />
                                @TranslationService.GetTranslation("superAdmin.tenantList")
                            </MudText>
                        </CardHeaderContent>
                        <CardHeaderActions>
                            <!-- Quick Actions Toolbar -->
                            <MudToolBar Dense="true" WrapContent="true">
                                <MudTooltip Text="@TranslationService.GetTranslation("tooltip.refresh")">
                                    <MudIconButton Icon="Icons.Material.Filled.Refresh" 
                                                   Color="Color.Primary"
                                                   OnClick="@LoadTenantsAsync" />
                                </MudTooltip>
                                <MudTooltip Text="@TranslationService.GetTranslation("tooltip.export")">
                                    <MudIconButton Icon="Icons.Material.Filled.Download" 
                                                   Color="Color.Secondary"
                                                   OnClick="@ExportTenants" />
                                </MudTooltip>
                                <MudTooltip Text="@TranslationService.GetTranslation("superAdmin.newTenant")">
                                    <MudButton Variant="Variant.Filled" 
                                               Color="Color.Primary" 
                                               StartIcon="Icons.Material.Filled.Add"
                                               OnClick="@OpenCreateTenantDrawer">
                                        @TranslationService.GetTranslation("superAdmin.newTenant")
                                    </MudButton>
                                </MudTooltip>
                            </MudToolBar>
                        </CardHeaderActions>
                    </MudCardHeader>
                    <MudCardContent>
                        @if (_isLoadingTenants)
                        {
                            <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="mt-4" />
                        }
                        else
                        {
                            <!-- Tenant Table with Sortable Columns -->
                            <MudTable T="TenantResponseDto" 
                                      Items="_filteredTenants" 
                                      Hover="true" 
                                      Striped="true"
                                      Loading="_isLoadingTenants"
                                      LoadingProgressColor="Color.Info"
                                      SortLabel="@TranslationService.GetTranslation("tooltip.sort")"
                                      AllowUnsorted="false">
                                <HeaderContent>
                                    <MudTh><MudTableSortLabel SortBy="@(new Func<TenantResponseDto, object>(x => x.Name))">@TranslationService.GetTranslation("field.name")</MudTableSortLabel></MudTh>
                                    <MudTh><MudTableSortLabel SortBy="@(new Func<TenantResponseDto, object>(x => x.DisplayName))">@TranslationService.GetTranslation("field.displayName")</MudTableSortLabel></MudTh>
                                    <MudTh><MudTableSortLabel SortBy="@(new Func<TenantResponseDto, object>(x => x.Domain ?? string.Empty))">@TranslationService.GetTranslation("field.domain")</MudTableSortLabel></MudTh>
                                    <MudTh><MudTableSortLabel SortBy="@(new Func<TenantResponseDto, object>(x => x.ContactEmail))">@TranslationService.GetTranslation("field.contactEmail")</MudTableSortLabel></MudTh>
                                    <MudTh><MudTableSortLabel SortBy="@(new Func<TenantResponseDto, object>(x => x.IsActive))">@TranslationService.GetTranslation("field.status")</MudTableSortLabel></MudTh>
                                    <MudTh><MudTableSortLabel SortBy="@(new Func<TenantResponseDto, object>(x => x.MaxUsers))">@TranslationService.GetTranslation("field.maxUsers")</MudTableSortLabel></MudTh>
                                    <MudTh><MudTableSortLabel InitialDirection="SortDirection.Descending" SortBy="@(new Func<TenantResponseDto, object>(x => x.CreatedAt))">@TranslationService.GetTranslation("field.createdAt")</MudTableSortLabel></MudTh>
                                    <MudTh>@TranslationService.GetTranslation("common.actions")</MudTh>
                                </HeaderContent>
                                <RowTemplate>
                                    <MudTd DataLabel="@TranslationService.GetTranslation("field.name")">
                                        <MudText>@context.Name</MudText>
                                    </MudTd>
                                    <MudTd DataLabel="@TranslationService.GetTranslation("field.displayName")">
                                        <MudText>@context.DisplayName</MudText>
                                    </MudTd>
                                    <MudTd DataLabel="@TranslationService.GetTranslation("field.domain")">
                                        <MudText>@(context.Domain ?? TranslationService.GetTranslation("common.notAvailable"))</MudText>
                                    </MudTd>
                                    <MudTd DataLabel="@TranslationService.GetTranslation("field.contactEmail")">
                                        <MudText>@context.ContactEmail</MudText>
                                    </MudTd>
                                    <MudTd DataLabel="@TranslationService.GetTranslation("field.status")">
                                        <MudChip T="string" Color="@(context.IsActive ? Color.Success : Color.Error)" 
                                                 Size="Size.Small">
                                            @(context.IsActive ? TranslationService.GetTranslation("field.active") : TranslationService.GetTranslation("field.inactive"))
                                        </MudChip>
                                    </MudTd>
                                    <MudTd DataLabel="@TranslationService.GetTranslation("field.maxUsers")">
                                        <MudText>@context.MaxUsers</MudText>
                                    </MudTd>
                                    <MudTd DataLabel="@TranslationService.GetTranslation("field.createdAt")">
                                        <MudText>@context.CreatedAt.ToString("dd/MM/yyyy")</MudText>
                                    </MudTd>
                                    <MudTd DataLabel="@TranslationService.GetTranslation("common.actions")">
                                        <MudButtonGroup Color="Color.Primary" Variant="Variant.Text" Size="Size.Small">
                                            <MudTooltip Text="@TranslationService.GetTranslation("tooltip.viewTenant")">
                                                <MudIconButton Icon="Icons.Material.Filled.Visibility" 
                                                               Color="Color.Info"
                                                               Size="Size.Small"
                                                               OnClick="@(() => ViewTenant(context))" />
                                            </MudTooltip>
                                            <MudTooltip Text="@TranslationService.GetTranslation("tooltip.editTenant")">
                                                <MudIconButton Icon="Icons.Material.Filled.Edit" 
                                                               Color="Color.Primary"
                                                               Size="Size.Small"
                                                               OnClick="@(() => EditTenant(context))" />
                                            </MudTooltip>
                                            <MudTooltip Text="@(context.IsActive ? TranslationService.GetTranslation("tooltip.disableTenant") : TranslationService.GetTranslation("tooltip.enableTenant"))">
                                                <MudIconButton Icon="@(context.IsActive ? Icons.Material.Filled.Block : Icons.Material.Filled.CheckCircle)" 
                                                               Color="@(context.IsActive ? Color.Warning : Color.Success)"
                                                               Size="Size.Small"
                                                               OnClick="@(() => ToggleTenantStatus(context))" />
                                            </MudTooltip>
                                        </MudButtonGroup>
                                    </MudTd>
                                </RowTemplate>
                                <NoRecordsContent>
                                    <MudText>@(_tenants.Any() ? TranslationService.GetTranslation("superAdmin.noTenantsMatchFilters", "Nessun tenant corrisponde ai filtri applicati.") : TranslationService.GetTranslation("superAdmin.noTenantsFound", "Nessun tenant trovato."))</MudText>
                                </NoRecordsContent>
                            </MudTable>
                        }
                    </MudCardContent>
                </MudCard>
            </MudItem>
        </MudGrid>
    </MudContainer>
}

<!-- Tenant Management Drawer -->
<TenantDrawer @bind-IsOpen="_tenantDrawerOpen" 
              @bind-Mode="_tenantDrawerMode"
              OriginalTenant="_selectedTenant"
              AllowEdit="true"
              OnTenantCreated="@OnTenantCreated"
              OnTenantUpdated="@OnTenantUpdated" />

@code {
    private bool _isLoading = true;
    private bool _isAuthorized = false;
    private bool _isLoadingTenants = false;
    private bool _tenantDrawerOpen = false;
    private EntityDrawerMode _tenantDrawerMode = EntityDrawerMode.Create;
    private TenantResponseDto? _selectedTenant;
    private UserDto? _currentUser;
    private string _searchTerm = string.Empty;
    private string _statusFilter = "all";
    private string _selectedTenantFilter = string.Empty;
    
    // Data
    private List<TenantResponseDto> _tenants = new();
    private TenantStatisticsDto? _statistics;
    
    // Computed properties
    private IEnumerable<TenantResponseDto> _filteredTenants => 
        _tenants.Where(t => 
            (string.IsNullOrEmpty(_searchTerm) || 
             t.Name.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase) ||
             t.DisplayName.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase) ||
             (!string.IsNullOrEmpty(t.Domain) && t.Domain.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase))) &&
            (_statusFilter == "all" || 
             (_statusFilter == "active" && t.IsActive) ||
             (_statusFilter == "inactive" && !t.IsActive)) &&
            (string.IsNullOrEmpty(_selectedTenantFilter) ||
             t.Id.ToString() == _selectedTenantFilter));

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Verifica autenticazione
            var isAuthenticated = await AuthService.IsAuthenticatedAsync();
            if (!isAuthenticated)
            {
                NavigationManager.NavigateTo("/login");
                return;
            }

            // Verifica ruolo SuperAdmin
            var isSuperAdmin = await AuthService.IsSuperAdminAsync();
            if (!isSuperAdmin)
            {
                _isAuthorized = false;
                _isLoading = false;
                Snackbar.Add(TranslationService.GetTranslation("superAdmin.accessDeniedSuperAdmin", "Accesso negato. Ãˆ richiesto il ruolo Super Amministratore."), Severity.Warning);
                return;
            }

            // Carica informazioni utente corrente
            _currentUser = await AuthService.GetCurrentUserAsync();
            _isAuthorized = true;
            
            // Carica dati tenant
            await LoadTenantsAsync();
            await LoadStatisticsAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add(TranslationService.GetTranslation("superAdmin.loadingPageError", "Errore nel caricamento della pagina: {0}", ex.Message), Severity.Error);
            NavigationManager.NavigateTo("/");
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task LoadTenantsAsync()
    {
        try
        {
            _isLoadingTenants = true;
            _tenants = (await SuperAdminService.GetTenantsAsync()).ToList();
        }
        catch (Exception ex)
        {
            Snackbar.Add(TranslationService.GetTranslation("superAdmin.loadingTenantsError", "Errore nel caricamento dei tenant: {0}", ex.Message), Severity.Error);
        }
        finally
        {
            _isLoadingTenants = false;
        }
    }

    private async Task LoadStatisticsAsync()
    {
        try
        {
            _statistics = await SuperAdminService.GetTenantStatisticsAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add(TranslationService.GetTranslation("superAdmin.loadingStatisticsError", "Errore nel caricamento delle statistiche: {0}", ex.Message), Severity.Error);
        }
    }

    private async Task OpenCreateTenantDrawer()
    {
        _tenantDrawerMode = EntityDrawerMode.Create;
        _selectedTenant = null;
        _tenantDrawerOpen = true;
        await Task.CompletedTask;
    }

    private async Task OnTenantCreated(TenantResponseDto newTenant)
    {
        _tenants.Add(newTenant);
        await LoadStatisticsAsync();
        StateHasChanged();
    }

    private async Task OnTenantUpdated(TenantResponseDto updatedTenant)
    {
        var index = _tenants.FindIndex(t => t.Id == updatedTenant.Id);
        if (index >= 0)
        {
            _tenants[index] = updatedTenant;
        }
        await LoadStatisticsAsync();
        StateHasChanged();
    }

    private async Task ViewTenant(TenantResponseDto tenant)
    {
        _tenantDrawerMode = EntityDrawerMode.View;
        _selectedTenant = tenant;
        _tenantDrawerOpen = true;
        await Task.CompletedTask;
    }

    private async Task EditTenant(TenantResponseDto tenant)
    {
        _tenantDrawerMode = EntityDrawerMode.Edit;
        _selectedTenant = tenant;
        _tenantDrawerOpen = true;
        await Task.CompletedTask;
    }

    private async Task ToggleTenantStatus(TenantResponseDto tenant)
    {
        var action = tenant.IsActive ? TranslationService.GetTranslation("superAdmin.disable") : TranslationService.GetTranslation("superAdmin.enable");
        var confirmMessage = tenant.IsActive 
            ? TranslationService.GetTranslation("superAdmin.confirmDisable", tenant.DisplayName)
            : TranslationService.GetTranslation("superAdmin.confirmEnable", tenant.DisplayName);
            
        var confirm = await DialogService.ShowMessageBox(
            TranslationService.GetTranslation("common.confirm"),
            confirmMessage,
            yesText: TranslationService.GetTranslation("common.confirm"),
            cancelText: TranslationService.GetTranslation("common.cancel"));

        if (confirm == true)
        {
            try
            {
                // For now, just toggle locally - implement actual API call when available
                tenant.IsActive = !tenant.IsActive;
                await LoadStatisticsAsync();
                
                var successMessage = tenant.IsActive 
                    ? TranslationService.GetTranslation("superAdmin.tenantEnabled")
                    : TranslationService.GetTranslation("superAdmin.tenantDisabled");
                    
                Snackbar.Add(successMessage, Severity.Success);
            }
            catch (Exception ex)
            {
                Snackbar.Add(TranslationService.GetTranslation("superAdmin.toggleTenantStatusError", "Errore nel cambio stato del tenant: {0}", ex.Message), Severity.Error);
            }
        }
    }

    private async Task OnTenantFilterChanged()
    {
        await Task.CompletedTask;
        StateHasChanged();
    }

    private async Task ExportTenants()
    {
        // TODO: Implement export functionality
        Snackbar.Add(TranslationService.GetTranslation("superAdmin.exportFunctionalityComingSoon", "Export functionality will be implemented soon."), Severity.Info);
        await Task.CompletedTask;
    }

    private async Task OnSearchChanged()
    {
        await Task.Delay(300); // Debounce
        StateHasChanged();
    }

    private async Task OnStatusFilterChanged()
    {
        await Task.CompletedTask;
        StateHasChanged();
    }
}