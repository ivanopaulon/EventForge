@page "/superadmin/licenses/new"
@page "/superadmin/licenses/{LicenseId:guid}"
@using Microsoft.AspNetCore.Authorization
@using EventForge.DTOs.Licensing
@using EventForge.Client.Shared.Components
@using System.Text.Json
@attribute [Authorize(Roles = "SuperAdmin")]
@inject ILicenseService LicenseService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject ITranslationService TranslationService
@inject ILogger<LicenseDetail> Logger

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    @if (_isLoading)
    {
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
    }
    else if (_license == null && !_isCreateMode)
    {
        <MudAlert Severity="Severity.Error">
            @TranslationService.GetTranslation("license.notFound", "Licenza non trovata")
        </MudAlert>
    }
    else
    {
        <!-- Page Header -->
        <MudPaper Elevation="2" Class="pa-4 mb-4">
            <div class="d-flex justify-space-between align-center">
                <div>
                    <div class="d-flex align-center gap-2 mb-2">
                        <MudIconButton Icon="@Icons.Material.Filled.ArrowBack" 
                                       Color="Color.Primary"
                                       OnClick="@(() => TryNavigateAway("/superadmin/license-management"))"
                                       Size="Size.Small" />
                        <MudText Typo="Typo.h4">
                            <MudIcon Icon="@Icons.Material.Outlined.Security" Class="mr-2" />
                            @(_isCreateMode 
                                ? TranslationService.GetTranslation("license.create", "Crea nuova licenza") 
                                : _license?.DisplayName)
                        </MudText>

                        @if (HasUnsavedChanges())
                        {
                            <MudChip T="string" Size="Size.Small" Color="Color.Warning" Class="ml-2">
                                @TranslationService.GetTranslation("license.unsavedChanges", "Modifiche non salvate")
                            </MudChip>
                        }
                    </div>
                    @if (!_isCreateMode && _license != null)
                    {
                        <MudText Typo="Typo.body2" Class="mud-text-secondary">
                            @TranslationService.GetTranslation("field.createdAt", "Creato il"): @_license.CreatedAt.ToString("dd/MM/yyyy HH:mm")
                            @if (_license.TenantCount > 0)
                            {
                                <span class="ml-4">
                                    @TranslationService.GetTranslation("license.tenantCount", "Tenant"): @_license.TenantCount
                                </span>
                            }
                        </MudText>
                    }
                </div>
                <div class="d-flex gap-2">
                    <MudButton Variant="Variant.Filled" 
                               Color="Color.Primary" 
                               StartIcon="@Icons.Material.Filled.Save"
                               OnClick="SaveLicenseAsync"
                               Disabled="_isSaving"
                               Size="Size.Small">
                        @TranslationService.GetTranslation("common.save", "Salva")
                    </MudButton>
                </div>
            </div>
        </MudPaper>

        <!-- Form Section -->
        <MudPaper Elevation="2" Class="pa-4">
            <MudForm @ref="_form">
                <MudGrid>
                    <MudItem xs="12" md="6">
                        <MudTextField @bind-Value="_license!.Name"
                                      Label="@($"{TranslationService.GetTranslation("field.name", "Nome")} *")"
                                      Variant="Variant.Outlined"
                                      Required="true"
                                      RequiredError="@TranslationService.GetTranslation("validation.required", "Campo obbligatorio")"
                                      MaxLength="100"
                                      ReadOnly="@(!_isCreateMode)"
                                      Immediate="true"
                                      OnBlur="@(() => MarkChanged())"
                                      aria-describedby="name-help" />
                        <MudText id="name-help" Typo="Typo.caption" Class="mud-input-helper-text">
                            @(_isCreateMode ? 
                                TranslationService.GetTranslation("license.field.nameCreate", "Nome univoco per la licenza") : 
                                TranslationService.GetTranslation("license.field.nameEdit", "Il nome della licenza non può essere modificato"))
                        </MudText>
                    </MudItem>

                    <MudItem xs="12" md="6">
                        <MudTextField @bind-Value="_license!.DisplayName"
                                      Label="@($"{TranslationService.GetTranslation("field.displayName", "Nome visualizzato")} *")"
                                      Variant="Variant.Outlined"
                                      Required="true"
                                      RequiredError="@TranslationService.GetTranslation("validation.required", "Campo obbligatorio")"
                                      MaxLength="200"
                                      Immediate="true"
                                      OnBlur="@(() => MarkChanged())"
                                      aria-describedby="displayName-help" />
                        <MudText id="displayName-help" Typo="Typo.caption" Class="mud-input-helper-text">
                            @TranslationService.GetTranslation("license.field.displayName", "Nome visualizzato della licenza")
                        </MudText>
                    </MudItem>

                    <MudItem xs="12">
                        <MudTextField @bind-Value="_license!.Description"
                                      Label="@TranslationService.GetTranslation("field.description", "Descrizione")"
                                      Variant="Variant.Outlined"
                                      Lines="3"
                                      MaxLength="500"
                                      Immediate="true"
                                      OnBlur="@(() => MarkChanged())"
                                      aria-describedby="description-help" />
                        <MudText id="description-help" Typo="Typo.caption" Class="mud-input-helper-text">
                            @TranslationService.GetTranslation("license.field.description", "Descrizione della licenza e delle sue funzionalità")
                        </MudText>
                    </MudItem>

                    <MudItem xs="12" md="4">
                        <MudNumericField @bind-Value="_license!.MaxUsers"
                                         Label="@($"{TranslationService.GetTranslation("license.field.maxUsers", "Utenti massimi")} *")"
                                         Variant="Variant.Outlined"
                                         Required="true"
                                         RequiredError="@TranslationService.GetTranslation("validation.required", "Campo obbligatorio")"
                                         Min="1"
                                         Max="10000"
                                         Immediate="true"
                                         OnBlur="@(() => MarkChanged())"
                                         aria-describedby="maxUsers-help" />
                        <MudText id="maxUsers-help" Typo="Typo.caption" Class="mud-input-helper-text">
                            @TranslationService.GetTranslation("license.field.maxUsersHelp", "Numero massimo di utenti consentiti")
                        </MudText>
                    </MudItem>

                    <MudItem xs="12" md="4">
                        <MudNumericField @bind-Value="_license!.MaxApiCallsPerMonth"
                                         Label="@($"{TranslationService.GetTranslation("license.field.maxApiCalls", "API calls/mese")} *")"
                                         Variant="Variant.Outlined"
                                         Required="true"
                                         RequiredError="@TranslationService.GetTranslation("validation.required", "Campo obbligatorio")"
                                         Min="100"
                                         Max="1000000"
                                         Immediate="true"
                                         OnBlur="@(() => MarkChanged())"
                                         aria-describedby="maxApiCalls-help" />
                        <MudText id="maxApiCalls-help" Typo="Typo.caption" Class="mud-input-helper-text">
                            @TranslationService.GetTranslation("license.field.maxApiCallsHelp", "Numero massimo di chiamate API per mese")
                        </MudText>
                    </MudItem>

                    <MudItem xs="12" md="4">
                        <MudNumericField @bind-Value="_license!.TierLevel"
                                         Label="@($"{TranslationService.GetTranslation("license.field.tierLevel", "Livello tier")} *")"
                                         Variant="Variant.Outlined"
                                         Required="true"
                                         RequiredError="@TranslationService.GetTranslation("validation.required", "Campo obbligatorio")"
                                         Min="1"
                                         Max="10"
                                         Immediate="true"
                                         OnBlur="@(() => MarkChanged())"
                                         aria-describedby="tierLevel-help" />
                        <MudText id="tierLevel-help" Typo="Typo.caption" Class="mud-input-helper-text">
                            @TranslationService.GetTranslation("license.field.tierLevelHelp", "Livello di priorità della licenza (1=base, 10=premium)")
                        </MudText>
                    </MudItem>

                    <MudItem xs="12">
                        <MudSwitch @bind-Value="_license!.IsActive"
                                   Label="@TranslationService.GetTranslation("field.isActive", "Attiva")"
                                   Color="Color.Primary"
                                   @onchange="@(() => MarkChanged())"
                                   aria-describedby="isActive-help" />
                        <MudText id="isActive-help" Typo="Typo.caption" Class="mud-input-helper-text">
                            @TranslationService.GetTranslation("license.field.isActiveHelp", "Indica se la licenza è disponibile per l'assegnazione")
                        </MudText>
                    </MudItem>

                    @if (!_isCreateMode && _license.Features?.Any() == true)
                    {
                        <MudItem xs="12">
                            <MudText Typo="Typo.h6" Class="mb-3">
                                @TranslationService.GetTranslation("license.features", "Funzionalità incluse")
                            </MudText>
                            <MudStack Spacing="2">
                                @foreach (var feature in _license.Features)
                                {
                                    <MudPaper Class="pa-3" Elevation="1">
                                        <MudText Typo="Typo.subtitle1" Color="Color.Primary">@feature.Name</MudText>
                                        <MudText Typo="Typo.body2" Class="mb-2">@feature.Description</MudText>
                                        @if (feature.RequiredPermissions?.Any() == true)
                                        {
                                            <MudText Typo="Typo.caption" Color="Color.Secondary">
                                                @TranslationService.GetTranslation("license.permissions", "Permessi"): 
                                                @string.Join(", ", feature.RequiredPermissions)
                                            </MudText>
                                        }
                                    </MudPaper>
                                }
                            </MudStack>
                        </MudItem>
                    }
                </MudGrid>
            </MudForm>
        </MudPaper>
    }
</MudContainer>

@code {
    [Parameter] public Guid? LicenseId { get; set; }

    private LicenseDto? _license;
    private bool _isCreateMode => LicenseId == null || LicenseId == Guid.Empty;
    private bool _isLoading = true;
    private bool _isSaving = false;
    private bool _hasLocalChanges = false;
    private string _originalSnapshot = string.Empty;
    private MudForm? _form;

    private readonly JsonSerializerOptions _jsonOptions = new()
    {
        WriteIndented = false,
        DefaultIgnoreCondition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull
    };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (_isCreateMode)
            {
                _license = new LicenseDto
                {
                    IsActive = true,
                    TierLevel = 1,
                    MaxUsers = 10,
                    MaxApiCallsPerMonth = 1000
                };
                _originalSnapshot = JsonSerializer.Serialize(_license, _jsonOptions);
            }
            else
            {
                await LoadLicenseAsync();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error initializing license detail page for LicenseId: {LicenseId}", LicenseId);
            Snackbar.Add(TranslationService.GetTranslation("error.loadFailed", "Errore durante il caricamento"), Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task LoadLicenseAsync()
    {
        try
        {
            if (LicenseId.HasValue)
            {
                _license = await LicenseService.GetLicenseAsync(LicenseId.Value);
                if (_license != null)
                {
                    _originalSnapshot = JsonSerializer.Serialize(_license, _jsonOptions);
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading license {LicenseId}", LicenseId);
            Snackbar.Add(TranslationService.GetTranslation("error.loadFailed", "Errore durante il caricamento della licenza"), Severity.Error);
        }
    }

    private void MarkChanged()
    {
        _hasLocalChanges = true;
    }

    private bool HasUnsavedChanges()
    {
        if (_license == null) return false;
        var currentSnapshot = JsonSerializer.Serialize(_license, _jsonOptions);
        return !string.Equals(currentSnapshot, _originalSnapshot, StringComparison.Ordinal);
    }

    private async Task SaveLicenseAsync()
    {
        if (_form == null) return;

        await _form.Validate();
        if (!_form.IsValid)
        {
            Snackbar.Add(TranslationService.GetTranslation("validation.formInvalid", "Compilare tutti i campi obbligatori"), Severity.Warning);
            return;
        }

        try
        {
            _isSaving = true;

            if (_isCreateMode)
            {
                var createDto = new CreateLicenseDto
                {
                    Name = _license!.Name,
                    DisplayName = _license.DisplayName,
                    Description = _license.Description,
                    MaxUsers = _license.MaxUsers,
                    MaxApiCallsPerMonth = _license.MaxApiCallsPerMonth,
                    TierLevel = _license.TierLevel,
                    IsActive = _license.IsActive
                };

                var created = await LicenseService.CreateLicenseAsync(createDto);
                Snackbar.Add(TranslationService.GetTranslation("license.created", "Licenza creata con successo"), Severity.Success);
                NavigationManager.NavigateTo($"/superadmin/licenses/{created.Id}");
            }
            else if (LicenseId.HasValue)
            {
                await LicenseService.UpdateLicenseAsync(LicenseId.Value, _license!);
                Snackbar.Add(TranslationService.GetTranslation("license.updated", "Licenza aggiornata con successo"), Severity.Success);
                await LoadLicenseAsync();
            }

            _hasLocalChanges = false;
        }
        catch (HttpRequestException httpEx) when (httpEx.StatusCode == System.Net.HttpStatusCode.Forbidden)
        {
            Logger.LogError(httpEx, "Forbidden error saving license");
            Snackbar.Add(
                TranslationService.GetTranslation("error.forbidden", "Non hai i permessi necessari per questa operazione"),
                Severity.Error,
                config => config.VisibleStateDuration = 5000
            );
        }
        catch (HttpRequestException httpEx) when (httpEx.StatusCode == (System.Net.HttpStatusCode)429)
        {
            Logger.LogError(httpEx, "API limit exceeded saving license");
            Snackbar.Add(
                TranslationService.GetTranslation("error.apiLimitExceeded", "Limite di chiamate API superato. Riprova più tardi."),
                Severity.Error,
                config => config.VisibleStateDuration = 5000
            );
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error saving license");
            var errorMessage = ex.Message.Contains("HTTP") || ex.Message.Contains("Errore")
                ? ex.Message
                : TranslationService.GetTranslation("error.saveFailed", "Errore durante il salvataggio");
            Snackbar.Add(errorMessage, Severity.Error, config => config.VisibleStateDuration = 5000);
        }
        finally
        {
            _isSaving = false;
        }
    }

    private async Task TryNavigateAway(string targetUrl)
    {
        if (!HasUnsavedChanges())
        {
            NavigationManager.NavigateTo(targetUrl);
            return;
        }

        var title = TranslationService.GetTranslation("common.confirm", "Conferma");
        var message = TranslationService.GetTranslation("license.unsavedChangesConfirm", "Ci sono modifiche non salvate. Vuoi salvare prima di uscire?");
        var saveText = TranslationService.GetTranslation("common.save", "Salva");
        var discardText = TranslationService.GetTranslation("common.discard", "Non salvare");
        var cancelText = TranslationService.GetTranslation("common.cancel", "Annulla");

        var result = await DialogService.ShowMessageBox(title, message, yesText: saveText, noText: discardText, cancelText: cancelText);

        if (result == true)
        {
            await SaveLicenseAsync();
            if (!_hasLocalChanges)
            {
                NavigationManager.NavigateTo(targetUrl);
            }
        }
        else if (result == false)
        {
            NavigationManager.NavigateTo(targetUrl);
        }
    }
}
