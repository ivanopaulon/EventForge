@page "/superadmin/tenants/new"
@page "/superadmin/tenants/{TenantId:guid}"
@using Microsoft.AspNetCore.Authorization
@using EventForge.DTOs.Tenants
@using EventForge.DTOs.SuperAdmin
@using EventForge.DTOs.Licensing
@using EventForge.DTOs.Common
@using EventForge.Client.Shared.Components
@attribute [Authorize(Roles = "SuperAdmin")]
@inject ISuperAdminService SuperAdminService
@inject ILicenseService LicenseService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject ITranslationService TranslationService
@inject ILogger<TenantDetail> Logger

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    @if (_isLoading)
    {
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
    }
    else if (_tenant == null && !_isCreateMode)
    {
        <MudAlert Severity="Severity.Error">
            @TranslationService.GetTranslation("tenant.notFound", "Tenant non trovato")
        </MudAlert>
    }
    else
    {
        <!-- Page Header -->
        <MudPaper Elevation="2" Class="pa-4 mb-4">
            <div class="d-flex justify-space-between align-center">
                <div>
                    <div class="d-flex align-center gap-2 mb-2">
                        <MudIconButton Icon="@Icons.Material.Filled.ArrowBack" 
                                       Color="Color.Primary"
                                       OnClick="@(() => TryNavigateAway("/superadmin/tenant-management"))"
                                       Size="Size.Small" />
                        <MudText Typo="Typo.h4">
                            <MudIcon Icon="@Icons.Material.Outlined.Business" Class="mr-2" />
                            @(_isCreateMode 
                                ? TranslationService.GetTranslation("drawer.title.creaTenant", "Crea Nuovo Tenant") 
                                : _tenant?.DisplayName)
                        </MudText>

                        @if (HasUnsavedChanges())
                        {
                            <MudChip T="string" Size="Size.Small" Color="Color.Warning" Class="ml-2">
                                @TranslationService.GetTranslation("tenant.unsavedChanges", "Modifiche non salvate")
                            </MudChip>
                        }
                    </div>
                    @if (!_isCreateMode && _tenant != null)
                    {
                        <MudText Typo="Typo.body2" Class="mud-text-secondary">
                            @TranslationService.GetTranslation("field.createdAt", "Creato il"): @_tenant.CreatedAt.ToString("dd/MM/yyyy HH:mm")
                        </MudText>
                    }
                </div>
                <div class="d-flex gap-2">
                    <MudButton Variant="Variant.Filled" 
                               Color="Color.Primary" 
                               StartIcon="@Icons.Material.Filled.Save"
                               OnClick="SaveTenantAsync"
                               Disabled="_isSaving"
                               Size="Size.Small">
                        @TranslationService.GetTranslation("common.save", "Salva")
                    </MudButton>
                </div>
            </div>
        </MudPaper>

        <!-- Form Section -->
        <MudPaper Elevation="2" Class="pa-4">
            <MudForm @ref="_form">
                <MudGrid>
                    <MudItem xs="12" md="6">
                        <MudTextField @bind-Value="_tenant.Name"
                                      Label="@($"{TranslationService.GetTranslation("drawer.field.nomeTenant", "Nome Tenant")} *")"
                                      Variant="Variant.Outlined"
                                      Required="true"
                                      RequiredError="@TranslationService.GetTranslation("drawer.error.nomeTenantObbligatorio", "Il nome del tenant è obbligatorio")"
                                      MaxLength="100"
                                      ReadOnly="@(!_isCreateMode)"
                                      Immediate="true"
                                      OnBlur="@(() => MarkChanged())"
                                      aria-describedby="name-help" />
                        <MudText id="name-help" Typo="Typo.caption" Class="mud-input-helper-text">
                            @(_isCreateMode ? 
                                TranslationService.GetTranslation("drawer.helperText.nomeTenantCreate", "Nome univoco del tenant (non modificabile)") : 
                                TranslationService.GetTranslation("drawer.helperText.nomeTenantEdit", "Nome tenant (non modificabile)"))
                        </MudText>
                    </MudItem>

                    <MudItem xs="12" md="6">
                        <MudTextField @bind-Value="_tenant.DisplayName"
                                      Label="@($"{TranslationService.GetTranslation("drawer.field.nomeVisualizzato", "Nome Visualizzato")} *")"
                                      Variant="Variant.Outlined"
                                      Required="true"
                                      RequiredError="@TranslationService.GetTranslation("drawer.error.nomeVisualizzatoObbligatorio", "Il nome visualizzato è obbligatorio")"
                                      MaxLength="200"
                                      Immediate="true"
                                      OnBlur="@(() => MarkChanged())"
                                      aria-describedby="displayName-help" />
                        <MudText id="displayName-help" Typo="Typo.caption" Class="mud-input-helper-text">
                            @TranslationService.GetTranslation("drawer.helperText.nomeVisualizzato", "Nome mostrato nell'interfaccia")
                        </MudText>
                    </MudItem>

                    <MudItem xs="12">
                        <MudTextField @bind-Value="_tenant.Description"
                                      Label="@TranslationService.GetTranslation("drawer.field.descrizione", "Descrizione")"
                                      Variant="Variant.Outlined"
                                      Lines="3"
                                      MaxLength="500"
                                      OnBlur="@(() => MarkChanged())"
                                      aria-describedby="description-help" />
                        <MudText id="description-help" Typo="Typo.caption" Class="mud-input-helper-text">
                            @TranslationService.GetTranslation("drawer.helperText.descrizione", "Descrizione opzionale")
                        </MudText>
                    </MudItem>

                    <MudItem xs="12" md="6">
                        <MudTextField @bind-Value="_tenant.Domain"
                                      Label="@TranslationService.GetTranslation("drawer.field.dominio", "Dominio")"
                                      Variant="Variant.Outlined"
                                      MaxLength="100"
                                      OnBlur="@(() => MarkChanged())"
                                      aria-describedby="domain-help" />
                        <MudText id="domain-help" Typo="Typo.caption" Class="mud-input-helper-text">
                            @TranslationService.GetTranslation("drawer.helperText.dominio", "Dominio personalizzato")
                        </MudText>
                    </MudItem>

                    <MudItem xs="12" md="6">
                        <MudTextField @bind-Value="_tenant.ContactEmail"
                                      Label="@($"{TranslationService.GetTranslation("drawer.field.emailContatto", "Email Contatto")} *")"
                                      Variant="Variant.Outlined"
                                      InputType="InputType.Email"
                                      Required="true"
                                      RequiredError="@TranslationService.GetTranslation("drawer.error.emailContattoObbligatoria", "L'email di contatto è obbligatoria")"
                                      MaxLength="256"
                                      Immediate="true"
                                      OnBlur="@(() => MarkChanged())"
                                      aria-describedby="contactEmail-help" />
                        <MudText id="contactEmail-help" Typo="Typo.caption" Class="mud-input-helper-text">
                            @TranslationService.GetTranslation("drawer.helperText.emailContatto", "Email principale di contatto")
                        </MudText>
                    </MudItem>

                    <MudItem xs="12" md="6">
                        <MudNumericField @bind-Value="_tenant.MaxUsers"
                                         Label="@($"{TranslationService.GetTranslation("drawer.field.massimoUtenti", "Massimo Utenti")} *")"
                                         Variant="Variant.Outlined"
                                         Min="1"
                                         Max="10000"
                                         Required="true"
                                         OnBlur="@(() => MarkChanged())"
                                         aria-describedby="maxUsers-help" />
                        <MudText id="maxUsers-help" Typo="Typo.caption" Class="mud-input-helper-text">
                            @TranslationService.GetTranslation("drawer.helperText.massimoUtenti", "Numero massimo di utenti")
                        </MudText>
                    </MudItem>

                    @if (!_isCreateMode && _tenant != null)
                    {
                        <MudItem xs="12" md="6">
                            <MudTextField Value="@_tenant.Id.ToString()"
                                          Label="@TranslationService.GetTranslation("drawer.field.idTenant", "ID")"
                                          Variant="Variant.Outlined"
                                          ReadOnly="true"
                                          aria-label="@TranslationService.GetTranslation("drawer.aria.identificativoUnico", "Identificativo unico")" />
                        </MudItem>

                        <MudItem xs="12" md="6">
                            <MudTextField Value="@_userCount.ToString()"
                                          Label="@TranslationService.GetTranslation("drawer.field.utentiAttuali", "Utenti Attuali")"
                                          Variant="Variant.Outlined"
                                          ReadOnly="true"
                                          aria-label="@TranslationService.GetTranslation("drawer.aria.numeroAttualeUtenti", "Numero attuale utenti")" />
                        </MudItem>
                    }
                </MudGrid>
            </MudForm>
        </MudPaper>
    }
</MudContainer>

@code {
    [Parameter] public Guid? TenantId { get; set; }

    private TenantResponseDto? _tenant;
    private bool _isLoading = true;
    private bool _isCreateMode => TenantId == null || TenantId == Guid.Empty;
    private bool _isSaving = false;
    private MudForm? _form;
    private int _userCount = 0;

    private string _originalTenantSnapshot = string.Empty;
    private bool _hasLocalChanges = false;

    private static readonly System.Text.Json.JsonSerializerOptions _jsonOptions = new()
    {
        PropertyNameCaseInsensitive = true,
        DefaultIgnoreCondition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadTenantAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (_tenant?.Id != TenantId)
            await LoadTenantAsync();
    }

    private async Task LoadTenantAsync()
    {
        _isLoading = true;
        try
        {
            if (_isCreateMode)
            {
                _tenant = new TenantResponseDto 
                { 
                    Name = string.Empty, 
                    DisplayName = string.Empty, 
                    ContactEmail = string.Empty,
                    MaxUsers = 10,
                    IsActive = true
                };
                _originalTenantSnapshot = SerializeTenant(_tenant);
            }
            else if (TenantId.HasValue)
            {
                var tenant = await SuperAdminService.GetTenantAsync(TenantId.Value);
                _tenant = tenant;
                if (_tenant != null)
                {
                    _originalTenantSnapshot = SerializeTenant(_tenant);
                    await LoadUserCountAsync();
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading tenant {TenantId}", TenantId);
            Snackbar.Add(TranslationService.GetTranslation("tenant.loadError", "Errore nel caricamento del tenant"), Severity.Error);
        }
        finally
        {
            _isLoading = false;
            _hasLocalChanges = false;
        }
    }

    private async Task LoadUserCountAsync()
    {
        if (_tenant == null || _isCreateMode) return;

        try
        {
            var users = await SuperAdminService.GetUsersAsync(_tenant.Id);
            _userCount = users?.Count() ?? 0;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to load user count for tenant {TenantId}", _tenant.Id);
            _userCount = 0;
        }
    }

    private async Task SaveTenantAsync()
    {
        if (_tenant == null || _form == null) return;
        await _form.Validate();
        if (!_form.IsValid) return;

        _isSaving = true;
        try
        {
            if (_isCreateMode)
            {
                var createDto = new CreateTenantDto
                {
                    Name = _tenant.Name,
                    Code = _tenant.Code,
                    DisplayName = _tenant.DisplayName,
                    Description = _tenant.Description,
                    Domain = _tenant.Domain,
                    ContactEmail = _tenant.ContactEmail,
                    MaxUsers = _tenant.MaxUsers
                };
                var created = await SuperAdminService.CreateTenantAsync(createDto);
                Snackbar.Add(TranslationService.GetTranslation("messages.createSuccessful", "Creato con successo"), Severity.Success);
                NavigationManager.NavigateTo($"/superadmin/tenants/{created.Id}");
            }
            else if (TenantId.HasValue)
            {
                var updateDto = new UpdateTenantDto
                {
                    DisplayName = _tenant.DisplayName,
                    Description = _tenant.Description,
                    Domain = _tenant.Domain,
                    ContactEmail = _tenant.ContactEmail,
                    MaxUsers = _tenant.MaxUsers
                };
                await SuperAdminService.UpdateTenantAsync(TenantId.Value, updateDto);
                Snackbar.Add(TranslationService.GetTranslation("messages.updateSuccessful", "Aggiornato con successo"), Severity.Success);
                await LoadTenantAsync();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error saving tenant");
            Snackbar.Add(TranslationService.GetTranslation("tenant.saveError", "Errore nel salvataggio del tenant"), Severity.Error);
        }
        finally
        {
            _isSaving = false;
        }
    }

    private void MarkChanged()
    {
        _hasLocalChanges = true;
        StateHasChanged();
    }

    private string SerializeTenant(TenantResponseDto? tenant)
    {
        if (tenant == null) return string.Empty;
        return System.Text.Json.JsonSerializer.Serialize(tenant, _jsonOptions);
    }

    private bool HasUnsavedChanges()
    {
        if (_tenant == null) return false;
        if (_hasLocalChanges) return true;
        var current = SerializeTenant(_tenant);
        return !string.Equals(current, _originalTenantSnapshot, StringComparison.Ordinal);
    }

    private async Task TryNavigateAway(string target)
    {
        if (!HasUnsavedChanges())
        {
            NavigationManager.NavigateTo(target);
            return;
        }

        var title = TranslationService.GetTranslation("common.confirm", "Conferma");
        var message = TranslationService.GetTranslation("tenant.unsavedChangesConfirm", "Ci sono modifiche non salvate. Vuoi salvare prima di uscire?");
        var saveText = TranslationService.GetTranslation("common.save", "Salva");
        var discardText = TranslationService.GetTranslation("common.discard", "Non salvare");
        var cancelText = TranslationService.GetTranslation("common.cancel", "Annulla");

        var result = await DialogService.ShowMessageBox(title, message, yesText: saveText, noText: discardText, cancelText: cancelText);

        if (result == true)
        {
            await SaveTenantAsync();
            NavigationManager.NavigateTo(target);
        }
        else if (result == false)
        {
            NavigationManager.NavigateTo(target);
        }
    }
}
