@page "/superadmin/translation-management"
@using EventForge.Client.Services
@using EventForge.Client.Shared.Components
@using EventForge.DTOs.SuperAdmin
@inject ITranslationService TranslationService
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject IAuthService AuthService
@attribute [Authorize(Roles = "SuperAdmin")]

<PageTitle>@TranslationService.GetTranslation("superAdmin.pageTitle", "{0} - EventForge Super Admin", TranslationService.GetTranslation("superAdmin.translationManagement", "Translation Management"))</PageTitle>

@* SuperAdminBanner removed as per refactoring requirements *@

@if (_isLoading)
{
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" />
}
else if (!_isAuthorized)
{
    <MudContainer MaxWidth="MaxWidth.Medium" Class="mt-8">
        <MudPaper Class="pa-2 pa-sm-3 pa-md-4" Elevation="4">
            <MudGrid Justify="Justify.Center">
                <MudItem xs="12">
                    <div class="d-flex flex-column align-center">
                        <MudIcon Icon="Icons.Material.Filled.Block" Color="Color.Error" Size="Size.Medium" Style="font-size: 48px;" />
                        <MudText Typo="Typo.h4" Align="Align.Center" Class="mb-4">@TranslationService.GetTranslation("error.accessDenied", "Accesso Negato")</MudText>
                        <MudText Typo="Typo.body1" Align="Align.Center" Class="mb-4">
                            @TranslationService.GetTranslation("superAdmin.superAdminRoleRequired", "Non hai i permessi per accedere a questa pagina. Ãˆ richiesto il ruolo Super Amministratore.")
                        </MudText>
                        <MudButton Variant="Variant.Filled" 
                                   Color="Color.Primary" 
                                   StartIcon="Icons.Material.Filled.ArrowBack"
                                   OnClick="@(() => Navigation.NavigateTo("/"))">
                            @TranslationService.GetTranslation("superAdmin.returnToHome", "Torna alla Home")
                        </MudButton>
                    </div>
                </MudItem>
            </MudGrid>
        </MudPaper>
    </MudContainer>
}
else
{
    <MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
        <MudText Typo="Typo.h4" Class="mb-8">
            <MudIcon Icon="Icons.Material.Filled.Translate" Class="mr-2" />
            @TranslationService.GetTranslation("superAdmin.translationManagement", "Translation Management")
        </MudText>

        <!-- Reduced spacing with minimal margins between components -->
        <MudStack Spacing="1">
            <!-- Statistics Section: Direct MudCollapse without MudCard wrapper, closed by default -->
            <div class="border rounded pa-1 mb-1">
                <div style="cursor: pointer;" @onclick="@(() => _statisticsExpanded = !_statisticsExpanded)" 
                     class="d-flex align-center pa-2 hover:bg-gray-100">
                    <MudIcon Icon="Icons.Material.Filled.Analytics" Class="mr-2" />
                    <MudText Typo="Typo.h6" Class="flex-grow-1">
                        @TranslationService.GetTranslation("superAdmin.showStatistics", "Mostra Statistiche")
                    </MudText>
                    <MudIconButton Icon="@(_statisticsExpanded ? Icons.Material.Outlined.ExpandLess : Icons.Material.Outlined.ExpandMore)"
                                   Size="Size.Small"
                                   Color="Color.Inherit"
                                   aria-label="@TranslationService.GetTranslation("tooltip.toggleStatistics", "Mostra/Nascondi statistiche")" />
                </div>
                <MudCollapse Expanded="_statisticsExpanded">
                    <div class="pa-2 mb-1">
                        <div class="d-flex justify-space-between mb-2">
                            <MudText>@TranslationService.GetTranslation("superAdmin.totalKeys", "Chiavi Totali"):</MudText>
                            <MudChip T="string" Color="Color.Info" Size="Size.Small">@_totalTranslations</MudChip>
                        </div>
                        <div class="d-flex justify-space-between mb-2">
                            <MudText>@TranslationService.GetTranslation("superAdmin.translatedKeys", "Chiavi Tradotte"):</MudText>
                            <MudChip T="string" Color="Color.Success" Size="Size.Small">@_translatedKeys</MudChip>
                        </div>
                        <div class="d-flex justify-space-between mb-2">
                            <MudText>@TranslationService.GetTranslation("superAdmin.missingKeys", "Chiavi Mancanti"):</MudText>
                            <MudChip T="string" Color="Color.Warning" Size="Size.Small">@_missingKeys</MudChip>
                        </div>
                        <MudDivider />
                        <div class="d-flex justify-space-between mt-2">
                            <MudText>@TranslationService.GetTranslation("superAdmin.completionPercentage", "Completamento"):</MudText>
                            <MudChip T="string" Color="Color.Primary" Size="Size.Small">@(_completionPercentage.ToString("F1"))%</MudChip>
                        </div>
                    </div>
                </MudCollapse>
            </div>

            <!-- Search Filters Section: Direct MudCollapse without MudCard wrapper, closed by default -->
            <div class="border rounded pa-1 mb-1">
                <div style="cursor: pointer;" @onclick="@(() => _filtersExpanded = !_filtersExpanded)" 
                     class="d-flex align-center pa-2 hover:bg-gray-100">
                    <MudIcon Icon="@Icons.Material.Outlined.FilterList" Class="mr-2" />
                    <MudText Typo="Typo.h6" Class="flex-grow-1">
                        @TranslationService.GetTranslation("superAdmin.searchFilters", "Filtri e Ricerca")
                    </MudText>
                    <MudIconButton Icon="@(_filtersExpanded ? Icons.Material.Outlined.ExpandLess : Icons.Material.Outlined.ExpandMore)"
                                   Size="Size.Small"
                                   Color="Color.Inherit"
                                   aria-label="@TranslationService.GetTranslation("tooltip.toggleFilters", "Mostra/Nascondi filtri")" />
                </div>
                <MudCollapse Expanded="_filtersExpanded">
                    <div class="pa-2 mb-1">
                        <!-- Filters on single horizontal line as required -->
                        <div class="d-flex gap-4 align-center">
                            <MudSelect T="string" 
                                       Value="@_selectedLanguage" 
                                       ValueChanged="@OnLanguageFilterChanged"
                                       Label="@TranslationService.GetTranslation("common.language", "Lingua")"
                                       Variant="Variant.Outlined"
                                       Style="flex: 1;">
                                <MudSelectItem Value="@("")">@TranslationService.GetTranslation("superAdmin.allLanguages", "Tutte le lingue")</MudSelectItem>
                                @foreach (var lang in TranslationService.GetAvailableLanguages())
                                {
                                    <MudSelectItem Value="@lang.Key">@lang.Value</MudSelectItem>
                                }
                            </MudSelect>
                            <MudTextField T="string" 
                                          Value="@_searchTerm" 
                                          ValueChanged="@OnSearchChanged"
                                          Label="@TranslationService.GetTranslation("common.search", "Cerca")"
                                          Variant="Variant.Outlined"
                                          Adornment="Adornment.End"
                                          AdornmentIcon="@Icons.Material.Outlined.Search"
                                          Style="flex: 2;" />
                            <MudTooltip Text="@TranslationService.GetTranslation("tooltip.clearFilters", "Pulisci tutti i filtri")">
                                <MudIconButton Icon="@Icons.Material.Outlined.Clear"
                                               OnClick="@ClearFilters"
                                               aria-label="@TranslationService.GetTranslation("tooltip.clearFilters", "Pulisci tutti i filtri")" />
                            </MudTooltip>
                        </div>
                    </div>
                </MudCollapse>
            </div>

            <!-- Data Table: Main content with toolbar and translations list -->
            <MudCard Elevation="2" Class="mb-1">
                <MudCardHeader Class="pa-2">
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">
                            <MudIcon Icon="Icons.Material.Filled.List" Class="mr-2" />
                            @TranslationService.GetTranslation("superAdmin.translationList", "Lista Traduzioni")
                        </MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        <!-- Toolbar with only MudIconButton and semantic icons as required -->
                        <MudToolBar Dense="true" WrapContent="true" Class="pa-1">
                            <MudTooltip Text="@TranslationService.GetTranslation("tooltip.refresh", "Aggiorna dati")">
                                <MudIconButton Icon="@Icons.Material.Outlined.Refresh" 
                                               Color="Color.Primary"
                                               OnClick="@LoadTranslations"
                                               aria-label="@TranslationService.GetTranslation("tooltip.refresh", "Aggiorna dati")" />
                            </MudTooltip>
                            <MudTooltip Text="@TranslationService.GetTranslation("tooltip.export", "Esporta dati")">
                                <MudIconButton Icon="Icons.Material.Filled.Download" 
                                               Color="Color.Secondary"
                                               OnClick="@ExportTranslations"
                                               aria-label="@TranslationService.GetTranslation("tooltip.export", "Esporta dati")" />
                            </MudTooltip>
                            <MudTooltip Text="@TranslationService.GetTranslation("tooltip.import", "Importa dati")">
                                <MudIconButton Icon="Icons.Material.Filled.Upload" 
                                               Color="Color.Secondary"
                                               OnClick="@ImportTranslations"
                                               aria-label="@TranslationService.GetTranslation("tooltip.import", "Importa dati")" />
                            </MudTooltip>
                            <MudDivider Vertical="true" Class="mx-1" />
                            <MudTooltip Text="@TranslationService.GetTranslation("superAdmin.addTranslation", "Aggiungi traduzione")">
                                <MudIconButton Icon="@Icons.Material.Outlined.Add"
                                               Color="Color.Primary" 
                                               OnClick="@OpenCreateDialog"
                                               aria-label="@TranslationService.GetTranslation("superAdmin.addTranslation", "Aggiungi traduzione")" />
                            </MudTooltip>
                        </MudToolBar>
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardContent Class="pa-1">
                        <!-- 
                            MudTable Implementation: Follows EventForge UI standards
                            - All columns sortable with logical default (Key ASC)
                            - Responsive with DataLabel attributes for mobile
                            - Row actions using MudIconButton with semantic icons
                            - Translated tooltips for all interactive elements
                            - Loading states and empty state messages
                        -->
                        <MudTable T="TranslationDto" 
                                  Items="@_filteredTranslations" 
                                  Hover="true" 
                                  Striped="true"
                                  Dense="true"
                                  Loading="@_isLoadingTranslations"
                                  LoadingProgressColor="Color.Info"
                                  SortLabel="@TranslationService.GetTranslation("tooltip.sort", "Ordina")"
                                  AllowUnsorted="false"
                                  FixedHeader="true"
                                  Height="600px">
                            <HeaderContent>
                                <MudTh><MudTableSortLabel SortBy="@(new Func<TranslationDto, object>(x => x.Language))">@TranslationService.GetTranslation("superAdmin.languageCode", "Lingua")</MudTableSortLabel></MudTh>
                                <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="@(new Func<TranslationDto, object>(x => x.Key))">@TranslationService.GetTranslation("superAdmin.translationKey", "Chiave")</MudTableSortLabel></MudTh>
                                <MudTh><MudTableSortLabel SortBy="@(new Func<TranslationDto, object>(x => x.Value))">@TranslationService.GetTranslation("superAdmin.translationValue", "Valore")</MudTableSortLabel></MudTh>
                                <MudTh><MudTableSortLabel SortBy="@(new Func<TranslationDto, object>(x => x.ModifiedAt ?? x.CreatedAt))">@TranslationService.GetTranslation("superAdmin.lastModified", "Ultima Modifica")</MudTableSortLabel></MudTh>
                                <MudTh>@TranslationService.GetTranslation("common.actions", "Azioni")</MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd DataLabel="@TranslationService.GetTranslation("superAdmin.languageCode", "Lingua")">
                                    <MudChip T="string" Color="Color.Primary" Size="Size.Small">
                                        @context.Language.ToUpper()
                                    </MudChip>
                                </MudTd>
                                <MudTd DataLabel="@TranslationService.GetTranslation("superAdmin.translationKey", "Chiave")">
                                    <MudText>@context.Key</MudText>
                                </MudTd>
                                <MudTd DataLabel="@TranslationService.GetTranslation("superAdmin.translationValue", "Valore")">
                                    <MudText Style="max-width: 300px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;">
                                        @context.Value
                                    </MudText>
                                </MudTd>
                                <MudTd DataLabel="@TranslationService.GetTranslation("superAdmin.lastModified", "Ultima Modifica")">
                                    @if (context.ModifiedAt.HasValue)
                                    {
                                        <MudText Typo="Typo.caption">
                                            @context.ModifiedAt.Value.ToString("dd/MM/yyyy HH:mm")
                                        </MudText>
                                    }
                                    else
                                    {
                                        <MudText Typo="Typo.caption" Color="Color.Secondary">
                                            @context.CreatedAt.ToString("dd/MM/yyyy HH:mm")
                                        </MudText>
                                    }
                                </MudTd>
                                <MudTd DataLabel="@TranslationService.GetTranslation("common.actions", "Azioni")">
                                    <MudButtonGroup Color="Color.Primary" Variant="Variant.Text" Size="Size.Small">
                                        <MudTooltip Text="@TranslationService.GetTranslation("tooltip.edit", "Modifica")">
                                            <MudIconButton Icon="@Icons.Material.Outlined.Edit" 
                                                           Color="Color.Primary" 
                                                           Size="Size.Small"
                                                           OnClick="@(() => EditTranslation(context))" />
                                        </MudTooltip>
                                        <MudTooltip Text="@TranslationService.GetTranslation("tooltip.delete", "Elimina")">
                                            <MudIconButton Icon="@Icons.Material.Outlined.Delete" 
                                                           Color="Color.Error" 
                                                           Size="Size.Small"
                                                           OnClick="@(() => DeleteTranslation(context))" />
                                        </MudTooltip>
                                    </MudButtonGroup>
                                </MudTd>
                            </RowTemplate>
                            <NoRecordsContent>
                                <MudText>@TranslationService.GetTranslation("superAdmin.noTranslationsFound", "Nessuna traduzione trovata per i filtri correnti.")</MudText>
                            </NoRecordsContent>
                        </MudTable>
                    </MudCardContent>
                </MudCard>
        </MudStack>
    </MudContainer>
}

@code {
    private bool _isLoading = true;
    private bool _isAuthorized = false;
    private bool _isLoadingTranslations = true;
    
    // MudCollapse state management (all closed by default as per issue #98)
    private bool _statisticsExpanded = false;      // Closed by default
    private bool _filtersExpanded = false;         // Closed by default
    
    private List<TranslationDto> _translations = new();
    private IEnumerable<TranslationDto> _filteredTranslations = new List<TranslationDto>();
    private string _selectedLanguage = "";
    private string _searchTerm = "";
    
    // Statistics
    private int _totalTranslations = 0;
    private int _translatedKeys = 0;
    private int _missingKeys = 0;
    private double _completionPercentage = 0.0;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Set all collapse sections to closed by default as per issue #98 requirements
            _statisticsExpanded = false;
            _filtersExpanded = false;
            // Verify authentication
            var isAuthenticated = await AuthService.IsAuthenticatedAsync();
            if (!isAuthenticated)
            {
                Navigation.NavigateTo("/login");
                return;
            }

            // Verify SuperAdmin role
            var isSuperAdmin = await AuthService.IsSuperAdminAsync();
            if (!isSuperAdmin)
            {
                _isAuthorized = false;
                _isLoading = false;
                Snackbar.Add(TranslationService.GetTranslation("superAdmin.accessDeniedSuperAdmin", "Accesso negato. Ãˆ richiesto il ruolo Super Amministratore."), Severity.Warning);
                return;
            }

            _isAuthorized = true;
            LoadTranslations();
            FilterTranslations();
        }
        catch (Exception ex)
        {
            Snackbar.Add(TranslationService.GetTranslation("superAdmin.loadingPageError", "Errore nel caricamento della pagina: {0}", ex.Message), Severity.Error);
            Navigation.NavigateTo("/");
        }
        finally
        {
            _isLoading = false;
        }
    }

    private void LoadTranslations()
    {
        try
        {
            _isLoadingTranslations = true;
            
            // TODO: Replace with actual API call
            // For now, create mock data
            _translations = GenerateMockTranslations();
            CalculateStatistics();
            
            _isLoadingTranslations = false;
        }
        catch (Exception ex)
        {
            Snackbar.Add(TranslationService.GetTranslation("superAdmin.loadingTranslationsError", "Errore nel caricamento delle traduzioni: {0}", ex.Message), Severity.Error);
            _isLoadingTranslations = false;
        }
    }

    private void CalculateStatistics()
    {
        _totalTranslations = _translations.Count;
        _translatedKeys = _translations.Count(t => !string.IsNullOrEmpty(t.Value) && !t.Value.StartsWith("["));
        _missingKeys = _totalTranslations - _translatedKeys;
        _completionPercentage = _totalTranslations > 0 ? (double)_translatedKeys / _totalTranslations * 100 : 0;
    }

    private void FilterTranslations()
    {
        _filteredTranslations = _translations.AsEnumerable();
        
        if (!string.IsNullOrWhiteSpace(_selectedLanguage))
        {
            _filteredTranslations = _filteredTranslations.Where(t => t.Language == _selectedLanguage);
        }
        
        if (!string.IsNullOrWhiteSpace(_searchTerm))
        {
            _filteredTranslations = _filteredTranslations.Where(t => 
                t.Key.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase) ||
                t.Value.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase));
        }
        
        StateHasChanged();
    }

    private void OnLanguageFilterChanged(string language)
    {
        _selectedLanguage = language;
        FilterTranslations();
    }

    private void OnSearchChanged(string search)
    {
        _searchTerm = search;
        FilterTranslations();
    }

    private void ClearFilters()
    {
        _selectedLanguage = "";
        _searchTerm = "";
        FilterTranslations();
    }

    private void OpenCreateDialog()
    {
        // TODO: Implement create dialog
        Snackbar.Add(TranslationService.GetTranslation("superAdmin.featureInDevelopment", "FunzionalitÃ  in sviluppo"), Severity.Info);
    }

    private void EditTranslation(TranslationDto translation)
    {
        // TODO: Implement edit dialog
        Snackbar.Add(TranslationService.GetTranslation("superAdmin.editTranslationTodo", "Modifica traduzione: {0}", translation.Key), Severity.Info);
    }

    private void DeleteTranslation(TranslationDto translation)
    {
        // TODO: Implement delete confirmation
        Snackbar.Add(TranslationService.GetTranslation("superAdmin.deleteTranslationTodo", "Eliminazione traduzione: {0}", translation.Key), Severity.Warning);
    }

    private void ExportTranslations()
    {
        // TODO: Implement export functionality
        Snackbar.Add(TranslationService.GetTranslation("superAdmin.exportFunctionality", "FunzionalitÃ  di esportazione in sviluppo"), Severity.Info);
    }

    private void ImportTranslations()
    {
        // TODO: Implement import functionality
        Snackbar.Add(TranslationService.GetTranslation("superAdmin.importFunctionality", "FunzionalitÃ  di importazione in sviluppo"), Severity.Info);
    }

    // Mock data for development
    private List<TranslationDto> GenerateMockTranslations()
    {
        var mockData = new List<TranslationDto>();
        var languages = new[] { "it", "en", "es", "fr" };
        var sampleKeys = new[]
        {
            "common.save", "common.cancel", "common.delete", "common.edit",
            "auth.login", "auth.logout", "auth.username", "auth.password",
            "field.name", "field.email", "field.firstName", "field.lastName",
            "navigation.home", "navigation.dashboard", "navigation.users",
            "superAdmin.tenantManagement", "superAdmin.userManagement"
        };

        var sampleValues = new Dictionary<string, Dictionary<string, string>>
        {
            ["it"] = new Dictionary<string, string> { ["common.save"] = "Salva", ["common.cancel"] = "Annulla", ["auth.login"] = "Accedi" },
            ["en"] = new Dictionary<string, string> { ["common.save"] = "Save", ["common.cancel"] = "Cancel", ["auth.login"] = "Login" },
            ["es"] = new Dictionary<string, string> { ["common.save"] = "Guardar", ["common.cancel"] = "Cancelar", ["auth.login"] = "Iniciar sesiÃ³n" },
            ["fr"] = new Dictionary<string, string> { ["common.save"] = "Enregistrer", ["common.cancel"] = "Annuler", ["auth.login"] = "Connexion" }
        };

        foreach (var lang in languages)
        {
            foreach (var key in sampleKeys)
            {
                mockData.Add(new TranslationDto
                {
                    Id = Guid.NewGuid(),
                    Language = lang,
                    Key = key,
                    Value = sampleValues.ContainsKey(lang) && sampleValues[lang].ContainsKey(key) 
                        ? sampleValues[lang][key] 
                        : $"[{key}]",
                    CreatedAt = DateTime.UtcNow.AddDays(-Random.Shared.Next(1, 30)),
                    ModifiedAt = Random.Shared.Next(0, 2) == 1 ? DateTime.UtcNow.AddDays(-Random.Shared.Next(1, 10)) : null,
                    ModifiedBy = Random.Shared.Next(0, 2) == 1 ? "admin" : null
                });
            }
        }

        return mockData.OrderBy(t => t.Language).ThenBy(t => t.Key).ToList();
    }
}