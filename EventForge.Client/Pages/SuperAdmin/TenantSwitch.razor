@page "/superadmin/tenant-switch"
@using Microsoft.AspNetCore.Authorization
@using EventForge.Client.Shared.Components
@attribute [Authorize(Roles = "SuperAdmin")]
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject ITranslationService TranslationService

<SuperAdminPageLayout PageTitle="@TranslationService.GetTranslation("superAdmin.tenantSwitch", "Switch Tenant")"
                      PageIcon="@Icons.Material.Outlined.SwapHoriz"
                      IsLoading="_isLoading"
                      IsAuthorized="_isAuthorized"
                      OnNavigateHome="@(() => NavigationManager.NavigateTo("/"))">

    <!-- Current Status Section -->
    <SuperAdminCollapsibleSection SectionTitle="@TranslationService.GetTranslation("superAdmin.currentStatus", "Stato Corrente")"
                                  SectionIcon="@Icons.Material.Outlined.AdminPanelSettings"
                                  @bind-IsExpanded="_statusExpanded">
        <div class="d-flex align-center">
            <MudAvatar Color="Color.Primary" Size="Size.Medium" Class="mr-2">
                <MudIcon Icon="@Icons.Material.Outlined.AdminPanelSettings" />
            </MudAvatar>
            <div>
                <MudText Typo="Typo.h6">@TranslationService.GetTranslation("superAdmin.superAdministrator", "Super Amministratore: {0}", _currentUser?.FullName ?? "N/A")</MudText>
                <div class="d-flex ga-2 mt-2">
                    <MudChip T="string" Color="Color.Warning" Size="Size.Small">Super Admin</MudChip>
                    @if (_isImpersonating)
                    {
                        <MudChip T="string" Color="Color.Error" Size="Size.Small">@TranslationService.GetTranslation("superAdmin.impersonationMode", "Modalità Impersonazione")</MudChip>
                    }
                    @if (!string.IsNullOrEmpty(_currentTenant))
                    {
                        <MudChip T="string" Color="Color.Info" Size="Size.Small">@TranslationService.GetTranslation("superAdmin.tenantContext", "Tenant: {0}", _currentTenant)</MudChip>
                    }
                </div>
            </div>
        </div>
    </SuperAdminCollapsibleSection>

    <!-- Switch Tenant Section -->
    <SuperAdminCollapsibleSection SectionTitle="@TranslationService.GetTranslation("superAdmin.changeTenantContext", "Cambia Contesto Tenant")"
                                  SectionIcon="@Icons.Material.Outlined.Business"
                                  @bind-IsExpanded="_tenantSwitchExpanded">
        <MudStack Spacing="3">
            <MudSelect T="string" @bind-Value="_selectedTenantId" 
                       Label="@TranslationService.GetTranslation("superAdmin.selectTenant", "Seleziona Tenant")" 
                       Variant="Variant.Outlined"
                       FullWidth="true">
                <MudSelectItem Value="@("")">@TranslationService.GetTranslation("superAdmin.noTenantSuperAdminMode", "Nessun tenant (modalità SuperAdmin)")</MudSelectItem>
                <!-- TODO: Popolare con lista tenant da API -->
            </MudSelect>
            
            <MudTextField @bind-Value="_switchReason"
                          Label="@TranslationService.GetTranslation("superAdmin.switchReason", "Motivo del cambio (audit)")"
                          Variant="Variant.Outlined"
                          Lines="2"
                          Placeholder="@TranslationService.GetTranslation("superAdmin.switchReasonPlaceholder", "Es: Supporto tecnico, verifica configurazione...")" />

            <MudStack Row="true" Spacing="2">
                <MudTooltip Text="@TranslationService.GetTranslation("tooltip.switchTenant", "Cambia contesto tenant")">
                    <MudIconButton Icon="@Icons.Material.Outlined.SwapHoriz"
                                   Color="Color.Primary"
                                   aria-label="@TranslationService.GetTranslation("superAdmin.changeTenant", "Cambia Tenant")"
                                   OnClick="@(() => SwitchTenant())"
                                   Disabled="@(string.IsNullOrWhiteSpace(_switchReason))" />
                </MudTooltip>
                
                @if (!string.IsNullOrEmpty(_currentTenant))
                {
                    <MudTooltip Text="@TranslationService.GetTranslation("tooltip.restoreContext", "Ripristina contesto originale")">
                        <MudIconButton Icon="@Icons.Material.Outlined.Restore"
                                       Color="Color.Secondary"
                                       aria-label="@TranslationService.GetTranslation("superAdmin.restoreOriginalContext", "Ripristina Contesto Originale")"
                                       OnClick="@(() => RestoreOriginalContext())" />
                    </MudTooltip>
                }
            </MudStack>
        </MudStack>

        <MudAlert Severity="Severity.Info" Icon="@Icons.Material.Outlined.Info" Class="mt-3">
            <strong>@TranslationService.GetTranslation("superAdmin.integrationTodo", "TODO:"):</strong> @TranslationService.GetTranslation("superAdmin.integrationTodo", "Integrare con API per"):
            <ul class="mt-2">
                <li>@TranslationService.GetTranslation("superAdmin.recoverTenantList", "Recuperare lista tenant gestibili dal SuperAdmin")</li>
                <li>@TranslationService.GetTranslation("superAdmin.performTenantSwitch", "Effettuare switch di contesto al tenant selezionato")</li>
                <li>@TranslationService.GetTranslation("superAdmin.registerAuditOperation", "Registrare operazione nell'audit trail")</li>
            </ul>
        </MudAlert>
    </SuperAdminCollapsibleSection>

    <!-- User Impersonation Section -->
    <SuperAdminCollapsibleSection SectionTitle="@TranslationService.GetTranslation("superAdmin.userImpersonation", "Impersonazione Utente")"
                                  SectionIcon="@Icons.Material.Outlined.Person"
                                  @bind-IsExpanded="_impersonationExpanded">
        @if (_isImpersonating)
                        {
                            <MudAlert Severity="Severity.Warning" Icon="@Icons.Material.Outlined.Warning" Class="mb-3">
                                <strong>@TranslationService.GetTranslation("superAdmin.impersonationModeActive", "Modalità Impersonazione Attiva")</strong><br />
                                @TranslationService.GetTranslation("superAdmin.operatingAsAnotherUser", "Stai operando come un altro utente. Tutte le azioni verranno registrate.")
                            </MudAlert>
                            
                            <MudStack Spacing="3">
                                <MudTextField @bind-Value="_endImpersonationReason"
                                              Label="@TranslationService.GetTranslation("superAdmin.endImpersonationReason", "Motivo fine impersonazione (audit)")"
                                              Variant="Variant.Outlined"
                                              Lines="2" />
                                              
                                <MudTooltip Text="@TranslationService.GetTranslation("tooltip.endImpersonation", "Termina impersonazione")">
                                    <MudIconButton Icon="@Icons.Material.Outlined.ExitToApp"
                                                   Color="Color.Error"
                                                   aria-label="@TranslationService.GetTranslation("superAdmin.endImpersonation", "Termina Impersonazione")"
                                                   OnClick="@(() => EndImpersonation())"
                                                   Disabled="@(string.IsNullOrWhiteSpace(_endImpersonationReason))" />
                                </MudTooltip>
                            </MudStack>
                        }
                        else
                        {
                            <MudStack Spacing="3">
                                <MudTextField @bind-Value="_targetUsername"
                                              Label="@TranslationService.GetTranslation("superAdmin.targetUsername", "Username utente da impersonare")"
                                              Variant="Variant.Outlined"
                                              Placeholder="@TranslationService.GetTranslation("superAdmin.targetUsernameePlaceholder", "Inserisci username...")" />
                                
                                <MudTextField @bind-Value="_impersonationReason"
                                              Label="@TranslationService.GetTranslation("superAdmin.impersonationReason", "Motivo impersonazione (audit)")"
                                              Variant="Variant.Outlined"
                                              Lines="2"
                                              Placeholder="@TranslationService.GetTranslation("superAdmin.impersonationReasonPlaceholder", "Es: Supporto tecnico urgente...")" />

                                <MudTooltip Text="@TranslationService.GetTranslation("tooltip.startImpersonation", "Inizia impersonazione")">
                                    <MudIconButton Icon="@Icons.Material.Outlined.PersonSearch"
                                                   Color="Color.Warning"
                                                   aria-label="@TranslationService.GetTranslation("superAdmin.startImpersonation", "Inizia Impersonazione")"
                                                   OnClick="@(() => StartImpersonation())"
                                                   Disabled="@(string.IsNullOrWhiteSpace(_targetUsername) || string.IsNullOrWhiteSpace(_impersonationReason))" />
                                </MudTooltip>
                            </MudStack>
                        }

                        <MudAlert Severity="Severity.Warning" Icon="@Icons.Material.Outlined.Warning" Class="mt-3">
                            <strong>@TranslationService.GetTranslation("common.warning", "ATTENZIONE"):</strong> @TranslationService.GetTranslation("superAdmin.impersonationWarning", "L'impersonazione è una funzionalità critica che deve essere utilizzata solo per supporto tecnico urgente. Tutte le operazioni vengono registrate nell'audit trail.")
                        </MudAlert>

        <MudAlert Severity="Severity.Info" Icon="@Icons.Material.Outlined.Info" Class="mt-2">
            <strong>@TranslationService.GetTranslation("superAdmin.implementImpersonationApi", "TODO:"):</strong> @TranslationService.GetTranslation("superAdmin.implementImpersonationApi", "Implementare API per impersonazione utente con audit completo.")
        </MudAlert>
    </SuperAdminCollapsibleSection>

    <!-- Recent History Section -->
    <SuperAdminCollapsibleSection SectionTitle="@TranslationService.GetTranslation("superAdmin.recentSwitchHistory", "Cronologia Switch Recenti")"
                                  SectionIcon="@Icons.Material.Outlined.History"
                                  @bind-IsExpanded="_historyExpanded">
        <div class="d-flex justify-end ga-1 mb-2">
            <MudTooltip Text="@TranslationService.GetTranslation("tooltip.refresh", "Aggiorna dati")">
                <MudIconButton Icon="@Icons.Material.Outlined.Refresh" 
                               Color="Color.Primary"
                               Size="Size.Small"
                               aria-label="@TranslationService.GetTranslation("tooltip.refresh", "Aggiorna dati")"
                               OnClick="@LoadSwitchHistoryAsync" />
            </MudTooltip>
            <MudTooltip Text="@TranslationService.GetTranslation("tooltip.export", "Esporta dati")">
                <MudIconButton Icon="@Icons.Material.Outlined.Download" 
                               Color="Color.Secondary"
                               Size="Size.Small"
                               aria-label="@TranslationService.GetTranslation("tooltip.export", "Esporta dati")"
                               OnClick="@ExportSwitchHistory" />
            </MudTooltip>
        </div>
        
        <MudAlert Severity="Severity.Info" Icon="@Icons.Material.Outlined.Info" Class="mb-4">
            <strong>@TranslationService.GetTranslation("superAdmin.integrationTodo", "TODO:"):</strong> @TranslationService.GetTranslation("superAdmin.switchHistoryDescription", "Implementare recupero cronologia switch tenant e impersonazioni.")
            <br />
            @TranslationService.GetTranslation("superAdmin.switchHistoryFields", "La cronologia dovrebbe includere: data e ora dell'operazione, tipo di operazione (switch tenant, impersonazione), tenant/utente target, motivo dell'operazione, durata dell'operazione, indirizzo IP e user agent.")
        </MudAlert>

        <!-- Table with server-side pagination, sortable columns, horizontal scrolling -->
        <MudTable T="object" Items="@(new object[0])" 
                  Hover="true" 
                  Striped="true"
                  Loading="false"
                  LoadingProgressColor="Color.Info"
                  SortLabel="@TranslationService.GetTranslation("tooltip.sort", "Ordina")"
                  AllowUnsorted="false"
                  Elevation="0"
                  Class="overflow-x-auto">
            <HeaderContent>
                <MudTh><MudTableSortLabel SortBy="new Func<object, object>(x => x)">
                                    @TranslationService.GetTranslation("superAdmin.dateTime", "Data/Ora")
                                </MudTableSortLabel></MudTh>
                                <MudTh><MudTableSortLabel SortBy="new Func<object, object>(x => x)">
                                    @TranslationService.GetTranslation("superAdmin.type", "Tipo")
                                </MudTableSortLabel></MudTh>
                                <MudTh><MudTableSortLabel SortBy="new Func<object, object>(x => x)">
                                    @TranslationService.GetTranslation("superAdmin.target", "Target")
                                </MudTableSortLabel></MudTh>
                                <MudTh><MudTableSortLabel SortBy="new Func<object, object>(x => x)">
                                    @TranslationService.GetTranslation("superAdmin.reason", "Motivo")
                                </MudTableSortLabel></MudTh>
                                <MudTh><MudTableSortLabel SortBy="new Func<object, object>(x => x)">
                                    @TranslationService.GetTranslation("superAdmin.duration", "Durata")
                                </MudTableSortLabel></MudTh>
                                <MudTh><MudTableSortLabel SortBy="new Func<object, object>(x => x)">
                                    @TranslationService.GetTranslation("superAdmin.ipAddress", "IP")
                                </MudTableSortLabel></MudTh>
                                <MudTh>@TranslationService.GetTranslation("common.actions", "Azioni")</MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <!-- Sample row template with DataLabel for mobile responsiveness -->
                                <MudTd DataLabel="@TranslationService.GetTranslation("superAdmin.dateTime", "Data/Ora")">@context</MudTd>
                                <MudTd DataLabel="@TranslationService.GetTranslation("superAdmin.type", "Tipo")">@context</MudTd>
                                <MudTd DataLabel="@TranslationService.GetTranslation("superAdmin.target", "Target")">@context</MudTd>
                                <MudTd DataLabel="@TranslationService.GetTranslation("superAdmin.reason", "Motivo")">@context</MudTd>
                                <MudTd DataLabel="@TranslationService.GetTranslation("superAdmin.duration", "Durata")">@context</MudTd>
                                <MudTd DataLabel="@TranslationService.GetTranslation("superAdmin.ipAddress", "IP")">@context</MudTd>
                            <MudTd DataLabel="@TranslationService.GetTranslation("common.actions", "Azioni")">
                                <MudTooltip Text="@TranslationService.GetTranslation("tooltip.viewDetails", "Visualizza dettagli")">
                                    <MudIconButton Icon="@Icons.Material.Outlined.Visibility" 
                                                   Size="Size.Small" 
                                                   Color="Color.Primary"
                                                   aria-label="@TranslationService.GetTranslation("tooltip.viewDetails", "Visualizza dettagli")" />
                                </MudTooltip>
                            </MudTd>
                        </RowTemplate>
                        <NoRecordsContent>
                            <MudText>@TranslationService.GetTranslation("superAdmin.noHistoryAvailable", "Nessuna cronologia disponibile. Integrare con API audit trail.")</MudText>
                        </NoRecordsContent>
                    </MudTable>
    </SuperAdminCollapsibleSection>

</SuperAdminPageLayout>
@code {
    private bool _isLoading = true;
    private bool _isAuthorized = false;
    private UserDto? _currentUser;
    private string _selectedTenantId = string.Empty;
    private string _switchReason = string.Empty;
    private string _targetUsername = string.Empty;
    private string _impersonationReason = string.Empty;
    private string _endImpersonationReason = string.Empty;
    private string _currentTenant = string.Empty;  // TODO: Recuperare dal contesto
    private bool _isImpersonating = false;  // TODO: Recuperare dal contesto
    
    // MudCollapse expanded states (closed by default as per requirements)
    private bool _statusExpanded = false;
    private bool _tenantSwitchExpanded = false;
    private bool _impersonationExpanded = false;
    private bool _historyExpanded = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Verifica autenticazione
            var isAuthenticated = await AuthService.IsAuthenticatedAsync();
            if (!isAuthenticated)
            {
                NavigationManager.NavigateTo("/login");
                return;
            }

            // Verifica ruolo SuperAdmin
            var isSuperAdmin = await AuthService.IsSuperAdminAsync();
            if (!isSuperAdmin)
            {
                _isAuthorized = false;
                _isLoading = false;
                Snackbar.Add(TranslationService.GetTranslation("superAdmin.accessDeniedSuperAdmin", "Accesso negato. È richiesto il ruolo Super Amministratore."), Severity.Warning);
                return;
            }

            // Carica informazioni utente corrente
            _currentUser = await AuthService.GetCurrentUserAsync();
            _isAuthorized = true;

            // TODO: Recuperare stato corrente di tenant e impersonazione da API
        }
        catch (Exception ex)
        {
            Snackbar.Add(TranslationService.GetTranslation("superAdmin.loadingPageError", "Errore nel caricamento della pagina: {0}", ex.Message), Severity.Error);
            NavigationManager.NavigateTo("/");
        }
        finally
        {
            _isLoading = false;
        }
    }

    private void SwitchTenant()
    {
        // TODO: Implementare chiamata API per switch tenant
        Snackbar.Add(TranslationService.GetTranslation("superAdmin.implementSwitchTenant", "TODO: Implementare switch al tenant: {0}. Motivo: {1}", _selectedTenantId, _switchReason), Severity.Info);
    }

    private void RestoreOriginalContext()
    {
        // TODO: Implementare chiamata API per ripristino contesto originale
        Snackbar.Add(TranslationService.GetTranslation("superAdmin.implementRestoreContext", "TODO: Implementare ripristino contesto SuperAdmin originale"), Severity.Info);
    }

    private void StartImpersonation()
    {
        // TODO: Implementare chiamata API per inizio impersonazione
        Snackbar.Add(TranslationService.GetTranslation("superAdmin.implementStartImpersonation", "TODO: Implementare impersonazione utente: {0}. Motivo: {1}", _targetUsername, _impersonationReason), Severity.Info);
    }

    private void EndImpersonation()
    {
        // TODO: Implementare chiamata API per fine impersonazione
        Snackbar.Add(TranslationService.GetTranslation("superAdmin.implementEndImpersonation", "TODO: Implementare fine impersonazione. Motivo: {0}", _endImpersonationReason), Severity.Info);
    }

    private async Task LoadSwitchHistoryAsync()
    {
        // TODO: Implementare caricamento cronologia switch
        Snackbar.Add(TranslationService.GetTranslation("superAdmin.implementLoadHistory", "TODO: Implementare caricamento cronologia switch"), Severity.Info);
        await Task.CompletedTask;
    }

    private async Task ExportSwitchHistory()
    {
        // TODO: Implementare esportazione cronologia
        Snackbar.Add(TranslationService.GetTranslation("superAdmin.implementExportHistory", "TODO: Implementare esportazione cronologia"), Severity.Info);
        await Task.CompletedTask;
    }
}