@page "/superadmin/user-management"
@using Microsoft.AspNetCore.Authorization
@using EventForge.DTOs.Tenants
@using EventForge.DTOs.SuperAdmin
@using EventForge.Client.Constants
@using EventForge.Client.Shared.Components
@attribute [Authorize(Roles = "SuperAdmin")]
@inject IAuthService AuthService
@inject ISuperAdminService SuperAdminService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<PageTitle>Gestione Utenti Tenant - EventForge Super Admin</PageTitle>

<SuperAdminBanner />

@if (_isLoading)
{
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" />
}
else if (!_isAuthorized)
{
    <MudContainer MaxWidth="MaxWidth.Medium" Class="mt-8">
        <MudPaper Class="pa-8" Elevation="4">
            <MudGrid Justify="Justify.Center">
                <MudItem xs="12">
                    <div class="d-flex flex-column align-center">
                        <MudIcon Icon="Icons.Material.Filled.Block" Color="Color.Error" Size="Size.Large" Class="mb-4" Style="font-size: 72px;" />
                        <MudText Typo="Typo.h4" Align="Align.Center" Class="mb-4">Accesso Negato</MudText>
                        <MudText Typo="Typo.body1" Align="Align.Center" Class="mb-6">
                            Non hai i permessi per accedere a questa pagina. È richiesto il ruolo Super Amministratore.
                        </MudText>
                        <MudButton Variant="Variant.Filled" 
                                   Color="Color.Primary" 
                                   StartIcon="Icons.Material.Filled.ArrowBack"
                                   OnClick="@(() => NavigationManager.NavigateTo("/"))">
                            Torna alla Home
                        </MudButton>
                    </div>
                </MudItem>
            </MudGrid>
        </MudPaper>
    </MudContainer>
}
else
{
    <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
        <MudText Typo="Typo.h3" Class="mb-8">
            <MudIcon Icon="Icons.Material.Filled.People" Class="mr-3" />
            Gestione Utenti Tenant
        </MudText>

        <MudGrid>
            <!-- Selezione Tenant -->
            <MudItem xs="12" md="4">
                <MudCard Elevation="2">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">
                                <MudIcon Icon="Icons.Material.Filled.Business" Class="mr-2" />
                                Seleziona Tenant
                            </MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudSelect T="string" @bind-Value="_selectedTenant" @bind-Value:after="OnTenantChanged" Label="Tenant" Variant="Variant.Outlined">
                            <MudSelectItem Value="@("")">Tutti i tenant</MudSelectItem>
                            @foreach (var tenant in _tenants)
                            {
                                <MudSelectItem Value="@tenant.Id.ToString()">@tenant.DisplayName</MudSelectItem>
                            }
                        </MudSelect>
                        @if (_isLoadingTenants)
                        {
                            <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="mt-3" />
                        }
                    </MudCardContent>
                </MudCard>
            </MudItem>

            <!-- Filtri e Ricerca -->
            <MudItem xs="12" md="4">
                <MudCard Elevation="2">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">
                                <MudIcon Icon="Icons.Material.Filled.Search" Class="mr-2" />
                                Ricerca Utenti
                            </MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudTextField @bind-Value="_searchTerm"
                                      @bind-Value:after="OnSearchChanged"
                                      Label="Cerca per nome, email o username"
                                      Variant="Variant.Outlined"
                                      Adornment="Adornment.End"
                                      AdornmentIcon="Icons.Material.Filled.Search"
                                      Class="mb-3" />
                        <MudSelect T="string" @bind-Value="_roleFilter" @bind-Value:after="OnRoleFilterChanged" Label="Ruolo" Variant="Variant.Outlined">
                            <MudSelectItem Value="@("all")">Tutti i ruoli</MudSelectItem>
                            <MudSelectItem Value="@("SuperAdmin")">Super Admin</MudSelectItem>
                            <MudSelectItem Value="@("Admin")">Admin</MudSelectItem>
                            <MudSelectItem Value="@("Manager")">Manager</MudSelectItem>
                            <MudSelectItem Value="@("User")">User</MudSelectItem>
                        </MudSelect>
                    </MudCardContent>
                </MudCard>
            </MudItem>

            <!-- Statistiche Utenti -->
            <MudItem xs="12" md="4">
                <MudCard Elevation="2">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">
                                <MudIcon Icon="Icons.Material.Filled.Analytics" Class="mr-2" />
                                Statistiche Utenti
                            </MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <div class="d-flex flex-column ga-3">
                            <div class="d-flex justify-space-between">
                                <MudText>Utenti Totali:</MudText>
                                <MudChip T="string" Color="Color.Info" Size="Size.Small">@(_userStats?.TotalUsers ?? 0)</MudChip>
                            </div>
                            <div class="d-flex justify-space-between">
                                <MudText>Utenti Attivi:</MudText>
                                <MudChip T="string" Color="Color.Success" Size="Size.Small">@(_userStats?.ActiveUsers ?? 0)</MudChip>
                            </div>
                            <div class="d-flex justify-space-between">
                                <MudText>Admin:</MudText>
                                <MudChip T="string" Color="Color.Warning" Size="Size.Small">@(_userStats?.AdminUsers ?? 0)</MudChip>
                            </div>
                        </div>
                    </MudCardContent>
                </MudCard>
            </MudItem>

            <!-- Gestione Ruoli e Permessi -->
            <MudItem xs="12" md="6">
                <MudCard Elevation="2">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">
                                <MudIcon Icon="Icons.Material.Filled.Security" Class="mr-2" />
                                Ruoli e Permessi
                            </MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudAlert Severity="Severity.Info" Icon="Icons.Material.Filled.Info" Class="mb-3">
                            <strong>Modalità Solo Visualizzazione</strong><br />
                            I ruoli e permessi sono visualizzabili ma non modificabili da questa interfaccia.
                        </MudAlert>
                        
                        <!-- Ruoli Disponibili -->
                        <MudText Typo="Typo.subtitle2" Class="mb-2">Ruoli Disponibili:</MudText>
                        <div class="d-flex flex-wrap ga-1 mb-3">
                            <MudChip T="string" Color="Color.Error" Size="Size.Small">SuperAdmin</MudChip>
                            <MudChip T="string" Color="Color.Warning" Size="Size.Small">Admin</MudChip>
                            <MudChip T="string" Color="Color.Info" Size="Size.Small">Manager</MudChip>
                            <MudChip T="string" Color="Color.Default" Size="Size.Small">User</MudChip>
                        </div>

                        <MudAlert Severity="Severity.Warning" Icon="Icons.Material.Filled.Warning">
                            <strong>TODO:</strong> Implementare visualizzazione dettagliata dei permessi associati a ciascun ruolo.
                        </MudAlert>
                    </MudCardContent>
                </MudCard>
            </MudItem>

            <!-- Azioni Rapide -->
            <MudItem xs="12" md="6">
                <MudCard Elevation="2">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">
                                <MudIcon Icon="Icons.Material.Filled.Speed" Class="mr-2" />
                                Azioni Rapide
                            </MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <div class="d-flex flex-column ga-2">
                            <MudButton Variant="Variant.Outlined" 
                                       Color="Color.Primary" 
                                       StartIcon="Icons.Material.Filled.PersonAdd"
                                       FullWidth="true"
                                       OnClick="@OpenCreateUserDialog">>
                                @ButtonLabels.CreateUser
                            </MudButton>
                            <MudButton Variant="Variant.Outlined" 
                                       Color="Color.Secondary" 
                                       StartIcon="Icons.Material.Filled.LockReset"
                                       FullWidth="true"
                                       OnClick="@(() => Snackbar.Add("Funzionalità in arrivo", Severity.Info))">
                                Reset Password Multiplo
                            </MudButton>
                            <MudButton Variant="Variant.Outlined" 
                                       Color="Color.Info" 
                                       StartIcon="Icons.Material.Filled.Download"
                                       FullWidth="true"
                                       OnClick="@(() => Snackbar.Add("Export funzionalità in arrivo", Severity.Info))">
                                Esporta Lista Utenti
                            </MudButton>
                        </div>
                    </MudCardContent>
                </MudCard>
            </MudItem>

            <!-- Lista Utenti -->
            <MudItem xs="12">
                <MudCard Elevation="2">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">
                                <MudIcon Icon="Icons.Material.Filled.List" Class="mr-2" />
                                Lista Utenti del Tenant
                            </MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        @if (_isLoadingUsers)
                        {
                            <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="mt-4" />
                        }
                        else
                        {
                            <!-- Users Table -->
                            <MudTable T="UserManagementDto" 
                                      Items="_filteredUsers" 
                                      Hover="true" 
                                      Striped="true"
                                      Loading="_isLoadingUsers"
                                      LoadingProgressColor="Color.Info">
                                <HeaderContent>
                                    <MudTh>Nome Completo</MudTh>
                                    <MudTh>Email</MudTh>
                                    <MudTh>Username</MudTh>
                                    <MudTh>Tenant</MudTh>
                                    <MudTh>Ruoli</MudTh>
                                    <MudTh>Stato</MudTh>
                                    <MudTh>Ultimo Accesso</MudTh>
                                    <MudTh>Azioni</MudTh>
                                </HeaderContent>
                                <RowTemplate>
                                    <MudTd DataLabel="Nome Completo">
                                        <div class="d-flex align-center">
                                            <MudAvatar Color="Color.Primary" Size="Size.Small" Class="mr-3">
                                                @(context.FirstName.FirstOrDefault())@(context.LastName.FirstOrDefault())
                                            </MudAvatar>
                                            <div>
                                                <MudText>@context.FullName</MudText>
                                                <MudText Typo="Typo.caption" Class="mud-text-secondary">@context.Id</MudText>
                                            </div>
                                        </div>
                                    </MudTd>
                                    <MudTd DataLabel="Email">
                                        <MudText>@context.Email</MudText>
                                    </MudTd>
                                    <MudTd DataLabel="Username">
                                        <MudText>@context.Username</MudText>
                                    </MudTd>
                                    <MudTd DataLabel="Tenant">
                                        <MudText>@(context.TenantName ?? "N/A")</MudText>
                                    </MudTd>
                                    <MudTd DataLabel="Ruoli">
                                        <div class="d-flex flex-wrap ga-1">
                                            @foreach (var role in context.Roles)
                                            {
                                                <MudChip T="string" Size="Size.Small" 
                                                         Color="@GetRoleColor(role)">
                                                    @role
                                                </MudChip>
                                            }
                                        </div>
                                    </MudTd>
                                    <MudTd DataLabel="Stato">
                                        <MudChip T="string" Color="@(context.IsActive ? Color.Success : Color.Error)" 
                                                 Size="Size.Small">
                                            @(context.IsActive ? "Attivo" : "Inattivo")
                                        </MudChip>
                                    </MudTd>
                                    <MudTd DataLabel="Ultimo Accesso">
                                        <MudText>@(context.LastLoginAt?.ToString("dd/MM/yyyy HH:mm") ?? "Mai")</MudText>
                                    </MudTd>
                                    <MudTd DataLabel="Azioni">
                                        <MudButtonGroup Color="Color.Primary" Variant="Variant.Text" Size="Size.Small">
                                            <MudIconButton Icon="Icons.Material.Filled.Visibility" 
                                                           Title="Visualizza"
                                                           OnClick="@(() => ViewUser(context))" />
                                            <MudIconButton Icon="Icons.Material.Filled.Edit" 
                                                           Title="Modifica"
                                                           OnClick="@(() => EditUser(context))" />
                                            <MudIconButton Icon="Icons.Material.Filled.PersonOutline" 
                                                           Title="Impersona"
                                                           OnClick="@(() => ImpersonateUser(context))" 
                                                           Color="Color.Warning" />
                                            <MudIconButton Icon="@(context.IsActive ? Icons.Material.Filled.Block : Icons.Material.Filled.CheckCircle)" 
                                                           Title="@(context.IsActive ? "Disabilita" : "Abilita")"
                                                           OnClick="@(() => ToggleUserStatus(context))" 
                                                           Color="@(context.IsActive ? Color.Error : Color.Success)" />
                                        </MudButtonGroup>
                                    </MudTd>
                                </RowTemplate>
                                <NoRecordsContent>
                                    <MudText>@(_users.Any() ? "Nessun utente corrisponde ai filtri applicati." : "Nessun utente trovato.")</MudText>
                                </NoRecordsContent>
                            </MudTable>
                        }
                    </MudCardContent>
                </MudCard>
            </MudItem>
        </MudGrid>
    </MudContainer>
}

<!-- Create User SidePanel -->
<CreateUserSidePanel @bind-IsOpen="_createUserPanelOpen" 
                     OnUserCreated="@OnUserCreated" />

@code {
    private bool _isLoading = true;
    private bool _isAuthorized = false;
    private bool _isLoadingTenants = false;
    private bool _isLoadingUsers = false;
    private bool _createUserPanelOpen = false;
    private UserDto? _currentUser;
    private string _searchTerm = string.Empty;
    private string _roleFilter = "all";
    private string _selectedTenant = string.Empty;
    
    // Data
    private List<TenantResponseDto> _tenants = new();
    private List<UserManagementDto> _users = new();
    private UserStatisticsDto? _userStats;
    
    // Computed properties
    private IEnumerable<UserManagementDto> _filteredUsers => 
        _users.Where(u => 
            (string.IsNullOrEmpty(_searchTerm) || 
             u.FullName.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase) ||
             u.Email.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase) ||
             u.Username.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase)) &&
            (_roleFilter == "all" || u.Roles.Any(r => r.Equals(_roleFilter, StringComparison.OrdinalIgnoreCase))) &&
            (string.IsNullOrEmpty(_selectedTenant) || 
             _selectedTenant == "" ||
             u.TenantId?.ToString() == _selectedTenant));

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Verifica autenticazione
            var isAuthenticated = await AuthService.IsAuthenticatedAsync();
            if (!isAuthenticated)
            {
                NavigationManager.NavigateTo("/login");
                return;
            }

            // Verifica ruolo SuperAdmin
            var isSuperAdmin = await AuthService.IsSuperAdminAsync();
            if (!isSuperAdmin)
            {
                _isAuthorized = false;
                _isLoading = false;
                Snackbar.Add("Accesso negato. È richiesto il ruolo Super Amministratore.", Severity.Warning);
                return;
            }

            // Carica informazioni utente corrente
            _currentUser = await AuthService.GetCurrentUserAsync();
            _isAuthorized = true;
            
            // Carica dati
            await LoadTenantsAsync();
            await LoadUsersAsync();
            await LoadUserStatisticsAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Errore nel caricamento della pagina: {ex.Message}", Severity.Error);
            NavigationManager.NavigateTo("/");
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task LoadTenantsAsync()
    {
        try
        {
            _isLoadingTenants = true;
            _tenants = (await SuperAdminService.GetTenantsAsync()).ToList();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Errore nel caricamento dei tenant: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isLoadingTenants = false;
        }
    }

    private async Task LoadUsersAsync()
    {
        try
        {
            _isLoadingUsers = true;
            var tenantId = string.IsNullOrEmpty(_selectedTenant) ? (Guid?)null : Guid.Parse(_selectedTenant);
            _users = (await SuperAdminService.GetUsersAsync(tenantId)).ToList();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Errore nel caricamento degli utenti: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isLoadingUsers = false;
        }
    }

    private async Task LoadUserStatisticsAsync()
    {
        try
        {
            var tenantId = string.IsNullOrEmpty(_selectedTenant) ? (Guid?)null : Guid.Parse(_selectedTenant);
            _userStats = await SuperAdminService.GetUserStatisticsAsync(tenantId);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Errore nel caricamento delle statistiche utenti: {ex.Message}", Severity.Error);
        }
    }

    private async Task OnTenantChanged()
    {
        await LoadUsersAsync();
        await LoadUserStatisticsAsync();
        StateHasChanged();
    }

    private async Task OnSearchChanged()
    {
        await Task.Delay(300); // Debounce
        StateHasChanged();
    }

    private async Task OnRoleFilterChanged()
    {
        await Task.CompletedTask;
        StateHasChanged();
    }

    private async Task OpenCreateUserDialog()
    {
        _createUserPanelOpen = true;
        await Task.CompletedTask;
    }

    private async Task OnUserCreated(UserManagementDto newUser)
    {
        _users.Add(newUser);
        await LoadUserStatisticsAsync();
        StateHasChanged();
    }

    private async Task ViewUser(UserManagementDto user)
    {
        var parameters = new DialogParameters { ["User"] = user };
        await DialogService.ShowAsync<ViewUserDialog>("Dettagli Utente", parameters);
    }

    private async Task EditUser(UserManagementDto user)
    {
        var parameters = new DialogParameters { ["User"] = user };
        var dialog = await DialogService.ShowAsync<EditUserDialog>("Modifica Utente", parameters);
        var result = await dialog.Result;
        
        if (result is not null && !result.Canceled && result.Data is UserManagementDto updatedUser)
        {
            var index = _users.FindIndex(u => u.Id == updatedUser.Id);
            if (index >= 0)
            {
                _users[index] = updatedUser;
            }
            await LoadUserStatisticsAsync();
            Snackbar.Add("Utente aggiornato con successo!", Severity.Success);
        }
    }

    private async Task ImpersonateUser(UserManagementDto user)
    {
        var confirm = await DialogService.ShowMessageBox(
            "Conferma Impersonificazione",
            $"Sei sicuro di voler impersonificare l'utente '{user.FullName}'? Questa azione verrà registrata nei log di audit.",
            yesText: "Conferma",
            cancelText: "Annulla");

        if (confirm == true)
        {
            try
            {
                // TODO: Implement actual impersonation when API is ready
                Snackbar.Add($"Impersonificazione di {user.FullName} richiesta. Funzionalità in sviluppo.", Severity.Info);
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Errore nell'impersonificazione dell'utente: {ex.Message}", Severity.Error);
            }
        }
    }

    private async Task ToggleUserStatus(UserManagementDto user)
    {
        var action = user.IsActive ? "disabilitare" : "abilitare";
        var confirm = await DialogService.ShowMessageBox(
            "Conferma",
            $"Sei sicuro di voler {action} l'utente '{user.FullName}'?",
            yesText: "Conferma",
            cancelText: "Annulla");

        if (confirm == true)
        {
            try
            {
                // For now, just toggle locally - implement actual API call when available
                user.IsActive = !user.IsActive;
                await LoadUserStatisticsAsync();
                Snackbar.Add($"Utente {(user.IsActive ? "abilitato" : "disabilitato")} con successo!", Severity.Success);
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Errore nel cambio stato dell'utente: {ex.Message}", Severity.Error);
            }
        }
    }

    private Color GetRoleColor(string role)
    {
        return role.ToLower() switch
        {
            "superadmin" => Color.Error,
            "admin" => Color.Warning,
            "manager" => Color.Info,
            "user" => Color.Primary,
            _ => Color.Default
        };
    }
}