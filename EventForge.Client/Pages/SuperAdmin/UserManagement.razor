@page "/superadmin/user-management"
@using Microsoft.AspNetCore.Authorization
@using EventForge.DTOs.Tenants
@using EventForge.DTOs.SuperAdmin
@using EventForge.Client.Constants
@using EventForge.Client.Shared.Components
@attribute [Authorize(Roles = "SuperAdmin")]
@inject IAuthService AuthService
@inject ISuperAdminService SuperAdminService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject ITranslationService TranslationService

<PageTitle>@TranslationService.GetTranslation("superAdmin.pageTitle", "{0} - EventForge Super Admin", TranslationService.GetTranslation("superAdmin.userManagement", "Gestione Utenti Tenant"))</PageTitle>

@* SuperAdminBanner removed as per refactoring requirements *@

@if (_isLoading)
{
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" />
}
else if (!_isAuthorized)
{
    <MudContainer MaxWidth="MaxWidth.Medium" Class="mt-8">
        <MudPaper Class="pa-8" Elevation="4">
            <MudGrid Justify="Justify.Center">
                <MudItem xs="12">
                    <div class="d-flex flex-column align-center">
                        <MudIcon Icon="Icons.Material.Filled.Block" Color="Color.Error" Size="Size.Large" Class="mb-4" Style="font-size: 72px;" />
                        <MudText Typo="Typo.h4" Align="Align.Center" Class="mb-4">@TranslationService.GetTranslation("error.accessDenied", "Accesso Negato")</MudText>
                        <MudText Typo="Typo.body1" Align="Align.Center" Class="mb-6">
                            @TranslationService.GetTranslation("superAdmin.superAdminRoleRequired", "Non hai i permessi per accedere a questa pagina. Ãˆ richiesto il ruolo Super Amministratore.")
                        </MudText>
                        <MudButton Variant="Variant.Filled" 
                                   Color="Color.Primary" 
                                   StartIcon="Icons.Material.Filled.ArrowBack"
                                   OnClick="@(() => NavigationManager.NavigateTo("/"))">
                            @TranslationService.GetTranslation("superAdmin.returnToHome", "Torna alla Home")
                        </MudButton>
                    </div>
                </MudItem>
            </MudGrid>
        </MudPaper>
    </MudContainer>
}
else
{
    <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
        <MudText Typo="Typo.h3" Class="mb-8">
            <MudIcon Icon="Icons.Material.Filled.People" Class="mr-3" />
            @TranslationService.GetTranslation("superAdmin.userManagement")
        </MudText>

        <MudGrid>
            <!-- Tenant Selection -->
            <MudItem xs="12">
                <MudCard Elevation="2" Class="mb-4">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">
                                <MudIcon Icon="Icons.Material.Filled.Business" Class="mr-2" />
                                @TranslationService.GetTranslation("superAdmin.tenantSelection")
                            </MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudSelect T="string" @bind-Value="_selectedTenant" @bind-Value:after="OnTenantChanged" 
                                   Label="@TranslationService.GetTranslation("field.tenant")" 
                                   Variant="Variant.Outlined"
                                   FullWidth="true">
                            <MudSelectItem Value="@("")">@TranslationService.GetTranslation("superAdmin.allTenants")</MudSelectItem>
                            @foreach (var tenant in _tenants)
                            {
                                <MudSelectItem Value="@tenant.Id.ToString()">@tenant.DisplayName</MudSelectItem>
                            }
                        </MudSelect>
                        @if (_isLoadingTenants)
                        {
                            <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="mt-3" />
                        }
                    </MudCardContent>
                </MudCard>
            </MudItem>

            <!-- Statistics -->
            <MudItem xs="12">
                <MudCard Elevation="2" Class="mb-4">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">
                                <MudIcon Icon="Icons.Material.Filled.Analytics" Class="mr-2" />
                                @TranslationService.GetTranslation("superAdmin.statistics")
                            </MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudGrid>
                            <MudItem xs="12" sm="3">
                                <div class="d-flex justify-space-between">
                                    <MudText>@TranslationService.GetTranslation("superAdmin.totalUsers"):</MudText>
                                    <MudChip T="string" Color="Color.Info" Size="Size.Small">@(_userStats?.TotalUsers ?? 0)</MudChip>
                                </div>
                            </MudItem>
                            <MudItem xs="12" sm="3">
                                <div class="d-flex justify-space-between">
                                    <MudText>@TranslationService.GetTranslation("superAdmin.activeUsers"):</MudText>
                                    <MudChip T="string" Color="Color.Success" Size="Size.Small">@(_userStats?.ActiveUsers ?? 0)</MudChip>
                                </div>
                            </MudItem>
                            <MudItem xs="12" sm="3">
                                <div class="d-flex justify-space-between">
                                    <MudText>@TranslationService.GetTranslation("superAdmin.adminUsers"):</MudText>
                                    <MudChip T="string" Color="Color.Warning" Size="Size.Small">@(_userStats?.AdminUsers ?? 0)</MudChip>
                                </div>
                            </MudItem>
                            <MudItem xs="12" sm="3">
                                <div class="d-flex justify-space-between">
                                    <MudText>@TranslationService.GetTranslation("superAdmin.activeTenants"):</MudText>
                                    <MudChip T="string" Color="Color.Primary" Size="Size.Small">@(_tenants.Count(t => t.IsActive))</MudChip>
                                </div>
                            </MudItem>
                        </MudGrid>
                    </MudCardContent>
                </MudCard>
            </MudItem>

            <!-- Search Filters -->
            <MudItem xs="12">
                <MudCard Elevation="2" Class="mb-4">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">
                                <MudIcon Icon="Icons.Material.Filled.Search" Class="mr-2" />
                                @TranslationService.GetTranslation("superAdmin.searchFilters")
                            </MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudGrid>
                            <MudItem xs="12" md="6">
                                <MudTextField @bind-Value="_searchTerm"
                                              @bind-Value:after="OnSearchChanged"
                                              Label="@TranslationService.GetTranslation("superAdmin.searchByNameEmailUsername")"
                                              Variant="Variant.Outlined"
                                              Adornment="Adornment.End"
                                              AdornmentIcon="Icons.Material.Filled.Search"
                                              FullWidth="true" />
                            </MudItem>
                            <MudItem xs="12" md="3">
                                <MudSelect T="string" @bind-Value="_roleFilter" @bind-Value:after="OnRoleFilterChanged" 
                                           Label="@TranslationService.GetTranslation("field.role")" 
                                           Variant="Variant.Outlined"
                                           FullWidth="true">
                                    <MudSelectItem Value="@("all")">@TranslationService.GetTranslation("superAdmin.allRoles")</MudSelectItem>
                                    <MudSelectItem Value="@("SuperAdmin")">Super Admin</MudSelectItem>
                                    <MudSelectItem Value="@("Admin")">Admin</MudSelectItem>
                                    <MudSelectItem Value="@("Manager")">Manager</MudSelectItem>
                                    <MudSelectItem Value="@("User")">User</MudSelectItem>
                                </MudSelect>
                            </MudItem>
                            <MudItem xs="12" md="3">
                                <MudSelect T="string" @bind-Value="_statusFilter" @bind-Value:after="OnStatusFilterChanged" 
                                           Label="@TranslationService.GetTranslation("field.status")" 
                                           Variant="Variant.Outlined"
                                           FullWidth="true">
                                    <MudSelectItem Value="@("all")">@TranslationService.GetTranslation("common.selectAll")</MudSelectItem>
                                    <MudSelectItem Value="@("active")">@TranslationService.GetTranslation("field.active")</MudSelectItem>
                                    <MudSelectItem Value="@("inactive")">@TranslationService.GetTranslation("field.inactive")</MudSelectItem>
                                </MudSelect>
                            </MudItem>
                        </MudGrid>
                    </MudCardContent>
                </MudCard>
            </MudItem>

            <!-- User List -->
            <MudItem xs="12">
                <MudCard Elevation="2">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">
                                <MudIcon Icon="Icons.Material.Filled.List" Class="mr-2" />
                                @TranslationService.GetTranslation("superAdmin.userList")
                            </MudText>
                        </CardHeaderContent>
                        <CardHeaderActions>
                            <!-- Quick Actions Toolbar -->
                            <MudToolBar Dense="true" WrapContent="true">
                                <MudTooltip Text="@TranslationService.GetTranslation("tooltip.refresh")">
                                    <MudIconButton Icon="Icons.Material.Filled.Refresh" 
                                                   Color="Color.Primary"
                                                   OnClick="@LoadUsersAsync" />
                                </MudTooltip>
                                <MudTooltip Text="@TranslationService.GetTranslation("tooltip.export")">
                                    <MudIconButton Icon="Icons.Material.Filled.Download" 
                                                   Color="Color.Secondary"
                                                   OnClick="@ExportUsers" />
                                </MudTooltip>
                                <MudTooltip Text="@TranslationService.GetTranslation("superAdmin.newUser")">
                                    <MudButton Variant="Variant.Filled" 
                                               Color="Color.Primary" 
                                               StartIcon="Icons.Material.Filled.PersonAdd"
                                               OnClick="@OpenCreateUserDrawer">
                                        @TranslationService.GetTranslation("superAdmin.newUser")
                                    </MudButton>
                                </MudTooltip>
                            </MudToolBar>
                        </CardHeaderActions>
                    </MudCardHeader>
                    <MudCardContent>
                        @if (_isLoadingUsers)
                        {
                            <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="mt-4" />
                        }
                        else
                        {
                            <!-- Users Table with Sortable Columns -->
                            <MudTable T="UserManagementDto" 
                                      Items="_filteredUsers" 
                                      Hover="true" 
                                      Striped="true"
                                      Loading="_isLoadingUsers"
                                      LoadingProgressColor="Color.Info"
                                      SortLabel="@TranslationService.GetTranslation("tooltip.sort")"
                                      AllowUnsorted="false">
                                <HeaderContent>
                                    <MudTh><MudTableSortLabel SortBy="@(new Func<UserManagementDto, object>(x => x.FullName))">@TranslationService.GetTranslation("field.fullName")</MudTableSortLabel></MudTh>
                                    <MudTh><MudTableSortLabel SortBy="@(new Func<UserManagementDto, object>(x => x.Email))">@TranslationService.GetTranslation("field.email")</MudTableSortLabel></MudTh>
                                    <MudTh><MudTableSortLabel SortBy="@(new Func<UserManagementDto, object>(x => x.Username))">@TranslationService.GetTranslation("field.username")</MudTableSortLabel></MudTh>
                                    <MudTh><MudTableSortLabel SortBy="@(new Func<UserManagementDto, object>(x => x.TenantName ?? string.Empty))">@TranslationService.GetTranslation("field.tenant")</MudTableSortLabel></MudTh>
                                    <MudTh><MudTableSortLabel SortBy="@(new Func<UserManagementDto, object>(x => string.Join(",", x.Roles)))">@TranslationService.GetTranslation("field.roles")</MudTableSortLabel></MudTh>
                                    <MudTh><MudTableSortLabel SortBy="@(new Func<UserManagementDto, object>(x => x.IsActive))">@TranslationService.GetTranslation("field.status")</MudTableSortLabel></MudTh>
                                    <MudTh><MudTableSortLabel InitialDirection="SortDirection.Descending" SortBy="@(new Func<UserManagementDto, object>(x => x.LastLoginAt ?? DateTime.MinValue))">@TranslationService.GetTranslation("field.lastLogin")</MudTableSortLabel></MudTh>
                                    <MudTh>@TranslationService.GetTranslation("common.actions")</MudTh>
                                </HeaderContent>
                                <RowTemplate>
                                    <MudTd DataLabel="@TranslationService.GetTranslation("field.fullName")">
                                        <div class="d-flex align-center">
                                            <MudAvatar Color="Color.Primary" Size="Size.Small" Class="mr-3">
                                                @(context.FirstName.FirstOrDefault())@(context.LastName.FirstOrDefault())
                                            </MudAvatar>
                                            <div>
                                                <MudText>@context.FullName</MudText>
                                                <MudText Typo="Typo.caption" Class="mud-text-secondary">@context.Id</MudText>
                                            </div>
                                        </div>
                                    </MudTd>
                                    <MudTd DataLabel="@TranslationService.GetTranslation("field.email")">
                                        <MudText>@context.Email</MudText>
                                    </MudTd>
                                    <MudTd DataLabel="@TranslationService.GetTranslation("field.username")">
                                        <MudText>@context.Username</MudText>
                                    </MudTd>
                                    <MudTd DataLabel="@TranslationService.GetTranslation("field.tenant")">
                                        <MudText>@(context.TenantName ?? TranslationService.GetTranslation("common.notAvailable"))</MudText>
                                    </MudTd>
                                    <MudTd DataLabel="@TranslationService.GetTranslation("field.roles")">
                                        <div class="d-flex flex-wrap ga-1">
                                            @foreach (var role in context.Roles.Take(2))
                                            {
                                                <MudChip T="string" Size="Size.Small" 
                                                         Color="@GetRoleColor(role)">
                                                    @role
                                                </MudChip>
                                            }
                                            @if (context.Roles.Count > 2)
                                            {
                                                <MudChip T="string" Color="Color.Default" Size="Size.Small">+@(context.Roles.Count - 2)</MudChip>
                                            }
                                        </div>
                                    </MudTd>
                                    <MudTd DataLabel="@TranslationService.GetTranslation("field.status")">
                                        <MudChip T="string" Color="@(context.IsActive ? Color.Success : Color.Error)" 
                                                 Size="Size.Small">
                                            @(context.IsActive ? TranslationService.GetTranslation("field.active") : TranslationService.GetTranslation("field.inactive"))
                                        </MudChip>
                                    </MudTd>
                                    <MudTd DataLabel="@TranslationService.GetTranslation("field.lastLogin")">
                                        <MudText>@(context.LastLoginAt?.ToString("dd/MM/yyyy HH:mm") ?? TranslationService.GetTranslation("common.notAvailable"))</MudText>
                                    </MudTd>
                                    <MudTd DataLabel="@TranslationService.GetTranslation("common.actions")">
                                        <MudButtonGroup Color="Color.Primary" Variant="Variant.Text" Size="Size.Small">
                                            <MudTooltip Text="@TranslationService.GetTranslation("tooltip.viewUser")">
                                                <MudIconButton Icon="Icons.Material.Filled.Visibility" 
                                                               Color="Color.Info"
                                                               Size="Size.Small"
                                                               OnClick="@(() => ViewUser(context))" />
                                            </MudTooltip>
                                            <MudTooltip Text="@TranslationService.GetTranslation("tooltip.editUser")">
                                                <MudIconButton Icon="Icons.Material.Filled.Edit" 
                                                               Color="Color.Primary"
                                                               Size="Size.Small"
                                                               OnClick="@(() => EditUser(context))" />
                                            </MudTooltip>
                                            <MudTooltip Text="@TranslationService.GetTranslation("tooltip.impersonateUser")">
                                                <MudIconButton Icon="Icons.Material.Filled.PersonOutline" 
                                                               Color="Color.Warning"
                                                               Size="Size.Small"
                                                               OnClick="@(() => ImpersonateUser(context))" />
                                            </MudTooltip>
                                            <MudTooltip Text="@(context.IsActive ? TranslationService.GetTranslation("tooltip.disableUser") : TranslationService.GetTranslation("tooltip.enableUser"))">
                                                <MudIconButton Icon="@(context.IsActive ? Icons.Material.Filled.Block : Icons.Material.Filled.CheckCircle)" 
                                                               Color="@(context.IsActive ? Color.Error : Color.Success)"
                                                               Size="Size.Small"
                                                               OnClick="@(() => ToggleUserStatus(context))" />
                                            </MudTooltip>
                                        </MudButtonGroup>
                                    </MudTd>
                                </RowTemplate>
                                <NoRecordsContent>
                                    <MudText>@(_users.Any() ? "Nessun utente corrisponde ai filtri applicati." : "Nessun utente trovato.")</MudText>
                                </NoRecordsContent>
                            </MudTable>
                        }
                    </MudCardContent>
                </MudCard>
            </MudItem>
        </MudGrid>
    </MudContainer>
}

<!-- User Management Drawer -->
<UserDrawer @bind-IsOpen="_userDrawerOpen" 
            @bind-Mode="_userDrawerMode"
            OriginalUser="_selectedUser"
            AllowEdit="true"
            OnUserCreated="@OnUserCreated"
            OnUserUpdated="@OnUserUpdated" />

@code {
    private bool _isLoading = true;
    private bool _isAuthorized = false;
    private bool _isLoadingTenants = false;
    private bool _isLoadingUsers = false;
    private bool _userDrawerOpen = false;
    private EntityDrawerMode _userDrawerMode = EntityDrawerMode.Create;
    private UserManagementDto? _selectedUser;
    private UserDto? _currentUser;
    private string _searchTerm = string.Empty;
    private string _roleFilter = "all";
    private string _statusFilter = "all";
    private string _selectedTenant = string.Empty;
    
    // Data
    private List<TenantResponseDto> _tenants = new();
    private List<UserManagementDto> _users = new();
    private UserStatisticsDto? _userStats;
    
    // Computed properties
    private IEnumerable<UserManagementDto> _filteredUsers => 
        _users.Where(u => 
            (string.IsNullOrEmpty(_searchTerm) || 
             u.FullName.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase) ||
             u.Email.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase) ||
             u.Username.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase)) &&
            (_roleFilter == "all" || u.Roles.Any(r => r.Equals(_roleFilter, StringComparison.OrdinalIgnoreCase))) &&
            (_statusFilter == "all" || 
             (_statusFilter == "active" && u.IsActive) ||
             (_statusFilter == "inactive" && !u.IsActive)) &&
            (string.IsNullOrEmpty(_selectedTenant) || 
             _selectedTenant == "" ||
             u.TenantId?.ToString() == _selectedTenant));

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Verifica autenticazione
            var isAuthenticated = await AuthService.IsAuthenticatedAsync();
            if (!isAuthenticated)
            {
                NavigationManager.NavigateTo("/login");
                return;
            }

            // Verifica ruolo SuperAdmin
            var isSuperAdmin = await AuthService.IsSuperAdminAsync();
            if (!isSuperAdmin)
            {
                _isAuthorized = false;
                _isLoading = false;
                Snackbar.Add("Accesso negato. Ãˆ richiesto il ruolo Super Amministratore.", Severity.Warning);
                return;
            }

            // Carica informazioni utente corrente
            _currentUser = await AuthService.GetCurrentUserAsync();
            _isAuthorized = true;
            
            // Carica dati
            await LoadTenantsAsync();
            await LoadUsersAsync();
            await LoadUserStatisticsAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Errore nel caricamento della pagina: {ex.Message}", Severity.Error);
            NavigationManager.NavigateTo("/");
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task LoadTenantsAsync()
    {
        try
        {
            _isLoadingTenants = true;
            _tenants = (await SuperAdminService.GetTenantsAsync()).ToList();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Errore nel caricamento dei tenant: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isLoadingTenants = false;
        }
    }

    private async Task LoadUsersAsync()
    {
        try
        {
            _isLoadingUsers = true;
            var tenantId = string.IsNullOrEmpty(_selectedTenant) ? (Guid?)null : Guid.Parse(_selectedTenant);
            _users = (await SuperAdminService.GetUsersAsync(tenantId)).ToList();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Errore nel caricamento degli utenti: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isLoadingUsers = false;
        }
    }

    private async Task LoadUserStatisticsAsync()
    {
        try
        {
            var tenantId = string.IsNullOrEmpty(_selectedTenant) ? (Guid?)null : Guid.Parse(_selectedTenant);
            _userStats = await SuperAdminService.GetUserStatisticsAsync(tenantId);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Errore nel caricamento delle statistiche utenti: {ex.Message}", Severity.Error);
        }
    }

    private async Task OnTenantChanged()
    {
        await LoadUsersAsync();
        await LoadUserStatisticsAsync();
        StateHasChanged();
    }

    private async Task OnSearchChanged()
    {
        await Task.Delay(300); // Debounce
        StateHasChanged();
    }

    private async Task OnRoleFilterChanged()
    {
        await Task.CompletedTask;
        StateHasChanged();
    }

    private async Task OnStatusFilterChanged()
    {
        await Task.CompletedTask;
        StateHasChanged();
    }

    private async Task ExportUsers()
    {
        // TODO: Implement export functionality
        Snackbar.Add("Export functionality will be implemented soon.", Severity.Info);
        await Task.CompletedTask;
    }

    private async Task OpenCreateUserDrawer()
    {
        _userDrawerMode = EntityDrawerMode.Create;
        _selectedUser = null;
        _userDrawerOpen = true;
        await Task.CompletedTask;
    }

    private async Task OnUserCreated(UserManagementDto newUser)
    {
        _users.Add(newUser);
        await LoadUserStatisticsAsync();
        StateHasChanged();
    }

    private async Task OnUserUpdated(UserManagementDto updatedUser)
    {
        var index = _users.FindIndex(u => u.Id == updatedUser.Id);
        if (index >= 0)
        {
            _users[index] = updatedUser;
        }
        await LoadUserStatisticsAsync();
        StateHasChanged();
    }

    private async Task ViewUser(UserManagementDto user)
    {
        _userDrawerMode = EntityDrawerMode.View;
        _selectedUser = user;
        _userDrawerOpen = true;
        await Task.CompletedTask;
    }

    private async Task EditUser(UserManagementDto user)
    {
        _userDrawerMode = EntityDrawerMode.Edit;
        _selectedUser = user;
        _userDrawerOpen = true;
        await Task.CompletedTask;
    }

    private async Task ImpersonateUser(UserManagementDto user)
    {
        var confirm = await DialogService.ShowMessageBox(
            TranslationService.GetTranslation("common.confirm"),
            $"Sei sicuro di voler impersonificare l'utente '{user.FullName}'? Questa azione verrÃ  registrata nei log di audit.",
            yesText: TranslationService.GetTranslation("common.confirm"),
            cancelText: TranslationService.GetTranslation("common.cancel"));

        if (confirm == true)
        {
            try
            {
                // TODO: Implement actual impersonation when API is ready
                Snackbar.Add($"Impersonificazione di {user.FullName} richiesta. FunzionalitÃ  in sviluppo.", Severity.Info);
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Errore nell'impersonificazione dell'utente: {ex.Message}", Severity.Error);
            }
        }
    }

    private async Task ToggleUserStatus(UserManagementDto user)
    {
        var action = user.IsActive ? TranslationService.GetTranslation("superAdmin.disable") : TranslationService.GetTranslation("superAdmin.enable");
        var confirm = await DialogService.ShowMessageBox(
            TranslationService.GetTranslation("common.confirm"),
            $"Sei sicuro di voler {action.ToLower()} l'utente '{user.FullName}'?",
            yesText: TranslationService.GetTranslation("common.confirm"),
            cancelText: TranslationService.GetTranslation("common.cancel"));

        if (confirm == true)
        {
            try
            {
                // For now, just toggle locally - implement actual API call when available
                user.IsActive = !user.IsActive;
                await LoadUserStatisticsAsync();
                
                var successMessage = user.IsActive 
                    ? "Utente abilitato con successo!"
                    : "Utente disabilitato con successo!";
                    
                Snackbar.Add(successMessage, Severity.Success);
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Errore nel cambio stato dell'utente: {ex.Message}", Severity.Error);
            }
        }
    }

    private Color GetRoleColor(string role)
    {
        return role.ToLower() switch
        {
            "superadmin" => Color.Error,
            "admin" => Color.Warning,
            "manager" => Color.Info,
            "user" => Color.Primary,
            _ => Color.Default
        };
    }
}