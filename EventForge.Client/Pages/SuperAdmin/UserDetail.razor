@page "/superadmin/users/new"
@page "/superadmin/users/{UserId:guid}"
@using Microsoft.AspNetCore.Authorization
@using EventForge.DTOs.SuperAdmin
@using EventForge.DTOs.Tenants
@using EventForge.Client.Shared.Components
@using System.Text.Json
@attribute [Authorize(Roles = "SuperAdmin")]
@inject ISuperAdminService SuperAdminService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject ITranslationService TranslationService
@inject ILogger<UserDetail> Logger

<MudContainer MaxWidth="MaxWidth.False" Class="mt-4 px-0" Style="width:100%; min-height:100vh; display:flex; flex-direction:column;">
    @if (_isLoading)
    {
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
    }
    else if (_user == null && !_isCreateMode)
    {
        <MudAlert Severity="Severity.Error">
            @TranslationService.GetTranslation("user.notFound", "Utente non trovato")
        </MudAlert>
    }
    else
    {
        <!-- Page Header -->
        <MudPaper Elevation="2" Class="pa-4 mb-4">
            <div class="d-flex justify-space-between align-center">
                <div>
                    <div class="d-flex align-center gap-2 mb-2">
                        <MudIconButton Icon="@Icons.Material.Filled.ArrowBack" 
                                       Color="Color.Primary"
                                       OnClick="@(() => TryNavigateAway("/superadmin/user-management"))"
                                       Size="Size.Small" />
                        <MudText Typo="Typo.h4">
                            <MudIcon Icon="@Icons.Material.Outlined.Person" Class="mr-2" />
                            @(_isCreateMode 
                                ? TranslationService.GetTranslation("drawer.title.creaUtente", "Crea Nuovo Utente") 
                                : _user?.FullName)
                        </MudText>

                        @if (HasUnsavedChanges())
                        {
                            <MudChip T="string" Size="Size.Small" Color="Color.Warning" Class="ml-2">
                                @TranslationService.GetTranslation("user.unsavedChanges", "Modifiche non salvate")
                            </MudChip>
                        }
                    </div>
                    @if (!_isCreateMode && _user != null)
                    {
                        <MudText Typo="Typo.body2" Class="mud-text-secondary">
                            @TranslationService.GetTranslation("field.createdAt", "Creato il"): @_user.CreatedAt.ToString("dd/MM/yyyy HH:mm")
                        </MudText>
                    }
                </div>
                <div class="d-flex gap-2">
                    <MudButton Variant="Variant.Filled" 
                               Color="Color.Primary" 
                               StartIcon="@Icons.Material.Filled.Save"
                               OnClick="SaveUserAsync"
                               Disabled="_isSaving"
                               Size="Size.Small">
                        @TranslationService.GetTranslation("common.save", "Salva")
                    </MudButton>
                </div>
            </div>
        </MudPaper>

        <!-- Form Section -->
        <MudPaper Elevation="2" Class="pa-4">
            <MudForm @ref="_form">
                <MudGrid>
                    <MudItem xs="12" md="6">
                        <MudTextField @bind-Value="_user!.FirstName"
                                      Label="@($"{TranslationService.GetTranslation("drawer.field.nome", "Nome")} *")"
                                      Variant="Variant.Outlined"
                                      Required="true"
                                      RequiredError="@TranslationService.GetTranslation("drawer.error.nomeObbligatorio", "Il nome è obbligatorio")"
                                      MaxLength="100"
                                      Immediate="true"
                                      OnBlur="@(() => MarkChanged())"
                                      aria-describedby="firstName-help" />
                        <MudText id="firstName-help" Typo="Typo.caption" Class="mud-input-helper-text">
                            @TranslationService.GetTranslation("drawer.helperText.nome", "Inserisci il nome dell'utente")
                        </MudText>
                    </MudItem>
                    
                    <MudItem xs="12" md="6">
                        <MudTextField @bind-Value="_user!.LastName"
                                      Label="@($"{TranslationService.GetTranslation("drawer.field.cognome", "Cognome")} *")"
                                      Variant="Variant.Outlined"
                                      Required="true"
                                      RequiredError="@TranslationService.GetTranslation("drawer.error.cognomeObbligatorio", "Il cognome è obbligatorio")"
                                      MaxLength="100"
                                      Immediate="true"
                                      OnBlur="@(() => MarkChanged())"
                                      aria-describedby="lastName-help" />
                        <MudText id="lastName-help" Typo="Typo.caption" Class="mud-input-helper-text">
                            @TranslationService.GetTranslation("drawer.helperText.cognome", "Inserisci il cognome dell'utente")
                        </MudText>
                    </MudItem>
                    
                    <MudItem xs="12" md="6">
                        <MudTextField @bind-Value="_user!.Username"
                                      Label="@($"{TranslationService.GetTranslation("drawer.field.username", "Username")} *")"
                                      Variant="Variant.Outlined"
                                      Required="true"
                                      RequiredError="@TranslationService.GetTranslation("drawer.error.usernameObbligatorio", "L'username è obbligatorio")"
                                      MaxLength="100"
                                      ReadOnly="@(!_isCreateMode)"
                                      Immediate="true"
                                      OnBlur="@(() => MarkChanged())"
                                      aria-describedby="username-help" />
                        <MudText id="username-help" Typo="Typo.caption" Class="mud-input-helper-text">
                            @(_isCreateMode ? 
                                TranslationService.GetTranslation("drawer.helperText.usernameCreate", "Inserisci un username unico") : 
                                TranslationService.GetTranslation("drawer.helperText.usernameEdit", "L'username non può essere modificato"))
                        </MudText>
                    </MudItem>
                    
                    <MudItem xs="12" md="6">
                        <MudTextField @bind-Value="_user!.Email"
                                      Label="@($"{TranslationService.GetTranslation("drawer.field.email", "Email")} *")"
                                      Variant="Variant.Outlined"
                                      InputType="InputType.Email"
                                      Required="true"
                                      RequiredError="@TranslationService.GetTranslation("drawer.error.emailObbligatoria", "L'email è obbligatoria")"
                                      MaxLength="256"
                                      Immediate="true"
                                      OnBlur="@(() => MarkChanged())"
                                      aria-describedby="email-help" />
                        <MudText id="email-help" Typo="Typo.caption" Class="mud-input-helper-text">
                            @TranslationService.GetTranslation("drawer.helperText.email", "Inserisci un indirizzo email valido")
                        </MudText>
                    </MudItem>
                    
                    <MudItem xs="12">
                        <MudSelect T="Guid?" 
                                   @bind-Value="_user!.TenantId" 
                                   Label="@($"{TranslationService.GetTranslation("drawer.field.tenant", "Tenant")} *")" 
                                   Variant="Variant.Outlined" 
                                   Required="true"
                                   RequiredError="@TranslationService.GetTranslation("drawer.error.tenantObbligatorio", "È necessario selezionare un tenant")"
                                   Disabled="@(!_isCreateMode)"
                                   Immediate="true"
                                   @bind-Value:after="@(() => MarkChanged())"
                                   aria-describedby="tenant-help">
                            @foreach (var tenant in _tenants)
                            {
                                <MudSelectItem T="Guid?" Value="@tenant.Id">@tenant.DisplayName</MudSelectItem>
                            }
                        </MudSelect>
                        <MudText id="tenant-help" Typo="Typo.caption" Class="mud-input-helper-text">
                            @(_isCreateMode ? 
                                TranslationService.GetTranslation("drawer.helperText.tenantCreate", "Seleziona il tenant a cui assegnare l'utente") : 
                                TranslationService.GetTranslation("drawer.helperText.tenantEdit", "Il tenant non può essere modificato dopo la creazione"))
                        </MudText>
                    </MudItem>
                    
                    @if (_isCreateMode)
                    {
                        <MudItem xs="12">
                            <MudAlert Severity="Severity.Info" Icon="@Icons.Material.Outlined.Info">
                                @TranslationService.GetTranslation("drawer.info.passwordAutoGenerated", "Una password temporanea verrà generata automaticamente e inviata all'utente via email. L'utente dovrà cambiarla al primo accesso.")
                            </MudAlert>
                        </MudItem>
                    }
                    
                    @if (!_isCreateMode)
                    {
                        <MudItem xs="12" md="6">
                            <MudSwitch T="bool" 
                                       @bind-Value="_user!.IsActive"
                                       Label="@TranslationService.GetTranslation("drawer.field.utenteAttivo", "Utente Attivo")"
                                       Color="Color.Primary"
                                       @onchange="@(() => MarkChanged())"
                                       aria-describedby="active-help" />
                            <MudText id="active-help" Typo="Typo.caption" Class="mud-input-helper-text">
                                @TranslationService.GetTranslation("drawer.helperText.utenteAttivo", "Indica se l'utente può accedere al sistema")
                            </MudText>
                        </MudItem>
                    }
                    
                    <MudItem xs="12">
                        <MudText Typo="Typo.subtitle1" Class="mb-3">
                            @TranslationService.GetTranslation("drawer.field.ruoli", "Ruoli") *
                        </MudText>
                        <fieldset aria-labelledby="roles-legend">
                            <legend id="roles-legend" style="display: none;">
                                @TranslationService.GetTranslation("drawer.aria.selezionaRuoli", "Seleziona i ruoli per l'utente")
                            </legend>
                            <MudGrid>
                                @foreach (var role in _availableRoles)
                                {
                                    <MudItem xs="12" sm="6" md="4">
                                        <MudCheckBox @bind-Value="_selectedRoles[role]"
                                                     @bind-Value:after="@(() => MarkChanged())"
                                                     Color="Color.Primary"
                                                     Label="@role"
                                                     aria-describedby="@($"role-{role}-help")" />
                                        <MudText id="@($"role-{role}-help")" Typo="Typo.caption" Class="mud-input-helper-text">
                                            @GetRoleDescription(role)
                                        </MudText>
                                    </MudItem>
                                }
                            </MudGrid>
                        </fieldset>
                    </MudItem>
                    
                    @if (!_isCreateMode && _user != null)
                    {
                        <MudItem xs="12" md="6">
                            <MudTextField Value="@_user.Id.ToString()"
                                          Label="@TranslationService.GetTranslation("drawer.field.idUtente", "ID Utente")"
                                          Variant="Variant.Outlined"
                                          ReadOnly="true"
                                          aria-label="@TranslationService.GetTranslation("drawer.aria.identificativoUnico", "Identificativo unico")" />
                        </MudItem>
                        
                        <MudItem xs="12" md="6">
                            <MudTextField Value="@_user.CreatedAt.ToString("dd/MM/yyyy HH:mm")"
                                          Label="@TranslationService.GetTranslation("drawer.field.dataCreazione", "Data Creazione")"
                                          Variant="Variant.Outlined"
                                          ReadOnly="true"
                                          aria-label="@TranslationService.GetTranslation("drawer.aria.dataOraCreazione", "Data e ora di creazione")" />
                        </MudItem>
                        
                        @if (_user.LastLoginAt.HasValue)
                        {
                            <MudItem xs="12" md="6">
                                <MudTextField Value="@_user.LastLoginAt.Value.ToString("dd/MM/yyyy HH:mm")"
                                              Label="@TranslationService.GetTranslation("field.lastLogin", "Ultimo Accesso")"
                                              Variant="Variant.Outlined"
                                              ReadOnly="true" />
                            </MudItem>
                        }
                    }
                </MudGrid>
            </MudForm>
        </MudPaper>
    }
</MudContainer>

@code {
    [Parameter] public Guid? UserId { get; set; }

    private UserManagementDto? _user;
    private bool _isCreateMode => UserId == null || UserId == Guid.Empty;
    private bool _isLoading = true;
    private bool _isSaving = false;
    private bool _hasLocalChanges = false;
    private string _originalSnapshot = string.Empty;
    private MudForm? _form;

    private List<TenantResponseDto> _tenants = new();
    private readonly List<string> _availableRoles = new() { "User", "Manager", "Admin", "SuperAdmin" };
    private Dictionary<string, bool> _selectedRoles = new();

    private readonly JsonSerializerOptions _jsonOptions = new()
    {
        WriteIndented = false,
        DefaultIgnoreCondition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull
    };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            InitializeRoles();
            await LoadTenantsAsync();

            if (_isCreateMode)
            {
                _user = new UserManagementDto
                {
                    IsActive = true,
                    Roles = new List<string>()
                };
                _originalSnapshot = JsonSerializer.Serialize(_user, _jsonOptions);
            }
            else
            {
                await LoadUserAsync();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error initializing user detail page for UserId: {UserId}", UserId);
            Snackbar.Add(TranslationService.GetTranslation("error.loadFailed", "Errore durante il caricamento"), Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }

    private void InitializeRoles()
    {
        _selectedRoles.Clear();
        foreach (var role in _availableRoles)
        {
            _selectedRoles[role] = false;
        }
    }

    private async Task LoadTenantsAsync()
    {
        try
        {
            _tenants = (await SuperAdminService.GetTenantsAsync()).ToList();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading tenants");
            Snackbar.Add(TranslationService.GetTranslation("error.loadFailed", "Errore durante il caricamento dei tenant"), Severity.Error);
        }
    }

    private async Task LoadUserAsync()
    {
        try
        {
            if (UserId.HasValue)
            {
                _user = await SuperAdminService.GetUserAsync(UserId.Value);
                if (_user != null)
                {
                    // Update role checkboxes based on user's roles
                    foreach (var role in _availableRoles)
                    {
                        _selectedRoles[role] = _user.Roles.Contains(role);
                    }
                    _originalSnapshot = JsonSerializer.Serialize(_user, _jsonOptions);
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading user {UserId}", UserId);
            Snackbar.Add(TranslationService.GetTranslation("error.loadFailed", "Errore durante il caricamento dell'utente"), Severity.Error);
        }
    }

    private void MarkChanged()
    {
        _hasLocalChanges = true;
    }

    private bool HasUnsavedChanges()
    {
        if (_user == null) return false;
        var currentSnapshot = JsonSerializer.Serialize(_user, _jsonOptions);
        return !string.Equals(currentSnapshot, _originalSnapshot, StringComparison.Ordinal) || _hasLocalChanges;
    }

    private async Task SaveUserAsync()
    {
        if (_form == null) return;

        await _form.Validate();
        if (!_form.IsValid)
        {
            Snackbar.Add(TranslationService.GetTranslation("validation.formInvalid", "Compilare tutti i campi obbligatori"), Severity.Warning);
            return;
        }

        // Validate at least one role is selected
        var selectedRolesList = _selectedRoles.Where(kvp => kvp.Value).Select(kvp => kvp.Key).ToList();
        if (!selectedRolesList.Any())
        {
            Snackbar.Add(TranslationService.GetTranslation("drawer.error.ruoloObbligatorio", "È necessario selezionare almeno un ruolo"), Severity.Error);
            return;
        }

        try
        {
            _isSaving = true;

            if (_isCreateMode)
            {
                var createDto = new CreateUserManagementDto
                {
                    FirstName = _user!.FirstName,
                    LastName = _user.LastName,
                    Username = _user.Username,
                    Email = _user.Email,
                    TenantId = _user.TenantId!.Value,
                    Roles = selectedRolesList
                };

                var created = await SuperAdminService.CreateUserAsync(createDto);
                Snackbar.Add(TranslationService.GetTranslation("drawer.success.userCreated", "Utente creato con successo! Una password temporanea è stata inviata via email."), Severity.Success);
                NavigationManager.NavigateTo($"/superadmin/users/{created.Id}");
            }
            else if (UserId.HasValue)
            {
                var updateDto = new UpdateUserManagementDto
                {
                    FirstName = _user!.FirstName,
                    LastName = _user.LastName,
                    Email = _user.Email,
                    IsActive = _user.IsActive,
                    Roles = selectedRolesList
                };

                await SuperAdminService.UpdateUserAsync(UserId.Value, updateDto);
                Snackbar.Add(TranslationService.GetTranslation("drawer.success.userUpdated", "Utente aggiornato con successo!"), Severity.Success);
                await LoadUserAsync();
            }

            _hasLocalChanges = false;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error saving user");
            var message = _isCreateMode ? 
                TranslationService.GetTranslation("drawer.error.userCreationFailed", "Errore nella creazione dell'utente") : 
                TranslationService.GetTranslation("drawer.error.userUpdateFailed", "Errore nell'aggiornamento dell'utente");
            Snackbar.Add($"{message}: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isSaving = false;
        }
    }

    private async Task TryNavigateAway(string targetUrl)
    {
        if (!HasUnsavedChanges())
        {
            NavigationManager.NavigateTo(targetUrl);
            return;
        }

        var title = TranslationService.GetTranslation("common.confirm", "Conferma");
        var message = TranslationService.GetTranslation("user.unsavedChangesConfirm", "Ci sono modifiche non salvate. Vuoi salvare prima di uscire?");
        var saveText = TranslationService.GetTranslation("common.save", "Salva");
        var discardText = TranslationService.GetTranslation("common.discard", "Non salvare");
        var cancelText = TranslationService.GetTranslation("common.cancel", "Annulla");

        var result = await DialogService.ShowMessageBox(title, message, yesText: saveText, noText: discardText, cancelText: cancelText);

        if (result == true)
        {
            await SaveUserAsync();
            if (!_hasLocalChanges)
            {
                NavigationManager.NavigateTo(targetUrl);
            }
        }
        else if (result == false)
        {
            NavigationManager.NavigateTo(targetUrl);
        }
    }

    private string GetRoleDescription(string role)
    {
        return role.ToLower() switch
        {
            "user" => TranslationService.GetTranslation("drawer.role.user", "Utente base con permessi limitati"),
            "manager" => TranslationService.GetTranslation("drawer.role.manager", "Gestisce operazioni e team"),
            "admin" => TranslationService.GetTranslation("drawer.role.admin", "Amministratore con accesso completo al tenant"),
            "superadmin" => TranslationService.GetTranslation("drawer.role.superadmin", "Super Amministratore con accesso globale"),
            _ => TranslationService.GetTranslation("drawer.role.default", "Ruolo personalizzato")
        };
    }
}
