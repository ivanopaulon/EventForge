@page "/sales/wizard"
@using EventForge.Client.Services.Sales
@using EventForge.DTOs.Sales
@using EventForge.Client.Shared.Components.Sales
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@inject ISalesService SalesService
@inject IPaymentMethodService PaymentMethodService
@inject INoteFlagService NoteFlagService
@inject ITableManagementService TableManagementService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject ILogger<SalesWizard> Logger

<PageTitle>EventForge - Vendita</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4 sales-wizard">
    <MudPaper Class="pa-4" Elevation="2">
        <!-- Header -->
        <div class="d-flex align-center mb-4">
            <MudIcon Icon="@Icons.Material.Filled.PointOfSale" Class="mr-2" Size="Size.Large" Color="Color.Primary" />
            <MudText Typo="Typo.h4">Nuova Vendita</MudText>
            <MudSpacer />
            <MudButton Variant="Variant.Text" 
                       Color="Color.Error" 
                       StartIcon="@Icons.Material.Filled.Close"
                       OnClick="CancelWizard">
                Annulla
            </MudButton>
        </div>

        <!-- Stepper -->
        <MudStepper @ref="_stepper" 
                    @bind-ActiveStepIndex="_activeStepIndex"
                    Linear="true"
                    Color="Color.Primary"
                    Variant="Variant.Filled"
                    HeaderSize="Size.Large"
                    HeaderTextView="HeaderTextView.All">

            <!-- Step 1: Authentication -->
            <MudStep Title="Autenticazione" Icon="@Icons.Material.Filled.Person">
                <div class="pa-4">
                    <MudText Typo="Typo.h6" Class="mb-4">Identificazione Operatore</MudText>
                    <MudAlert Severity="Severity.Info" Class="mb-4">
                        Per iniziare una nuova vendita, identifica l'operatore e il POS.
                    </MudAlert>
                    
                    <MudTextField @bind-Value="_operatorName" 
                                  Label="Nome Operatore" 
                                  Variant="Variant.Outlined"
                                  Margin="Margin.Dense"
                                  Class="mb-3"
                                  Placeholder="Es. Mario Rossi" />
                    
                    <MudTextField @bind-Value="_posName" 
                                  Label="Nome POS" 
                                  Variant="Variant.Outlined"
                                  Margin="Margin.Dense"
                                  Placeholder="Es. POS-001" />
                </div>
            </MudStep>

            <!-- Step 2: Sale Type -->
            <MudStep Title="Tipo Vendita" Icon="@Icons.Material.Filled.ShoppingCart">
                <div class="pa-4">
                    <MudText Typo="Typo.h6" Class="mb-4">Seleziona Tipo di Vendita</MudText>
                    
                    <MudRadioGroup @bind-Value="_saleType">
                        <MudRadio Value="@("RETAIL")" Color="Color.Primary" Dense="true">
                            <div class="d-flex align-center">
                                <MudIcon Icon="@Icons.Material.Filled.Store" Class="mr-2" />
                                <div>
                                    <MudText Typo="Typo.body1"><strong>Retail</strong></MudText>
                                    <MudText Typo="Typo.body2" Color="Color.Secondary">Vendita al dettaglio</MudText>
                                </div>
                            </div>
                        </MudRadio>
                        
                        <MudRadio Value="@("BAR")" Color="Color.Primary" Dense="true" Class="mt-2">
                            <div class="d-flex align-center">
                                <MudIcon Icon="@Icons.Material.Filled.LocalBar" Class="mr-2" />
                                <div>
                                    <MudText Typo="Typo.body1"><strong>Bar</strong></MudText>
                                    <MudText Typo="Typo.body2" Color="Color.Secondary">Servizio bar/caffetteria</MudText>
                                </div>
                            </div>
                        </MudRadio>
                        
                        <MudRadio Value="@("RESTAURANT")" Color="Color.Primary" Dense="true" Class="mt-2">
                            <div class="d-flex align-center">
                                <MudIcon Icon="@Icons.Material.Filled.Restaurant" Class="mr-2" />
                                <div>
                                    <MudText Typo="Typo.body1"><strong>Ristorante</strong></MudText>
                                    <MudText Typo="Typo.body2" Color="Color.Secondary">Servizio ristorante completo</MudText>
                                </div>
                            </div>
                        </MudRadio>
                    </MudRadioGroup>
                </div>
            </MudStep>

            <!-- Step 3: Products -->
            <MudStep Title="Prodotti" Icon="@Icons.Material.Filled.Inventory">
                <div class="pa-4">
                    <MudText Typo="Typo.h6" Class="mb-4">Aggiungi Prodotti al Carrello</MudText>
                    
                    <MudGrid>
                        <!-- Product Search - Left Side -->
                        <MudItem xs="12" md="7">
                            <ProductSearch OnProductSelected="@HandleProductSelected" />
                        </MudItem>
                        
                        <!-- Cart Summary - Right Side -->
                        <MudItem xs="12" md="5">
                            <CartSummary Items="@_cartItems"
                                        AllowEdit="true"
                                        OnItemQuantityChanged="@HandleQuantityChanged"
                                        OnItemRemoved="@HandleItemRemoved"
                                        OnCartCleared="@HandleCartCleared" />
                        </MudItem>
                    </MudGrid>
                </div>
            </MudStep>
            
            <!-- Step 4: Table Management (conditional for BAR/RESTAURANT) -->
            <MudStep Title="Tavolo" Icon="@Icons.Material.Filled.TableRestaurant">
                <div class="pa-4">
                    <TableManagementStep SaleType="@_saleType" 
                                        @bind-SelectedTableId="@_selectedTableId" />
                </div>
            </MudStep>

            <!-- Step 5: Payment -->
            <MudStep Title="Pagamento" Icon="@Icons.Material.Filled.Payment">
                <div class="pa-4">
                    <MudText Typo="Typo.h6" Class="mb-4">Metodo di Pagamento</MudText>
                    
                    <MudGrid>
                        <!-- Payment Panel - Left Side -->
                        <MudItem xs="12" md="8">
                            <PaymentPanel TotalAmount="@GetCartTotal()"
                                         PaymentMethods="@_paymentMethods"
                                         Payments="@_payments"
                                         AllowEdit="true"
                                         OnPaymentAdded="@HandlePaymentAdded"
                                         OnPaymentRemoved="@HandlePaymentRemoved" />
                        </MudItem>
                        
                        <!-- Cart Summary (Read-only) - Right Side -->
                        <MudItem xs="12" md="4">
                            <CartSummary Items="@_cartItems"
                                        AllowEdit="false" />
                        </MudItem>
                    </MudGrid>
                </div>
            </MudStep>

            <!-- Step 6: Complete -->
            <MudStep Title="Completa" Icon="@Icons.Material.Filled.CheckCircle">
                <div class="pa-4">
                    <div class="text-center mb-4">
                        <MudIcon Icon="@Icons.Material.Filled.CheckCircle" 
                                 Color="Color.Success" 
                                 Size="Size.Large" 
                                 Class="success-icon mb-3" />
                        <MudText Typo="Typo.h4" Class="mb-2">Vendita Completata!</MudText>
                        <MudText Typo="Typo.body1" Color="Color.Secondary">
                            La vendita Ã¨ stata registrata con successo.
                        </MudText>
                    </div>
                    
                    <!-- Sale Summary -->
                    <MudPaper Class="pa-4 mb-4" Elevation="1">
                        <MudText Typo="Typo.h6" Class="mb-3">Riepilogo Vendita</MudText>
                        <MudGrid>
                            <MudItem xs="6">
                                <MudText Typo="Typo.body2" Color="Color.Secondary">Operatore:</MudText>
                                <MudText Typo="Typo.body1"><strong>@_operatorName</strong></MudText>
                            </MudItem>
                            <MudItem xs="6">
                                <MudText Typo="Typo.body2" Color="Color.Secondary">POS:</MudText>
                                <MudText Typo="Typo.body1"><strong>@_posName</strong></MudText>
                            </MudItem>
                            <MudItem xs="6">
                                <MudText Typo="Typo.body2" Color="Color.Secondary">Tipo Vendita:</MudText>
                                <MudText Typo="Typo.body1"><strong>@_saleType</strong></MudText>
                            </MudItem>
                            <MudItem xs="6">
                                <MudText Typo="Typo.body2" Color="Color.Secondary">Articoli:</MudText>
                                <MudText Typo="Typo.body1"><strong>@_cartItems.Count</strong></MudText>
                            </MudItem>
                            <MudItem xs="12">
                                <MudDivider Class="my-2" />
                            </MudItem>
                            <MudItem xs="6">
                                <MudText Typo="Typo.body2" Color="Color.Secondary">Totale:</MudText>
                                <MudText Typo="Typo.h5" Color="Color.Primary"><strong>@GetCartTotal().ToString("C")</strong></MudText>
                            </MudItem>
                            <MudItem xs="6">
                                <MudText Typo="Typo.body2" Color="Color.Secondary">Pagato:</MudText>
                                <MudText Typo="Typo.h5" Color="Color.Success"><strong>@_payments.Sum(p => p.Amount).ToString("C")</strong></MudText>
                            </MudItem>
                        </MudGrid>
                    </MudPaper>
                    
                    <!-- Action Buttons -->
                    <div class="d-flex justify-center ga-2">
                        <MudButton Variant="Variant.Filled" 
                                   Color="Color.Primary"
                                   Size="Size.Large"
                                   StartIcon="@Icons.Material.Filled.Add"
                                   OnClick="StartNewSale">
                            Nuova Vendita
                        </MudButton>
                        <MudButton Variant="Variant.Outlined" 
                                   Color="Color.Secondary"
                                   Size="Size.Large"
                                   StartIcon="@Icons.Material.Filled.Home"
                                   OnClick="GoToHome">
                            Torna alla Home
                        </MudButton>
                    </div>
                </div>
            </MudStep>
        </MudStepper>

        <!-- Navigation Buttons -->
        @if (_activeStepIndex < 5)
        {
            <div class="d-flex justify-space-between mt-4">
                <MudButton Variant="Variant.Text"
                           StartIcon="@Icons.Material.Filled.ArrowBack"
                           OnClick="PreviousStep"
                           Disabled="@(_activeStepIndex == 0)">
                    Indietro
                </MudButton>
                
                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           EndIcon="@Icons.Material.Filled.ArrowForward"
                           OnClick="NextStepAsync">
                    @(_activeStepIndex == 4 ? "Completa" : "Avanti")
                </MudButton>
            </div>
        }
    </MudPaper>
</MudContainer>

@code {
    private MudStepper? _stepper;
    private SaleSessionDto? _currentSession;
    private int _activeStepIndex = 0;
    
    // Step 1 - Authentication
    private string _operatorName = string.Empty;
    private string _posName = string.Empty;
    
    // Step 2 - Sale Type
    private string _saleType = "RETAIL";
    
    // Step 3 - Products (Cart)
    private List<SaleItemDto> _cartItems = new();
    
    // Step 4 - Table Management
    private Guid? _selectedTableId;
    
    // Step 5 - Payment
    private List<PaymentMethodDto> _paymentMethods = new();
    private List<SalePaymentDto> _payments = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Logger.LogInformation("SalesWizard initialized");
            // Load payment methods for later use
            await LoadPaymentMethodsAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error initializing SalesWizard");
            Snackbar.Add("Errore durante l'inizializzazione", Severity.Error);
        }
    }
    
    private async Task LoadPaymentMethodsAsync()
    {
        try
        {
            _paymentMethods = (await PaymentMethodService.GetActiveAsync()).ToList();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading payment methods");
            Snackbar.Add("Errore nel caricamento dei metodi di pagamento", Severity.Warning);
        }
    }
    
    #region Step 3 - Product Handlers
    
    private void HandleProductSelected(EventForge.DTOs.Products.ProductDto product)
    {
        try
        {
            // Check if product already in cart
            var existingItem = _cartItems.FirstOrDefault(i => i.ProductId == product.Id);
            
            if (existingItem != null)
            {
                // Increase quantity
                existingItem.Quantity++;
                existingItem.TotalAmount = existingItem.Quantity * existingItem.UnitPrice;
                Snackbar.Add($"QuantitÃ  di {product.Name} aumentata", Severity.Success);
            }
            else
            {
                // Validate that product has a price
                if (!product.DefaultPrice.HasValue || product.DefaultPrice.Value <= 0)
                {
                    Snackbar.Add($"Il prodotto {product.Name} non ha un prezzo valido", Severity.Warning);
                    return;
                }
                
                // Add new item to cart
                var newItem = new SaleItemDto
                {
                    Id = Guid.NewGuid(),
                    ProductId = product.Id,
                    ProductCode = product.Code,
                    ProductName = product.Name,
                    Quantity = 1,
                    UnitPrice = product.DefaultPrice.Value,
                    TotalAmount = product.DefaultPrice.Value,
                    TaxRate = 22.0m, // Default VAT rate (use TaxRate not VatRate)
                    TaxAmount = product.DefaultPrice.Value * 0.22m,
                    DiscountPercent = 0
                };
                
                _cartItems.Add(newItem);
                Snackbar.Add($"{product.Name} aggiunto al carrello", Severity.Success);
            }
            
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error adding product to cart");
            Snackbar.Add("Errore nell'aggiunta del prodotto", Severity.Error);
        }
    }
    
    private async Task HandleQuantityChanged(SaleItemDto item)
    {
        try
        {
            // Quantity already updated in CartSummary, just recalculate total
            item.TotalAmount = item.Quantity * item.UnitPrice * (1 - item.DiscountPercent / 100);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error updating item quantity");
            Snackbar.Add("Errore nell'aggiornamento della quantitÃ ", Severity.Error);
        }
    }
    
    private async Task HandleItemRemoved(SaleItemDto item)
    {
        try
        {
            _cartItems.Remove(item);
            Snackbar.Add("Prodotto rimosso dal carrello", Severity.Info);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error removing item from cart");
            Snackbar.Add("Errore nella rimozione del prodotto", Severity.Error);
        }
    }
    
    private async Task HandleCartCleared()
    {
        try
        {
            _cartItems.Clear();
            Snackbar.Add("Carrello svuotato", Severity.Info);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error clearing cart");
            Snackbar.Add("Errore nello svuotamento del carrello", Severity.Error);
        }
    }
    
    #endregion
    
    #region Step 4 - Payment Handlers
    
    private async Task HandlePaymentAdded((PaymentMethodDto Method, decimal Amount) paymentInfo)
    {
        try
        {
            // Create a SalePaymentDto from the tuple
            var payment = new SalePaymentDto
            {
                Id = Guid.NewGuid(),
                PaymentMethodId = paymentInfo.Method.Id,
                PaymentMethodName = paymentInfo.Method.Name,
                PaymentMethodCode = paymentInfo.Method.Code,
                Amount = paymentInfo.Amount,
                Status = PaymentStatusDto.Completed,
                PaymentDate = DateTime.Now,
                CreatedAt = DateTime.Now
            };
            
            _payments.Add(payment);
            Snackbar.Add($"Pagamento aggiunto: {payment.Amount:C}", Severity.Success);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error adding payment");
            Snackbar.Add("Errore nell'aggiunta del pagamento", Severity.Error);
        }
    }
    
    private async Task HandlePaymentRemoved(SalePaymentDto payment)
    {
        try
        {
            _payments.Remove(payment);
            Snackbar.Add("Pagamento rimosso", Severity.Info);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error removing payment");
            Snackbar.Add("Errore nella rimozione del pagamento", Severity.Error);
        }
    }
    
    private decimal GetCartTotal()
    {
        return _cartItems.Sum(i => i.TotalAmount);
    }
    
    #endregion

    private void PreviousStep()
    {
        if (_activeStepIndex > 0)
        {
            _activeStepIndex--;
        }
    }

    private async Task NextStepAsync()
    {
        if (await ValidateCurrentStepAsync())
        {
            _activeStepIndex++;
            
            // If completing payment step, process the sale
            if (_activeStepIndex == 5)
            {
                await ProcessSaleAsync();
            }
        }
    }

    private async Task<bool> ValidateCurrentStepAsync()
    {
        switch (_activeStepIndex)
        {
            case 0: // Authentication
                if (string.IsNullOrWhiteSpace(_operatorName) || string.IsNullOrWhiteSpace(_posName))
                {
                    Snackbar.Add("Inserisci il nome dell'operatore e del POS", Severity.Warning);
                    return false;
                }
                return true;

            case 1: // Sale Type
                // Always valid, type is required via radio buttons
                return true;

            case 2: // Products
                if (!_cartItems.Any())
                {
                    Snackbar.Add("Aggiungi almeno un prodotto al carrello", Severity.Warning);
                    return false;
                }
                return true;
            
            case 3: // Table Management
                // Always valid, table selection is optional
                return true;

            case 4: // Payment
                var total = GetCartTotal();
                var paid = _payments.Sum(p => p.Amount);
                
                if (paid < total)
                {
                    Snackbar.Add($"Pagamento incompleto. Mancano {(total - paid):C}", Severity.Warning);
                    return false;
                }
                return true;

            default:
                return true;
        }
    }
    
    private async Task ProcessSaleAsync()
    {
        try
        {
            Logger.LogInformation("Processing sale...");
            
            // TODO: In production, get actual Operator and POS IDs from authentication/session
            // For now, we'll use placeholder GUIDs that should be replaced with real ones
            var operatorId = Guid.NewGuid(); // Replace with actual authenticated operator ID
            var posId = Guid.NewGuid(); // Replace with actual POS ID from configuration
            
            // Create sale session
            var createDto = new CreateSaleSessionDto
            {
                OperatorId = operatorId,
                PosId = posId,
                SaleType = _saleType,
                TableId = _selectedTableId,
                Currency = "EUR"
            };
            
            // Create the session
            _currentSession = await SalesService.CreateSessionAsync(createDto);
            
            if (_currentSession == null)
            {
                throw new Exception("Failed to create sale session");
            }
            
            Logger.LogInformation($"Sale session created: {_currentSession.Id}");
            
            // Add all items to the session
            foreach (var item in _cartItems)
            {
                var addItemDto = new AddSaleItemDto
                {
                    ProductId = item.ProductId,
                    Quantity = item.Quantity,
                    UnitPrice = item.UnitPrice,
                    DiscountPercent = item.DiscountPercent,
                    Notes = item.Notes,
                    IsService = item.IsService
                };
                
                _currentSession = await SalesService.AddItemAsync(_currentSession.Id, addItemDto);
                Logger.LogInformation($"Added item {item.ProductName} to session");
            }
            
            // Add all payments to the session
            foreach (var payment in _payments)
            {
                var addPaymentDto = new AddSalePaymentDto
                {
                    PaymentMethodId = payment.PaymentMethodId,
                    Amount = payment.Amount,
                    TransactionReference = payment.TransactionReference,
                    Notes = payment.Notes
                };
                
                _currentSession = await SalesService.AddPaymentAsync(_currentSession.Id, addPaymentDto);
                Logger.LogInformation($"Added payment {payment.Amount:C} via {payment.PaymentMethodName} to session");
            }
            
            // Close the session to complete the sale
            _currentSession = await SalesService.CloseSessionAsync(_currentSession.Id);
            
            if (_currentSession == null)
            {
                throw new Exception("Failed to close sale session");
            }
            
            Logger.LogInformation($"Sale session {_currentSession.Id} closed successfully");
            Snackbar.Add("Vendita completata con successo!", Severity.Success);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error processing sale");
            Snackbar.Add($"Errore nel completamento della vendita: {ex.Message}", Severity.Error);
            _activeStepIndex = 4; // Go back to payment step
            throw; // Re-throw to prevent navigation to completion step
        }
    }

    private async Task StartNewSale()
    {
        // Reset wizard state
        _operatorName = string.Empty;
        _posName = string.Empty;
        _saleType = "RETAIL";
        _currentSession = null;
        _cartItems.Clear();
        _selectedTableId = null;
        _payments.Clear();
        _activeStepIndex = 0;
        
        Snackbar.Add("Pronto per una nuova vendita", Severity.Success);
    }

    private void GoToHome()
    {
        NavigationManager.NavigateTo("/");
    }

    private void CancelWizard()
    {
        NavigationManager.NavigateTo("/");
    }
}
