@using EventForge.DTOs.Sales
@inject ISnackbar Snackbar

<div class="table-management-step">
    <MudText Typo="Typo.h6" Class="mb-4">Gestione Tavoli</MudText>
    
    @if (ShowTableManagement)
    {
        <MudAlert Severity="Severity.Info" Class="mb-4" Icon="@Icons.Material.Filled.TableRestaurant">
            Seleziona un tavolo per questa vendita. Puoi anche procedere senza assegnare un tavolo.
        </MudAlert>
        
        <MudGrid>
            <!-- Table Selection -->
            <MudItem xs="12" md="6">
                <MudPaper Class="pa-4" Elevation="2">
                    <MudText Typo="Typo.subtitle1" Class="mb-3">
                        <MudIcon Icon="@Icons.Material.Filled.TableRestaurant" Class="mr-2" />
                        Seleziona Tavolo
                    </MudText>
                    
                    <MudSelect @bind-Value="SelectedTableId" 
                               Label="Tavolo" 
                               Variant="Variant.Outlined"
                               Clearable="true"
                               Placeholder="Nessun tavolo (vendita diretta)">
                        @foreach (var table in AvailableTables)
                        {
                            <MudSelectItem Value="@table.Id">
                                @table.Name - @table.Capacity persone
                            </MudSelectItem>
                        }
                    </MudSelect>
                    
                    @if (SelectedTableId.HasValue)
                    {
                        var selectedTable = AvailableTables.FirstOrDefault(t => t.Id == SelectedTableId.Value);
                        if (selectedTable != null)
                        {
                            <MudAlert Severity="Severity.Success" Class="mt-3" Dense="true">
                                Tavolo selezionato: <strong>@selectedTable.Name</strong> (@selectedTable.Capacity persone)
                            </MudAlert>
                        }
                    }
                </MudPaper>
            </MudItem>
            
            <!-- Table Status Info -->
            <MudItem xs="12" md="6">
                <MudPaper Class="pa-4" Elevation="2">
                    <MudText Typo="Typo.subtitle1" Class="mb-3">
                        <MudIcon Icon="@Icons.Material.Filled.Info" Class="mr-2" />
                        Stato Tavoli
                    </MudText>
                    
                    <MudList T="string" Dense="true">
                        <MudListItem T="string" Icon="@Icons.Material.Filled.CheckCircle" IconColor="Color.Success">
                            <MudText Typo="Typo.body2">
                                Disponibili: <strong>@AvailableTables.Count(t => t.Status == "Available")</strong>
                            </MudText>
                        </MudListItem>
                        <MudListItem T="string" Icon="@Icons.Material.Filled.Restaurant" IconColor="Color.Warning">
                            <MudText Typo="Typo.body2">
                                Occupati: <strong>@AvailableTables.Count(t => t.Status == "Occupied")</strong>
                            </MudText>
                        </MudListItem>
                        <MudListItem T="string" Icon="@Icons.Material.Filled.Schedule" IconColor="Color.Info">
                            <MudText Typo="Typo.body2">
                                Prenotati: <strong>@AvailableTables.Count(t => t.Status == "Reserved")</strong>
                            </MudText>
                        </MudListItem>
                    </MudList>
                </MudPaper>
            </MudItem>
        </MudGrid>
        
        <MudDivider Class="my-4" />
        
        <!-- Quick Info -->
        <MudText Typo="Typo.body2" Color="Color.Secondary" Align="Align.Center">
            <MudIcon Icon="@Icons.Material.Filled.Info" Size="Size.Small" Class="mr-1" />
            Puoi continuare senza selezionare un tavolo per una vendita diretta (asporto/banco)
        </MudText>
    }
    else
    {
        <MudAlert Severity="Severity.Normal" Icon="@Icons.Material.Filled.Store">
            La gestione tavoli non Ã¨ necessaria per vendite di tipo <strong>RETAIL</strong>
        </MudAlert>
    }
</div>

@code {
    [Parameter]
    public string SaleType { get; set; } = "RETAIL";
    
    [Parameter]
    public Guid? SelectedTableId { get; set; }
    
    [Parameter]
    public EventCallback<Guid?> SelectedTableIdChanged { get; set; }
    
    private bool ShowTableManagement => SaleType is "BAR" or "RESTAURANT";
    
    private List<TableInfo> AvailableTables { get; set; } = new();
    
    protected override async Task OnInitializedAsync()
    {
        // Load available tables
        // TODO: Replace with actual API call
        // AvailableTables = await TableManagementService.GetAvailableAsync();
        
        // Mock data for demonstration
        AvailableTables = GenerateMockTables();
    }
    
    protected override async Task OnParametersSetAsync()
    {
        // Refresh tables when sale type changes
        if (ShowTableManagement && !AvailableTables.Any())
        {
            AvailableTables = GenerateMockTables();
        }
    }
    
    private List<TableInfo> GenerateMockTables()
    {
        return new List<TableInfo>
        {
            new TableInfo { Id = Guid.NewGuid(), Name = "Tavolo 1", Capacity = 2, Status = "Available" },
            new TableInfo { Id = Guid.NewGuid(), Name = "Tavolo 2", Capacity = 4, Status = "Available" },
            new TableInfo { Id = Guid.NewGuid(), Name = "Tavolo 3", Capacity = 4, Status = "Occupied" },
            new TableInfo { Id = Guid.NewGuid(), Name = "Tavolo 4", Capacity = 6, Status = "Available" },
            new TableInfo { Id = Guid.NewGuid(), Name = "Tavolo 5", Capacity = 2, Status = "Reserved" },
            new TableInfo { Id = Guid.NewGuid(), Name = "Tavolo 6", Capacity = 8, Status = "Available" },
            new TableInfo { Id = Guid.NewGuid(), Name = "Bancone 1", Capacity = 1, Status = "Available" },
            new TableInfo { Id = Guid.NewGuid(), Name = "Bancone 2", Capacity = 1, Status = "Available" }
        };
    }
    
    private class TableInfo
    {
        public Guid Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public int Capacity { get; set; }
        public string Status { get; set; } = "Available";
    }
}
