@page "/login"
@using Microsoft.AspNetCore.Authorization
@attribute [AllowAnonymous]
@inject IAuthService AuthService
@inject IHealthService HealthService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager

<PageTitle>Login - EventForge</PageTitle>

<MudContainer MaxWidth="MaxWidth.Medium" Class="mt-8">
    <MudPaper Class="pa-8" Elevation="4">
        <MudText Typo="Typo.h4" Align="Align.Center" Class="mb-8">
            <MudIcon Icon="Icons.Material.Filled.Login" Class="mr-2" />
            EventForge Login
        </MudText>

        @if (_isLoading)
        {
            <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="mb-4" />
        }

        <MudForm @ref="form" @bind-IsValid="@_isFormValid">
            <MudTextField @bind-Value="_loginRequest.Username"
                          For="@(() => _loginRequest.Username)"
                          Label="Username"
                          Variant="Variant.Outlined"
                          Required="true"
                          RequiredError="Username is required"
                          Class="mb-4"
                          Disabled="_isLoading" />

            <MudTextField @bind-Value="_loginRequest.Password"
                          For="@(() => _loginRequest.Password)"
                          Label="Password"
                          Variant="Variant.Outlined"
                          InputType="InputType.Password"
                          Required="true"
                          RequiredError="Password is required"
                          Class="mb-4"
                          Disabled="_isLoading" />

            <MudCheckBox T="bool" @bind-Value="_loginRequest.RememberMe"
                         Label="Remember me"
                         Class="mb-4"
                         Disabled="_isLoading" />

            <MudButton ButtonType="ButtonType.Button"
                       Variant="Variant.Filled"
                       Color="Color.Primary"
                       Size="Size.Large"
                       FullWidth="true"
                       OnClick="HandleLogin"
                       Disabled="@(!_isFormValid || _isLoading)"
                       Class="mb-4">
                @if (_isLoading)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    <MudText Class="ms-2">Logging in...</MudText>
                }
                else
                {
                    <MudIcon Icon="Icons.Material.Filled.Login" Class="mr-2" />
                    <MudText>Login</MudText>
                }
            </MudButton>
        </MudForm>

        <MudDivider Class="my-6" />

        <!-- Health Status Section -->
        <MudExpansionPanels Elevation="0">
            <MudExpansionPanel Text="Server Health Status" Icon="@Icons.Material.Filled.HealthAndSafety">
                @if (_healthStatus != null)
                {
                    <MudGrid>
                        <MudItem xs="12" md="6">
                            <MudCard Elevation="2" Class="pa-4">
                                <MudCardHeader>
                                    <CardHeaderContent>
                                        <MudText Typo="Typo.h6">System Overview</MudText>
                                    </CardHeaderContent>
                                </MudCardHeader>
                                <MudCardContent>
                                    <div class="d-flex flex-column ga-2">
                                        <div class="d-flex align-center ga-2">
                                            <MudIcon Icon="@GetStatusIcon(_healthStatus.ApiStatus)" Color="@GetStatusColor(_healthStatus.ApiStatus)" />
                                            <MudText><strong>API Status:</strong> @_healthStatus.ApiStatus</MudText>
                                        </div>
                                        <div class="d-flex align-center ga-2">
                                            <MudIcon Icon="@GetStatusIcon(_healthStatus.DatabaseStatus)" Color="@GetStatusColor(_healthStatus.DatabaseStatus)" />
                                            <MudText><strong>Database:</strong> @_healthStatus.DatabaseStatus</MudText>
                                        </div>
                                        <div class="d-flex align-center ga-2">
                                            <MudIcon Icon="@GetStatusIcon(_healthStatus.AuthenticationStatus)" Color="@GetStatusColor(_healthStatus.AuthenticationStatus)" />
                                            <MudText><strong>Authentication:</strong> @_healthStatus.AuthenticationStatus</MudText>
                                        </div>
                                        <div class="d-flex align-center ga-2">
                                            <MudIcon Icon="@Icons.Material.Filled.Schedule" />
                                            <MudText><strong>Last Check:</strong> @_healthStatus.Timestamp.ToString("yyyy-MM-dd HH:mm:ss") UTC</MudText>
                                        </div>
                                        <div class="d-flex align-center ga-2">
                                            <MudIcon Icon="@Icons.Material.Filled.Info" />
                                            <MudText><strong>Version:</strong> @_healthStatus.Version</MudText>
                                        </div>
                                    </div>
                                </MudCardContent>
                            </MudCard>
                        </MudItem>

                        <MudItem xs="12" md="6">
                            <MudCard Elevation="2" Class="pa-4">
                                <MudCardHeader>
                                    <CardHeaderContent>
                                        <MudText Typo="Typo.h6">System Details</MudText>
                                    </CardHeaderContent>
                                </MudCardHeader>
                                <MudCardContent>
                                    <div class="d-flex flex-column ga-2">
                                        <div class="d-flex align-center ga-2">
                                            <MudIcon Icon="@Icons.Material.Filled.Computer" />
                                            <MudText><strong>Environment:</strong> @_healthStatus.Environment</MudText>
                                        </div>
                                        <div class="d-flex align-center ga-2">
                                            <MudIcon Icon="@Icons.Material.Filled.Storage" />
                                            <MudText><strong>Machine:</strong> @_healthStatus.MachineName</MudText>
                                        </div>
                                        <div class="d-flex align-center ga-2">
                                            <MudIcon Icon="@Icons.Material.Filled.Memory" />
                                            <MudText><strong>Process ID:</strong> @_healthStatus.ProcessId</MudText>
                                        </div>
                                        <div class="d-flex align-center ga-2">
                                            <MudIcon Icon="@Icons.Material.Filled.Memory" />
                                            <MudText><strong>Memory Usage:</strong> @FormatBytes(_healthStatus.WorkingSet)</MudText>
                                        </div>
                                        <div class="d-flex align-center ga-2">
                                            <MudIcon Icon="@Icons.Material.Filled.AccessTime" />
                                            <MudText><strong>Uptime:</strong> @FormatUptime(_healthStatus.Uptime)</MudText>
                                        </div>
                                    </div>
                                </MudCardContent>
                            </MudCard>
                        </MudItem>

                        @if (_healthStatus.Dependencies?.Any() == true)
                        {
                            <MudItem xs="12">
                                <MudCard Elevation="2" Class="pa-4">
                                    <MudCardHeader>
                                        <CardHeaderContent>
                                            <MudText Typo="Typo.h6">Dependencies</MudText>
                                        </CardHeaderContent>
                                    </MudCardHeader>
                                    <MudCardContent>
                                        <div class="d-flex flex-column ga-2">
                                            @foreach (var dep in _healthStatus.Dependencies)
                                            {
                                                <div class="d-flex align-center ga-2">
                                                    <MudIcon Icon="@GetStatusIcon(dep.Value)" Color="@GetStatusColor(dep.Value)" />
                                                    <MudText><strong>@dep.Key:</strong> @dep.Value</MudText>
                                                </div>
                                            }
                                        </div>
                                    </MudCardContent>
                                </MudCard>
                            </MudItem>
                        }

                        @if (_healthStatus.AppliedMigrations?.Any() == true)
                        {
                            <MudItem xs="12">
                                <MudCard Elevation="2" Class="pa-4">
                                    <MudCardHeader>
                                        <CardHeaderContent>
                                            <MudText Typo="Typo.h6">Applied Migrations (@_healthStatus.AppliedMigrations.Count())</MudText>
                                        </CardHeaderContent>
                                    </MudCardHeader>
                                    <MudCardContent>
                                        <div class="d-flex flex-wrap ga-1">
                                            @foreach (var migration in _healthStatus.AppliedMigrations.Take(10))
                                            {
                                                <MudChip T="string" Color="Color.Info" Size="Size.Small">@migration</MudChip>
                                            }
                                            @if (_healthStatus.AppliedMigrations.Count() > 10)
                                            {
                                                <MudChip T="string" Color="Color.Default" Size="Size.Small">... and @(_healthStatus.AppliedMigrations.Count() - 10) more</MudChip>
                                            }
                                        </div>
                                    </MudCardContent>
                                </MudCard>
                            </MudItem>
                        }
                    </MudGrid>
                }
                else if (_healthError != null)
                {
                    <MudAlert Severity="Severity.Error" Icon="@Icons.Material.Filled.Error">
                        <MudText><strong>Health Check Failed:</strong> @_healthError</MudText>
                    </MudAlert>
                }
                else
                {
                    <MudProgressLinear Color="Color.Primary" Indeterminate="true" />
                    <MudText Align="Align.Center" Class="mt-2">Loading health status...</MudText>
                }
            </MudExpansionPanel>
        </MudExpansionPanels>
    </MudPaper>
</MudContainer>

@code {
    private MudForm form = null!;
    private bool _isFormValid;
    private bool _isLoading = false;
    private readonly LoginRequestDto _loginRequest = new();
    private DetailedHealthStatusDto? _healthStatus;
    private string? _healthError;

    protected override async Task OnInitializedAsync()
    {
        // Check if user is already authenticated
        var isAuthenticated = await AuthService.IsAuthenticatedAsync();
        if (isAuthenticated)
        {
            // Check if user is admin and redirect accordingly
            var isAdmin = await AuthService.IsInRoleAsync("Admin");
            NavigationManager.NavigateTo(isAdmin ? "/admin" : "/admin");
            return;
        }
        
        await LoadHealthStatus();
    }

    private async Task LoadHealthStatus()
    {
        try
        {
            _healthStatus = await HealthService.GetDetailedHealthAsync();
            if (_healthStatus == null)
            {
                _healthError = "Unable to connect to server or retrieve health status.";
            }
        }
        catch (Exception ex)
        {
            _healthError = $"Error loading health status: {ex.Message}";
        }
        StateHasChanged();
    }

    private async Task HandleLogin()
    {
        if (!_isFormValid) return;

        _isLoading = true;
        try
        {
            var result = await AuthService.LoginAsync(_loginRequest);
            if (result != null)
            {
                Snackbar.Add("Login successful!", Severity.Success);
                
                // Check if user is admin and redirect accordingly
                var isAdmin = await AuthService.IsInRoleAsync("Admin");
                NavigationManager.NavigateTo(isAdmin ? "/admin" : "/admin");
            }
            else
            {
                Snackbar.Add("Login failed. Please check your credentials.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Login error: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }

    private string GetStatusIcon(string? status) => status?.ToLower() switch
    {
        "healthy" => Icons.Material.Filled.CheckCircle,
        "degraded" => Icons.Material.Filled.Warning,
        "unhealthy" or "error" => Icons.Material.Filled.Error,
        "enabled" => Icons.Material.Filled.CheckCircle,
        "disabled" => Icons.Material.Filled.DoNotDisturb,
        _ => Icons.Material.Filled.Help
    };

    private Color GetStatusColor(string? status) => status?.ToLower() switch
    {
        "healthy" => Color.Success,
        "degraded" => Color.Warning,
        "unhealthy" or "error" => Color.Error,
        "enabled" => Color.Success,
        "disabled" => Color.Default,
        _ => Color.Default
    };

    private string FormatBytes(long bytes)
    {
        const int scale = 1024;
        string[] orders = { "B", "KB", "MB", "GB", "TB" };
        
        long max = (long)Math.Pow(scale, orders.Length - 1);
        foreach (string order in orders)
        {
            if (bytes > max)
                return string.Format("{0:##.##} {1}", decimal.Divide(bytes, max), order);
            max /= scale;
        }
        return "0 B";
    }

    private string FormatUptime(TimeSpan uptime)
    {
        if (uptime.TotalDays >= 1)
            return $"{(int)uptime.TotalDays} days, {uptime.Hours:D2}:{uptime.Minutes:D2}:{uptime.Seconds:D2}";
        else
            return $"{uptime.Hours:D2}:{uptime.Minutes:D2}:{uptime.Seconds:D2}";
    }
}