@page "/login"
@layout LoginLayout
@using Microsoft.AspNetCore.Authorization
@attribute [AllowAnonymous]
@inject IAuthService AuthService
@inject IHealthService HealthService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject ITranslationService TranslationService

<PageTitle>@TranslationService.GetTranslation("auth.login", "Login") - EventForge</PageTitle>

<!-- Compact and modern responsive login page with accessibility -->
<MudContainer MaxWidth="MaxWidth.Small" Class="compact-login-container mt-2 mt-sm-4">
    <MudGrid Justify="Justify.Center">
        <MudItem xs="12">
            <MudPaper Class="pa-3 pa-sm-4" Elevation="1" role="main">
                <!-- Compact login header with semantic structure -->
                <header class="text-center mb-4">
                    <MudText Typo="Typo.h5" 
                             Component="h1"
                             Align="Align.Center" 
                             Class="mb-3"
                             aria-label="Pagina di accesso EventForge">
                        <MudIcon Icon="Icons.Material.Filled.Login" 
                                 Class="mr-2" 
                                 Size="Size.Medium"
                                 aria-hidden="true" />
                        @TranslationService.GetTranslation("auth.login", "EventForge Login")
                    </MudText>
                </header>

                @if (_isLoading)
                {
                    <MudProgressLinear Color="Color.Primary" 
                                       Indeterminate="true" 
                                       Class="mb-3"
                                       aria-label="Accesso in corso" />
                }

                <!-- Compact login form with improved accessibility -->
                <MudForm @ref="form" 
                         @bind-IsValid="@_isFormValid"
                         role="form"
                         aria-label="Modulo di accesso">
                    <MudGrid Spacing="2">
                        <MudItem xs="12">
                            <MudTextField @bind-Value="_loginRequest.Username"
                                          For="@(() => _loginRequest.Username)"
                                          Label="@TranslationService.GetTranslation("auth.username", "Username")"
                                          Variant="Variant.Outlined"
                                          Required="true"
                                          RequiredError="@TranslationService.GetTranslation("auth.usernameRequired", "Username is required")"
                                          Disabled="_isLoading"
                                          autocomplete="username"
                                          InputType="InputType.Text"
                                          aria-describedby="username-help"
                                          Margin="Margin.Dense"
                                          Size="Size.Medium" />
                            <MudText id="username-help" 
                                     Typo="Typo.caption" 
                                     Class="mud-input-helper-text">
                                Inserisci il tuo nome utente
                            </MudText>
                        </MudItem>

                        <MudItem xs="12">
                            <MudTextField @bind-Value="_loginRequest.Password"
                                          For="@(() => _loginRequest.Password)"
                                          Label="@TranslationService.GetTranslation("auth.password", "Password")"
                                          Variant="Variant.Outlined"
                                          InputType="InputType.Password"
                                          Required="true"
                                          RequiredError="@TranslationService.GetTranslation("auth.passwordRequired", "Password is required")"
                                          Disabled="_isLoading"
                                          autocomplete="current-password"
                                          aria-describedby="password-help"
                                          Margin="Margin.Dense"
                                          Size="Size.Medium" />
                            <MudText id="password-help" 
                                     Typo="Typo.caption" 
                                     Class="mud-input-helper-text">
                                Inserisci la tua password
                            </MudText>
                        </MudItem>

                        <MudItem xs="12">
                            <MudCheckBox T="bool" 
                                         @bind-Value="_loginRequest.RememberMe"
                                         Label="@TranslationService.GetTranslation("auth.rememberMe", "Remember me")"
                                         Disabled="_isLoading"
                                         aria-describedby="remember-help" />
                            <MudText id="remember-help" 
                                     Typo="Typo.caption" 
                                     Class="mud-input-helper-text">
                                Mantieni l'accesso per 30 giorni
                            </MudText>
                        </MudItem>

                        <MudItem xs="12">
                            <MudButton ButtonType="ButtonType.Button"
                                       Variant="Variant.Filled"
                                       Color="Color.Primary"
                                       Size="Size.Medium"
                                       FullWidth="true"
                                       OnClick="HandleLogin"
                                       Disabled="@(!_isFormValid || _isLoading)"
                                       aria-label="Accedi al sistema"
                                       Margin="Margin.Dense">
                                @if (_isLoading)
                                {
                                    <MudProgressCircular Class="ms-n1" 
                                                         Size="Size.Small" 
                                                         Indeterminate="true"
                                                         aria-hidden="true" />
                                    <MudText Class="ms-2">@TranslationService.GetTranslation("auth.loginInProgress", "Logging in...")</MudText>
                                }
                                else
                                {
                                    @TranslationService.GetTranslation("auth.login", "Login")
                                }
                            </MudButton>
                        </MudItem>
                    </MudGrid>
                </MudForm>
                
                <MudDivider Class="my-4" />

                <!-- Compact Health Status Section -->
                <MudExpansionPanels Elevation="0">
                    <MudExpansionPanel Text="@TranslationService.GetTranslation("health.serverStatus", "Server Health Status")" Icon="@Icons.Material.Filled.HealthAndSafety">
                @if (_healthStatus != null)
                {
                    <!-- Compact overview - only essential status -->
                    <div class="d-flex flex-column ga-2">
                        <div class="d-flex align-center ga-2">
                            <MudIcon Icon="@GetStatusIcon(_healthStatus.ApiStatus)" Color="@GetStatusColor(_healthStatus.ApiStatus)" Size="Size.Small" />
                            <MudText Typo="Typo.body2"><strong>API:</strong> @_healthStatus.ApiStatus</MudText>
                        </div>
                        <div class="d-flex align-center ga-2">
                            <MudIcon Icon="@GetStatusIcon(_healthStatus.DatabaseStatus)" Color="@GetStatusColor(_healthStatus.DatabaseStatus)" Size="Size.Small" />
                            <MudText Typo="Typo.body2"><strong>DB:</strong> @_healthStatus.DatabaseStatus</MudText>
                        </div>
                        <div class="d-flex align-center ga-2">
                            <MudIcon Icon="@GetStatusIcon(_healthStatus.AuthenticationStatus)" Color="@GetStatusColor(_healthStatus.AuthenticationStatus)" Size="Size.Small" />
                            <MudText Typo="Typo.body2"><strong>Auth:</strong> @_healthStatus.AuthenticationStatus</MudText>
                        </div>
                        <div class="d-flex align-center ga-2">
                            <MudIcon Icon="@Icons.Material.Filled.Schedule" Size="Size.Small" />
                            <MudText Typo="Typo.body2"><strong>Last Check:</strong> @_healthStatus.Timestamp.ToString("HH:mm:ss")</MudText>
                        </div>
                    </div>

                    @* Show detailed information only if there are errors or warnings *@
                    @if (HasHealthIssues())
                    {
                        <MudDivider Class="my-3" />
                        <MudAlert Severity="Severity.Warning" Dense="true">
                            <MudText Typo="Typo.body2">System issues detected. Please contact support if problems persist.</MudText>
                        </MudAlert>
                    }
                }
                else if (_healthError != null)
                {
                    <MudAlert Severity="Severity.Error" Icon="@Icons.Material.Filled.Error" Dense="true">
                        <MudText Typo="Typo.body2"><strong>Health Check Failed:</strong> @_healthError</MudText>
                    </MudAlert>
                }
                else
                {
                    <MudProgressLinear Color="Color.Primary" Indeterminate="true" />
                    <MudText Align="Align.Center" Class="mt-2" Typo="Typo.body2">Loading...</MudText>
                }
                    </MudExpansionPanel>
                </MudExpansionPanels>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private MudForm form = null!;
    private bool _isFormValid;
    private bool _isLoading = false;
    private readonly LoginRequestDto _loginRequest = new();
    private DetailedHealthStatusDto? _healthStatus;
    private string? _healthError;

    protected override async Task OnInitializedAsync()
    {
        // Check if user is already authenticated
        try 
        {
            var isAuthenticated = await AuthService.IsAuthenticatedAsync();
            
            if (isAuthenticated)
            {
                // Check if user is admin and redirect accordingly
                var isAdmin = await AuthService.IsInRoleAsync("Admin");
                NavigationManager.NavigateTo(isAdmin ? "/admin" : "/admin");
                return;
            }
        }
        catch (Exception ex)
        {
            // Log error silently, don't show to user on login page
            Console.Error.WriteLine($"Error checking authentication: {ex.Message}");
        }
        
        await LoadHealthStatus();
    }

    private async Task LoadHealthStatus()
    {
        Console.WriteLine("🏥 LoadHealthStatus method called");
        try
        {
            _healthStatus = await HealthService.GetDetailedHealthAsync();
            if (_healthStatus == null)
            {
                _healthError = "Unable to connect to server or retrieve health status.";
                Console.WriteLine("❌ Health status is null");
            }
            else
            {
                Console.WriteLine($"✅ Health status loaded: {_healthStatus.ApiStatus}");
            }
        }
        catch (Exception ex)
        {
            _healthError = $"Error loading health status: {ex.Message}";
            Console.Error.WriteLine($"❗ Error loading health status: {ex.Message}");
        }
        StateHasChanged();
        Console.WriteLine("🔄 StateHasChanged called after health status load");
    }

    private async Task HandleLogin()
    {
        if (!_isFormValid) return;

        _isLoading = true;
        try
        {
            var result = await AuthService.LoginAsync(_loginRequest);
            if (result != null)
            {
                Snackbar.Add(TranslationService.GetTranslation("auth.loginSuccess", "Login successful!"), Severity.Success);
                
                // Check if user is admin and redirect accordingly
                var isAdmin = await AuthService.IsInRoleAsync("Admin");
                NavigationManager.NavigateTo(isAdmin ? "/admin" : "/admin");
            }
            else
            {
                Snackbar.Add(TranslationService.GetTranslation("auth.loginFailed", "Login failed. Please check your credentials."), Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add(TranslationService.GetTranslation("auth.loginError", "Login error: {0}", ex.Message), Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }

    private string GetStatusIcon(string? status) => status?.ToLower() switch
    {
        "healthy" => Icons.Material.Filled.CheckCircle,
        "degraded" => Icons.Material.Filled.Warning,
        "unhealthy" or "error" => Icons.Material.Filled.Error,
        "enabled" => Icons.Material.Filled.CheckCircle,
        "disabled" => Icons.Material.Filled.DoNotDisturb,
        _ => Icons.Material.Filled.Help
    };

    private Color GetStatusColor(string? status) => status?.ToLower() switch
    {
        "healthy" => Color.Success,
        "degraded" => Color.Warning,
        "unhealthy" or "error" => Color.Error,
        "enabled" => Color.Success,
        "disabled" => Color.Default,
        _ => Color.Default
    };

    private bool HasHealthIssues()
    {
        if (_healthStatus == null) return false;
        
        var statuses = new[] { _healthStatus.ApiStatus, _healthStatus.DatabaseStatus, _healthStatus.AuthenticationStatus };
        return statuses.Any(s => s?.ToLower() == "unhealthy" || s?.ToLower() == "error" || s?.ToLower() == "degraded");
    }

    private string FormatBytes(long bytes)
    {
        const int scale = 1024;
        string[] orders = { "B", "KB", "MB", "GB", "TB" };
        
        long max = (long)Math.Pow(scale, orders.Length - 1);
        foreach (string order in orders)
        {
            if (bytes > max)
                return string.Format("{0:##.##} {1}", decimal.Divide(bytes, max), order);
            max /= scale;
        }
        return "0 B";
    }

    private string FormatUptime(TimeSpan uptime)
    {
        if (uptime.TotalDays >= 1)
            return $"{(int)uptime.TotalDays} days, {uptime.Hours:D2}:{uptime.Minutes:D2}:{uptime.Seconds:D2}";
        else
            return $"{uptime.Hours:D2}:{uptime.Minutes:D2}:{uptime.Seconds:D2}";
    }
}

<style>
    /* Compact login container with 340px max-width */
    .compact-login-container {
        max-width: 340px !important;
    }

    /* Ensure mobile-first responsive behavior */
    @@media (max-width: 339px) {
        .compact-login-container {
            max-width: 100% !important;
            padding: 0 8px;
        }
    }

    /* Reduce spacing for compact design */
    .compact-login-container .mud-input-helper-text {
        margin-top: 2px;
        margin-bottom: 4px;
    }

    /* Compact expansion panel */
    .compact-login-container .mud-expand-panel .mud-expand-panel-header {
        min-height: 36px !important;
        padding: 8px 12px !important;
    }

    .compact-login-container .mud-expand-panel-content {
        padding: 8px 12px !important;
    }
</style>