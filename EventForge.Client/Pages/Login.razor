@page "/login"
@using Microsoft.AspNetCore.Authorization
@attribute [AllowAnonymous]
@inject IAuthService AuthService
@inject IHealthService HealthService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject ITranslationService TranslationService

<PageTitle>@TranslationService.GetTranslation("auth.login", "Login") - EventForge</PageTitle>

<!-- Improved responsive login page with accessibility -->
<MudContainer MaxWidth="MaxWidth.Medium" Class="mt-4 mt-sm-6 mt-md-8">
    <MudGrid Justify="Justify.Center">
        <MudItem xs="12" sm="10" md="8">
            <MudPaper Class="pa-4 pa-sm-6 pa-md-8" Elevation="4" role="main">
                <!-- Login header with semantic structure -->
                <header class="text-center mb-6 mb-md-8">
                    <MudText Typo="Typo.h3" 
                             Component="h1"
                             Align="Align.Center" 
                             Class="mb-4"
                             aria-label="Pagina di accesso EventForge">
                        <MudIcon Icon="Icons.Material.Filled.Login" 
                                 Class="mr-2" 
                                 Size="Size.Large"
                                 aria-hidden="true" />
                        @TranslationService.GetTranslation("auth.login", "EventForge Login")
                    </MudText>
                </header>

                @if (_isLoading)
                {
                    <MudProgressLinear Color="Color.Primary" 
                                       Indeterminate="true" 
                                       Class="mb-4"
                                       aria-label="Accesso in corso" />
                }

                <!-- Login form with improved accessibility -->
                <MudForm @ref="form" 
                         @bind-IsValid="@_isFormValid"
                         role="form"
                         aria-label="Modulo di accesso">
                    <MudGrid Spacing="3">
                        <MudItem xs="12">
                            <MudTextField @bind-Value="_loginRequest.Username"
                                          For="@(() => _loginRequest.Username)"
                                          Label="@TranslationService.GetTranslation("auth.username", "Username")"
                                          Variant="Variant.Outlined"
                                          Required="true"
                                          RequiredError="@TranslationService.GetTranslation("auth.usernameRequired", "Username is required")"
                                          Disabled="_isLoading"
                                          autocomplete="username"
                                          InputType="InputType.Text"
                                          aria-describedby="username-help" />
                            <MudText id="username-help" 
                                     Typo="Typo.caption" 
                                     Class="mud-input-helper-text">
                                Inserisci il tuo nome utente
                            </MudText>
                        </MudItem>

                        <MudItem xs="12">
                            <MudTextField @bind-Value="_loginRequest.Password"
                                          For="@(() => _loginRequest.Password)"
                                          Label="@TranslationService.GetTranslation("auth.password", "Password")"
                                          Variant="Variant.Outlined"
                                          InputType="InputType.Password"
                                          Required="true"
                                          RequiredError="@TranslationService.GetTranslation("auth.passwordRequired", "Password is required")"
                                          Disabled="_isLoading"
                                          autocomplete="current-password"
                                          aria-describedby="password-help" />
                            <MudText id="password-help" 
                                     Typo="Typo.caption" 
                                     Class="mud-input-helper-text">
                                Inserisci la tua password
                            </MudText>
                        </MudItem>

                        <MudItem xs="12">
                            <MudCheckBox T="bool" 
                                         @bind-Value="_loginRequest.RememberMe"
                                         Label="@TranslationService.GetTranslation("auth.rememberMe", "Remember me")"
                                         Disabled="_isLoading"
                                         aria-describedby="remember-help" />
                            <MudText id="remember-help" 
                                     Typo="Typo.caption" 
                                     Class="mud-input-helper-text">
                                Mantieni l'accesso per 30 giorni
                            </MudText>
                        </MudItem>

                        <MudItem xs="12">
                            <MudButton ButtonType="ButtonType.Button"
                                       Variant="Variant.Filled"
                                       Color="Color.Primary"
                                       Size="Size.Large"
                                       FullWidth="true"
                                       OnClick="HandleLogin"
                                       Disabled="@(!_isFormValid || _isLoading)"
                                       aria-label="Accedi al sistema">
                                @if (_isLoading)
                                {
                                    <MudProgressCircular Class="ms-n1" 
                                                         Size="Size.Small" 
                                                         Indeterminate="true"
                                                         aria-hidden="true" />
                                    <MudText Class="ms-2">@TranslationService.GetTranslation("auth.loginInProgress", "Logging in...")</MudText>
                                }
                                else
                                {
                                    @TranslationService.GetTranslation("auth.login", "Login")
                                }
                            </MudButton>
                        </MudItem>
                    </MudGrid>
                </MudForm>
                
                <MudDivider Class="my-6" />

                <!-- Health Status Section -->
                <MudExpansionPanels Elevation="0">
                    <MudExpansionPanel Text="@TranslationService.GetTranslation("health.serverStatus", "Server Health Status")" Icon="@Icons.Material.Filled.HealthAndSafety">
                @if (_healthStatus != null)
                {
                    <MudGrid>
                        <MudItem xs="12" md="6">
                            <MudCard Elevation="2" Class="pa-4">
                                <MudCardHeader>
                                    <CardHeaderContent>
                                        <MudText Typo="Typo.h6">@TranslationService.GetTranslation("health.systemOverview", "System Overview")</MudText>
                                    </CardHeaderContent>
                                </MudCardHeader>
                                <MudCardContent>
                                    <div class="d-flex flex-column ga-2">
                                        <div class="d-flex align-center ga-2">
                                            <MudIcon Icon="@GetStatusIcon(_healthStatus.ApiStatus)" Color="@GetStatusColor(_healthStatus.ApiStatus)" />
                                            <MudText><strong>@TranslationService.GetTranslation("health.apiStatus", "API Status"):</strong> @_healthStatus.ApiStatus</MudText>
                                        </div>
                                        <div class="d-flex align-center ga-2">
                                            <MudIcon Icon="@GetStatusIcon(_healthStatus.DatabaseStatus)" Color="@GetStatusColor(_healthStatus.DatabaseStatus)" />
                                            <MudText><strong>@TranslationService.GetTranslation("health.database", "Database"):</strong> @_healthStatus.DatabaseStatus</MudText>
                                        </div>
                                        <div class="d-flex align-center ga-2">
                                            <MudIcon Icon="@GetStatusIcon(_healthStatus.AuthenticationStatus)" Color="@GetStatusColor(_healthStatus.AuthenticationStatus)" />
                                            <MudText><strong>@TranslationService.GetTranslation("health.authentication", "Authentication"):</strong> @_healthStatus.AuthenticationStatus</MudText>
                                        </div>
                                        <div class="d-flex align-center ga-2">
                                            <MudIcon Icon="@Icons.Material.Filled.Schedule" />
                                            <MudText><strong>@TranslationService.GetTranslation("health.lastCheck", "Last Check"):</strong> @_healthStatus.Timestamp.ToString("yyyy-MM-dd HH:mm:ss") UTC</MudText>
                                        </div>
                                        <div class="d-flex align-center ga-2">
                                            <MudIcon Icon="@Icons.Material.Filled.Info" />
                                            <MudText><strong>@TranslationService.GetTranslation("common.version", "Version"):</strong> @_healthStatus.Version</MudText>
                                        </div>
                                    </div>
                                </MudCardContent>
                            </MudCard>
                        </MudItem>

                        <MudItem xs="12" md="6">
                            <MudCard Elevation="2" Class="pa-4">
                                <MudCardHeader>
                                    <CardHeaderContent>
                                        <MudText Typo="Typo.h6">@TranslationService.GetTranslation("health.systemDetails", "System Details")</MudText>
                                    </CardHeaderContent>
                                </MudCardHeader>
                                <MudCardContent>
                                    <div class="d-flex flex-column ga-2">
                                        <div class="d-flex align-center ga-2">
                                            <MudIcon Icon="@Icons.Material.Filled.Computer" />
                                            <MudText><strong>@TranslationService.GetTranslation("health.environment", "Environment"):</strong> @_healthStatus.Environment</MudText>
                                        </div>
                                        <div class="d-flex align-center ga-2">
                                            <MudIcon Icon="@Icons.Material.Filled.Storage" />
                                            <MudText><strong>@TranslationService.GetTranslation("health.machine", "Machine"):</strong> @_healthStatus.MachineName</MudText>
                                        </div>
                                        <div class="d-flex align-center ga-2">
                                            <MudIcon Icon="@Icons.Material.Filled.Memory" />
                                            <MudText><strong>@TranslationService.GetTranslation("health.processId", "Process ID"):</strong> @_healthStatus.ProcessId</MudText>
                                        </div>
                                        <div class="d-flex align-center ga-2">
                                            <MudIcon Icon="@Icons.Material.Filled.Memory" />
                                            <MudText><strong>@TranslationService.GetTranslation("health.memoryUsage", "Memory Usage"):</strong> @FormatBytes(_healthStatus.WorkingSet)</MudText>
                                        </div>
                                        <div class="d-flex align-center ga-2">
                                            <MudIcon Icon="@Icons.Material.Filled.AccessTime" />
                                            <MudText><strong>@TranslationService.GetTranslation("health.uptime", "Uptime"):</strong> @FormatUptime(_healthStatus.Uptime)</MudText>
                                        </div>
                                    </div>
                                </MudCardContent>
                            </MudCard>
                        </MudItem>

                        @if (_healthStatus.Dependencies?.Any() == true)
                        {
                            <MudItem xs="12">
                                <MudCard Elevation="2" Class="pa-4">
                                    <MudCardHeader>
                                        <CardHeaderContent>
                                            <MudText Typo="Typo.h6">@TranslationService.GetTranslation("health.dependencies", "Dependencies")</MudText>
                                        </CardHeaderContent>
                                    </MudCardHeader>
                                    <MudCardContent>
                                        <div class="d-flex flex-column ga-2">
                                            @foreach (var dep in _healthStatus.Dependencies)
                                            {
                                                <div class="d-flex align-center ga-2">
                                                    <MudIcon Icon="@GetStatusIcon(dep.Value)" Color="@GetStatusColor(dep.Value)" />
                                                    <MudText><strong>@dep.Key:</strong> @dep.Value</MudText>
                                                </div>
                                            }
                                        </div>
                                    </MudCardContent>
                                </MudCard>
                            </MudItem>
                        }

                        @if (_healthStatus.AppliedMigrations?.Any() == true)
                        {
                            <MudItem xs="12">
                                <MudCard Elevation="2" Class="pa-4">
                                    <MudCardHeader>
                                        <CardHeaderContent>
                                            <MudText Typo="Typo.h6">@TranslationService.GetTranslation("health.appliedMigrations", "Applied Migrations") (@_healthStatus.AppliedMigrations.Count())</MudText>
                                        </CardHeaderContent>
                                    </MudCardHeader>
                                    <MudCardContent>
                                        <div class="d-flex flex-wrap ga-1">
                                            @foreach (var migration in _healthStatus.AppliedMigrations.Take(10))
                                            {
                                                <MudChip T="string" Color="Color.Info" Size="Size.Small">@migration</MudChip>
                                            }
                                            @if (_healthStatus.AppliedMigrations.Count() > 10)
                                            {
                                                <MudChip T="string" Color="Color.Default" Size="Size.Small">... @TranslationService.GetTranslation("health.andMore", "and {0} more", _healthStatus.AppliedMigrations.Count() - 10)</MudChip>
                                            }
                                        </div>
                                    </MudCardContent>
                                </MudCard>
                            </MudItem>
                        }
                    </MudGrid>
                }
                else if (_healthError != null)
                {
                    <MudAlert Severity="Severity.Error" Icon="@Icons.Material.Filled.Error">
                        <MudText><strong>@TranslationService.GetTranslation("health.checkFailed", "Health Check Failed"):</strong> @_healthError</MudText>
                    </MudAlert>
                }
                else
                {
                    <MudProgressLinear Color="Color.Primary" Indeterminate="true" />
                    <MudText Align="Align.Center" Class="mt-2">@TranslationService.GetTranslation("health.loadingStatus", "Loading health status...")</MudText>
                }
                    </MudExpansionPanel>
                </MudExpansionPanels>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private MudForm form = null!;
    private bool _isFormValid;
    private bool _isLoading = false;
    private readonly LoginRequestDto _loginRequest = new();
    private DetailedHealthStatusDto? _healthStatus;
    private string? _healthError;

    protected override async Task OnInitializedAsync()
    {
        // Check if user is already authenticated
        try 
        {
            var isAuthenticated = await AuthService.IsAuthenticatedAsync();
            
            if (isAuthenticated)
            {
                // Check if user is admin and redirect accordingly
                var isAdmin = await AuthService.IsInRoleAsync("Admin");
                NavigationManager.NavigateTo(isAdmin ? "/admin" : "/admin");
                return;
            }
        }
        catch (Exception ex)
        {
            // Log error silently, don't show to user on login page
            Console.Error.WriteLine($"Error checking authentication: {ex.Message}");
        }
        
        await LoadHealthStatus();
    }

    private async Task LoadHealthStatus()
    {
        Console.WriteLine("🏥 LoadHealthStatus method called");
        try
        {
            _healthStatus = await HealthService.GetDetailedHealthAsync();
            if (_healthStatus == null)
            {
                _healthError = "Unable to connect to server or retrieve health status.";
                Console.WriteLine("❌ Health status is null");
            }
            else
            {
                Console.WriteLine($"✅ Health status loaded: {_healthStatus.ApiStatus}");
            }
        }
        catch (Exception ex)
        {
            _healthError = $"Error loading health status: {ex.Message}";
            Console.Error.WriteLine($"❗ Error loading health status: {ex.Message}");
        }
        StateHasChanged();
        Console.WriteLine("🔄 StateHasChanged called after health status load");
    }

    private async Task HandleLogin()
    {
        if (!_isFormValid) return;

        _isLoading = true;
        try
        {
            var result = await AuthService.LoginAsync(_loginRequest);
            if (result != null)
            {
                Snackbar.Add(TranslationService.GetTranslation("auth.loginSuccess", "Login successful!"), Severity.Success);
                
                // Check if user is admin and redirect accordingly
                var isAdmin = await AuthService.IsInRoleAsync("Admin");
                NavigationManager.NavigateTo(isAdmin ? "/admin" : "/admin");
            }
            else
            {
                Snackbar.Add(TranslationService.GetTranslation("auth.loginFailed", "Login failed. Please check your credentials."), Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add(TranslationService.GetTranslation("auth.loginError", "Login error: {0}", ex.Message), Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }

    private string GetStatusIcon(string? status) => status?.ToLower() switch
    {
        "healthy" => Icons.Material.Filled.CheckCircle,
        "degraded" => Icons.Material.Filled.Warning,
        "unhealthy" or "error" => Icons.Material.Filled.Error,
        "enabled" => Icons.Material.Filled.CheckCircle,
        "disabled" => Icons.Material.Filled.DoNotDisturb,
        _ => Icons.Material.Filled.Help
    };

    private Color GetStatusColor(string? status) => status?.ToLower() switch
    {
        "healthy" => Color.Success,
        "degraded" => Color.Warning,
        "unhealthy" or "error" => Color.Error,
        "enabled" => Color.Success,
        "disabled" => Color.Default,
        _ => Color.Default
    };

    private string FormatBytes(long bytes)
    {
        const int scale = 1024;
        string[] orders = { "B", "KB", "MB", "GB", "TB" };
        
        long max = (long)Math.Pow(scale, orders.Length - 1);
        foreach (string order in orders)
        {
            if (bytes > max)
                return string.Format("{0:##.##} {1}", decimal.Divide(bytes, max), order);
            max /= scale;
        }
        return "0 B";
    }

    private string FormatUptime(TimeSpan uptime)
    {
        if (uptime.TotalDays >= 1)
            return $"{(int)uptime.TotalDays} days, {uptime.Hours:D2}:{uptime.Minutes:D2}:{uptime.Seconds:D2}";
        else
            return $"{uptime.Hours:D2}:{uptime.Minutes:D2}:{uptime.Seconds:D2}";
    }
}