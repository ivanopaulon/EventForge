@page "/login"
@layout LoginLayout
@using Microsoft.AspNetCore.Authorization
@using EventForge.DTOs.Tenants
@attribute [AllowAnonymous]
@inject IAuthService AuthService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject ITranslationService TranslationService

<PageTitle>@TranslationService.GetTranslation("auth.login", "Login") - EventForge</PageTitle>

<MudContainer Fixed>
    <MudPaper Class="login-paper" Elevation="1" role="main">
        <MudStack Row>
            <MudImage Src="/eventforge.ico" Width="32" Height="32"></MudImage>
            <MudText Typo="Typo.h5"
                     Align="Align.Center"
                     Class="mb-3">
                @TranslationService.GetTranslation("auth.login", "EventForge Login")
            </MudText>
        </MudStack>

        @if (_isLoading)
        {
            <MudProgressLinear Color="Color.Primary"
                               Indeterminate="true"
                               Class="mb-3"
                               aria-label="Accesso in corso" />
        }

        <!-- Compact login form with improved accessibility -->
        <MudForm @ref="form"
                 @bind-IsValid="@_isFormValid"
                 role="form"
                 aria-label="Modulo di accesso">
            <MudGrid Spacing="2">
                <!-- Tenant selector -->
                <MudItem xs="12">
                    @if (_isLoadingTenants)
                    {
                        <MudSkeleton Height="40px" />
                    }
                    else if (_tenants?.Any() == true)
                    {
                        <MudSelect T="string"
                                   @bind-Value="_selectedTenantId"
                                   Label="@TranslationService.GetTranslation("auth.selectTenant", "Seleziona Tenant")"
                                   Variant="Variant.Outlined"
                                   Required="true"
                                   RequiredError="@TranslationService.GetTranslation("auth.tenantRequired", "Seleziona un tenant")"
                                   Disabled="_isLoading"
                                   Dense="true"
                                   Placeholder="@TranslationService.GetTranslation("auth.selectTenantPlaceholder", "Scegli tenant...")"
                                   For="@(() => _selectedTenantId)">
                            @foreach (var t in _tenants)
                            {
                                <MudSelectItem Value="@t.Id.ToString()">@($"{t.DisplayName} ({t.Name})")</MudSelectItem>
                            }
                        </MudSelect>
                        <MudText id="tenant-help" Typo="Typo.caption" Class="mud-input-helper-text">
                            @TranslationService.GetTranslation("auth.selectTenantHelp", "Seleziona il tenant su cui vuoi autenticarti.")
                        </MudText>
                    }
                    else
                    {
                        <MudAlert Severity="Severity.Info">
                            @TranslationService.GetTranslation("auth.noTenants", "Nessun tenant disponibile. Contatta l'amministratore.")
                        </MudAlert>
                    }
                </MudItem>

                <MudItem xs="12">
                    <MudTextField @bind-Value="_loginRequest.Username"
                                  For="@(() => _loginRequest.Username)"
                                  Label="@TranslationService.GetTranslation("auth.username", "Username")"
                                  Variant="Variant.Outlined"
                                  Required="true"
                                  RequiredError="@TranslationService.GetTranslation("auth.usernameRequired", "Username is required")"
                                  Disabled="_isLoading"
                                  autocomplete="username"
                                  InputType="InputType.Text"
                                  aria-describedby="username-help"
                                  Margin="Margin.Dense"
                                  Size="Size.Medium" />
                    <MudText id="username-help"
                             Typo="Typo.caption"
                             Class="mud-input-helper-text">
                        Inserisci il tuo nome utente
                    </MudText>
                </MudItem>

                <MudItem xs="12">
                    <MudTextField @bind-Value="_loginRequest.Password"
                                  For="@(() => _loginRequest.Password)"
                                  Label="@TranslationService.GetTranslation("auth.password", "Password")"
                                  Variant="Variant.Outlined"
                                  InputType="InputType.Password"
                                  Required="true"
                                  RequiredError="@TranslationService.GetTranslation("auth.passwordRequired", "Password is required")"
                                  Disabled="_isLoading"
                                  autocomplete="current-password"
                                  aria-describedby="password-help"
                                  Margin="Margin.Dense"
                                  Size="Size.Medium" />
                    <MudText id="password-help"
                             Typo="Typo.caption"
                             Class="mud-input-helper-text">
                        Inserisci la tua password
                    </MudText>
                </MudItem>

                <MudItem xs="12">
                    <MudCheckBox T="bool"
                                 @bind-Value="_loginRequest.RememberMe"
                                 Label="@TranslationService.GetTranslation("auth.rememberMe", "Remember me")"
                                 Disabled="_isLoading"
                                 aria-describedby="remember-help" />
                    <MudText id="remember-help"
                             Typo="Typo.caption"
                             Class="mud-input-helper-text">
                        Mantieni l'accesso per 30 giorni
                    </MudText>
                </MudItem>

                <MudItem xs="12">
                    <MudButton ButtonType="ButtonType.Button"
                               Variant="Variant.Filled"
                               Color="Color.Primary"
                               Size="Size.Medium"
                               FullWidth="true"
                               OnClick="HandleLogin"
                               Disabled="@(!_isFormValid || _isLoading)"
                               aria-label="Accedi al sistema"
                               Margin="Margin.Dense">
                        @if (_isLoading)
                        {
                            <MudProgressCircular Class="ms-n1"
                                                 Size="Size.Small"
                                                 Indeterminate="true"
                                                 aria-hidden="true" />
                            <MudText Class="ms-2">@TranslationService.GetTranslation("auth.loginInProgress", "Logging in...")</MudText>
                        }
                        else
                        {
                            @TranslationService.GetTranslation("auth.login", "Login")
                        }
                    </MudButton>
                </MudItem>
            </MudGrid>
        </MudForm>
    </MudPaper>
</MudContainer>
@code {
    private MudForm form = null!;
    private bool _isFormValid;
    private bool _isLoading = false;
    private bool _isLoadingTenants = true;
    private readonly LoginRequestDto _loginRequest = new();
    private List<TenantResponseDto> _tenants = new();
    private string? _selectedTenantId;

    protected override async Task OnInitializedAsync()
    {
        // Load available tenants for selection (call should be lightweight, cached by browser/service if needed)
        await LoadTenantsAsync();

        // Check if already authenticated (kept as before)
        try 
        {
            var isAuthenticated = await AuthService.IsAuthenticatedAsync();
            if (isAuthenticated)
            {
                var isAdmin = await AuthService.IsInRoleAsync("Admin");
                NavigationManager.NavigateTo(isAdmin ? "/admin" : "/admin");
                return;
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error checking authentication: {ex.Message}");
        }
    }

    private async Task LoadTenantsAsync()
    {
        try
        {
            _isLoadingTenants = true;
            // AuthService should expose a lightweight call returning public/active tenants for login.
            // If your IAuthService has a different method name adapt it here (e.g. GetPublicTenantsAsync or GetLoginTenantsAsync).
            _tenants = (await AuthService.GetAvailableTenantsAsync()).ToList();

            // Auto-select first tenant if none chosen
            if (_tenants.Any())
            {
                _selectedTenantId ??= _tenants.First().Id.ToString();
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add(TranslationService.GetTranslation("auth.tenantsLoadError", "Errore nel caricamento dei tenant: {0}", ex.Message), Severity.Error);
            _tenants = new List<TenantResponseDto>();
        }
        finally
        {
            _isLoadingTenants = false;
            StateHasChanged();
        }
    }

    private async Task HandleLogin()
    {
        // Ensure form validation runs
        await form.Validate();
        if (!_isFormValid) return;

        // Ensure tenant selected
        if (string.IsNullOrWhiteSpace(_selectedTenantId))
        {
            Snackbar.Add(TranslationService.GetTranslation("auth.tenantRequired", "Seleziona un tenant"), Severity.Warning);
            return;
        }

        // Set tenant code on request (server expects tenant identifier or code; server should handle GUID or code parsing)
        _loginRequest.TenantCode = _selectedTenantId;

        _isLoading = true;
        try
        {
            var result = await AuthService.LoginAsync(_loginRequest);
            if (result != null)
            {
                Snackbar.Add(TranslationService.GetTranslation("auth.loginSuccess", "Login successful!"), Severity.Success);

                var isAdmin = await AuthService.IsInRoleAsync("Admin");
                NavigationManager.NavigateTo(isAdmin ? "/admin" : "/admin");
            }
            else
            {
                Snackbar.Add(TranslationService.GetTranslation("auth.loginFailed", "Login failed. Please check your credentials."), Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add(TranslationService.GetTranslation("auth.loginError", "Login error: {0}", ex.Message), Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }
}

<style>
    /* Mapanel_ke background occupy full area inside layout (main is already 100vh and overflow hidden) */
    .compact-login-container {
        background: url('/login_background.jpg') content-box no-repeat;
        background-size: cover;
        max-width: 100vw;
        max-height: 100vh;
        position: absolute !important;
        align-items: center !important;
        justify-content: center !important;
        opacity: 95% !important;
        z-index: 2 !important;
    }

    .login-paper {
        width: 370px !important;
        background-color: antiquewhite !important;
        border-radius: 5px !important;
        margin: auto !important;
        justify-content: center !important;
        padding: 10px;
        elevation: higher;
    }

    /* favicon in header */
    .login-favicon {
        width: 36px;
        height: 36px;
        object-fit: contain;
        margin-right: 12px;
        filter: drop-shadow(0 2px 4px rgba(0,0,0,0.3));
    }

    /* Responsive: allow vertical scrolling on small screens */
    @@media (max-width: 767px) {
        .login-container-centered {
            min-height: auto;
            background-attachment: scroll;
            padding: 12px 8px 72px 8px; /* leave space for fixed footer */
        }

        .login-favicon { width: 28px; height: 28px; margin-right: 8px; }
    }
</style>