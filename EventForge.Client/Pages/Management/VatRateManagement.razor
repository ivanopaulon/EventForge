@page "/financial/vat-rates"
@using Microsoft.AspNetCore.Authorization
@using EventForge.DTOs.VatRates
@using EventForge.DTOs.Common
@using EventForge.Client.Shared.Components
@attribute [Authorize]
@inject IAuthService AuthService
@inject IFinancialService FinancialService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject ITranslationService TranslationService
@inject ILogger<VatRateManagement> Logger

<MudContainer MaxWidth="MaxWidth.False" Class="mt-4">
    @if (_isLoading)
    {
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
    }
    else
    {
        <MudPaper Elevation="2" Class="pa-4 mb-4">
            <div class="d-flex justify-space-between align-center mb-4">
                <div>
                    <MudText Typo="Typo.h4">
                        <MudIcon Icon="@Icons.Material.Outlined.Percent" Class="mr-2" />
                        @TranslationService.GetTranslation("financial.vatRateManagement", "Gestione Aliquote IVA")
                    </MudText>
                    <MudText Typo="Typo.body2" Class="mud-text-secondary mt-2">
                        @TranslationService.GetTranslation("financial.vatRateManagementDescription", "Gestisci le aliquote IVA per la tua organizzazione")
                    </MudText>
                </div>
            </div>

            <!-- Filters Section -->
            <MudPaper Elevation="0" Class="pa-3 mb-4" Style="background-color: var(--mud-palette-background-grey);">
                <div class="d-flex gap-4 align-center flex-wrap">
                    <MudTextField @bind-Value="_searchTerm"
                                  @bind-Value:after="OnSearchChanged"
                                  Label="@TranslationService.GetTranslation("financial.searchVatRates", "Cerca aliquote IVA")"
                                  Placeholder="@TranslationService.GetTranslation("financial.searchPlaceholder", "Inserisci nome...")"
                                  Variant="Variant.Outlined"
                                  Adornment="Adornment.End"
                                  AdornmentIcon="@Icons.Material.Outlined.Search"
                                  Clearable="true"
                                  Style="flex: 2;" />
                    <MudSelect T="string" @bind-Value="_statusFilter" @bind-Value:after="OnStatusFilterChanged" 
                               Label="@TranslationService.GetTranslation("field.status", "Stato")" 
                               Placeholder="@TranslationService.GetTranslation("financial.selectStatus", "Seleziona stato...")"
                               Variant="Variant.Outlined"
                               Clearable="true"
                               Style="flex: 1;">
                        <MudSelectItem Value="@("all")">@TranslationService.GetTranslation("common.selectAll", "Tutti")</MudSelectItem>
                        <MudSelectItem Value="@("active")">@TranslationService.GetTranslation("field.active", "Attivo")</MudSelectItem>
                        <MudSelectItem Value="@("suspended")">@TranslationService.GetTranslation("field.suspended", "Sospeso")</MudSelectItem>
                        <MudSelectItem Value="@("deleted")">@TranslationService.GetTranslation("field.deleted", "Eliminato")</MudSelectItem>
                    </MudSelect>
                </div>
            </MudPaper>

            <!-- VAT Rates Data Table -->
            <MudPaper Elevation="1" Class="border-rounded">
                <MudCardHeader Class="pa-2">
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">
                            <MudIcon Icon="@Icons.Material.Outlined.List" Class="mr-2" />
                            @TranslationService.GetTranslation("financial.vatRateList", "Lista Aliquote IVA")
                            <MudText Typo="Typo.body2" Class="mud-text-secondary ml-2">
                                (@_filteredVatRates.Count() @TranslationService.GetTranslation("financial.itemsFound", "elementi trovati"))
                            </MudText>
                        </MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        <ActionButtonGroup Mode="ActionButtonGroupMode.Toolbar"
                                           ShowRefresh="true"
                                           ShowExport="false" 
                                           ShowCreate="true"
                                           ShowAuditLog="false"
                                           CreateIcon="@Icons.Material.Outlined.Add"
                                           CreateTooltip="@TranslationService.GetTranslation("financial.createNewVatRate", "Crea nuova aliquota IVA")"
                                           IsDisabled="_isLoadingVatRates"
                                           OnRefresh="@LoadVatRatesAsync"
                                           OnCreate="@OpenCreateVatRateDrawer" />
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardContent Class="pa-1">
                    @if (_isLoadingVatRates)
                    {
                        <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="mt-4" />
                    }
                    else
                    {
                        <MudTable T="VatRateDto" 
                                  Items="_filteredVatRates" 
                                  Hover="true" 
                                  Striped="true"
                                  Loading="_isLoadingVatRates"
                                  LoadingProgressColor="Color.Info"
                                  SortLabel="@TranslationService.GetTranslation("tooltip.sortColumn", "Ordina colonna")"
                                  AllowUnsorted="false"
                                  Dense="true"
                                  Breakpoint="Breakpoint.Sm">
                            <HeaderContent>
                                <MudTh><MudTableSortLabel SortBy="@(new Func<VatRateDto, object>(x => x.Name))">@TranslationService.GetTranslation("field.name", "Nome")</MudTableSortLabel></MudTh>
                                <MudTh><MudTableSortLabel SortBy="@(new Func<VatRateDto, object>(x => x.Percentage))">@TranslationService.GetTranslation("field.percentage", "Percentuale")</MudTableSortLabel></MudTh>
                                <MudTh><MudTableSortLabel SortBy="@(new Func<VatRateDto, object>(x => x.Status))">@TranslationService.GetTranslation("field.status", "Stato")</MudTableSortLabel></MudTh>
                                <MudTh><MudTableSortLabel SortBy="@(new Func<VatRateDto, object>(x => x.ValidFrom ?? DateTime.MinValue))">@TranslationService.GetTranslation("field.validFrom", "Valido Da")</MudTableSortLabel></MudTh>
                                <MudTh><MudTableSortLabel SortBy="@(new Func<VatRateDto, object>(x => x.ValidTo ?? DateTime.MaxValue))">@TranslationService.GetTranslation("field.validTo", "Valido A")</MudTableSortLabel></MudTh>
                                <MudTh><MudTableSortLabel InitialDirection="SortDirection.Descending" SortBy="@(new Func<VatRateDto, object>(x => x.CreatedAt))">@TranslationService.GetTranslation("field.createdAt", "Creato il")</MudTableSortLabel></MudTh>
                                <MudTh Class="text-center" Style="min-width: 120px;">@TranslationService.GetTranslation("common.actions", "Azioni")</MudTh>
                            </HeaderContent>

                            <RowTemplate>
                                <MudTd DataLabel="@TranslationService.GetTranslation("field.name", "Nome")">
                                    <div class="d-flex align-center">
                                        <MudAvatar Color="Color.Primary" Size="Size.Small" Class="mr-2">
                                            <MudIcon Icon="@Icons.Material.Outlined.Percent" />
                                        </MudAvatar>
                                        <div>
                                            <MudText Typo="Typo.body2">@context.Name</MudText>
                                            <MudText Typo="Typo.caption" Class="mud-text-secondary">ID: @context.Id.ToString().Substring(0, 8)...</MudText>
                                        </div>
                                    </div>
                                </MudTd>
                                <MudTd DataLabel="@TranslationService.GetTranslation("field.percentage", "Percentuale")">
                                    <MudChip T="string" Size="Size.Small" Color="Color.Info">@($"{context.Percentage}%")</MudChip>
                                </MudTd>
                                <MudTd DataLabel="@TranslationService.GetTranslation("field.status", "Stato")">
                                    <MudChip T="string" Color="@GetStatusColor(context.Status)" 
                                             Size="Size.Small"
                                             Icon="@GetStatusIcon(context.Status)">
                                        @GetStatusText(context.Status)
                                    </MudChip>
                                </MudTd>
                                <MudTd DataLabel="@TranslationService.GetTranslation("field.validFrom", "Valido Da")">
                                    <MudText Typo="Typo.body2">@(context.ValidFrom?.ToString("dd/MM/yyyy") ?? "-")</MudText>
                                </MudTd>
                                <MudTd DataLabel="@TranslationService.GetTranslation("field.validTo", "Valido A")">
                                    <MudText Typo="Typo.body2">@(context.ValidTo?.ToString("dd/MM/yyyy") ?? "-")</MudText>
                                </MudTd>
                                <MudTd DataLabel="@TranslationService.GetTranslation("field.createdAt", "Creato il")">
                                    <MudText Typo="Typo.body2">@context.CreatedAt.ToString("dd/MM/yyyy HH:mm")</MudText>
                                </MudTd>
                                <MudTd DataLabel="@TranslationService.GetTranslation("common.actions", "Azioni")" Class="text-center">
                                    <ActionButtonGroup EntityName="@context.Name"
                                                      ItemDisplayName="@context.Name"
                                                      ShowView="true"
                                                      ShowEdit="true"
                                                      ShowAuditLog="false"
                                                      ShowToggleStatus="false"
                                                      ShowDelete="true"
                                                      OnView="@(() => ViewVatRate(context))"
                                                      OnEdit="@(() => EditVatRate(context))"
                                                      OnDelete="@(() => DeleteVatRate(context))" />
                                </MudTd>
                            </RowTemplate>

                            <NoRecordsContent>
                                <div class="text-center pa-2 pa-sm-3 pa-md-4">
                                    <MudIcon Icon="@Icons.Material.Outlined.Percent" Size="Size.Medium" Class="mb-4 mud-text-secondary" />
                                    <MudText Typo="Typo.h6" Class="mb-2">
                                        @(_vatRates.Any() ? 
                                            TranslationService.GetTranslation("financial.noVatRatesMatchFilters", "Nessuna aliquota IVA corrisponde ai filtri applicati") : 
                                            TranslationService.GetTranslation("financial.noVatRatesFound", "Nessuna aliquota IVA trovata"))
                                    </MudText>
                                    @if (_vatRates.Any())
                                    {
                                        <MudButton Variant="Variant.Text" 
                                                   Color="Color.Primary" 
                                                   StartIcon="@Icons.Material.Outlined.Clear"
                                                   OnClick="@ClearFilters">
                                            @TranslationService.GetTranslation("financial.clearFilters", "Cancella filtri")
                                        </MudButton>
                                    }
                                </div>
                            </NoRecordsContent>
                        </MudTable>
                    }
                </MudCardContent>
            </MudPaper>
        </MudPaper>
    }
</MudContainer>

<!-- VAT Rate Management Drawer -->
<VatRateDrawer @bind-IsOpen="_vatRateDrawerOpen" 
               @bind-Mode="_vatRateDrawerMode"
               OriginalVatRate="_selectedVatRate"
               AllowEdit="true"
               OnVatRateCreated="@OnVatRateCreated"
               OnVatRateUpdated="@OnVatRateUpdated" />

@code {
    // UI State Management
    private bool _isLoading = true;
    private bool _isLoadingVatRates = false;
    private bool _vatRateDrawerOpen = false;
    
    // Drawer management
    private EntityDrawerMode _vatRateDrawerMode = EntityDrawerMode.Create;
    private VatRateDto? _selectedVatRate;
    
    // Filter and search state
    private string _searchTerm = string.Empty;
    private string _statusFilter = "all";
    
    // Data collections
    private List<VatRateDto> _vatRates = new();

    /// <summary>
    /// Computed property for filtered VAT rates based on search criteria.
    /// </summary>
    private IEnumerable<VatRateDto> _filteredVatRates => 
        _vatRates.Where(v => 
            // Search filter: check name
            (string.IsNullOrEmpty(_searchTerm) || 
             v.Name.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase)) &&
            // Status filter
            (_statusFilter == "all" || 
             (_statusFilter == "active" && v.Status == VatRateStatus.Active) ||
             (_statusFilter == "suspended" && v.Status == VatRateStatus.Suspended) ||
             (_statusFilter == "deleted" && v.Status == VatRateStatus.Deleted)));

    /// <summary>
    /// Component initialization.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Check authentication
            var isAuthenticated = await AuthService.IsAuthenticatedAsync();
            if (!isAuthenticated)
            {
                NavigationManager.NavigateTo("/login");
                return;
            }

            // Load VAT rates
            await LoadVatRatesAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add(TranslationService.GetTranslation("financial.loadingPageError", "Errore nel caricamento della pagina: {0}", ex.Message), Severity.Error);
            Logger.LogError(ex, "Error loading VAT rates page");
        }
        finally
        {
            _isLoading = false;
        }
    }

    /// <summary>
    /// Loads VAT rate data.
    /// </summary>
    private async Task LoadVatRatesAsync()
    {
        try
        {
            _isLoadingVatRates = true;
            var result = await FinancialService.GetVatRatesAsync();
            _vatRates = result.ToList();
        }
        catch (Exception ex)
        {
            Snackbar.Add(TranslationService.GetTranslation("financial.loadingVatRatesError", "Errore nel caricamento delle aliquote IVA: {0}", ex.Message), Severity.Error);
            Logger.LogError(ex, "Error loading VAT rates");
        }
        finally
        {
            _isLoadingVatRates = false;
        }
    }

    /// <summary>
    /// Clears all active filters.
    /// </summary>
    private async Task ClearFilters()
    {
        _searchTerm = string.Empty;
        _statusFilter = "all";
        await Task.CompletedTask;
        StateHasChanged();
    }

    private async Task OnSearchChanged()
    {
        await Task.Delay(300); // Debounce
        StateHasChanged();
    }

    private async Task OnStatusFilterChanged()
    {
        await Task.CompletedTask;
        StateHasChanged();
    }

    private async Task OpenCreateVatRateDrawer()
    {
        _vatRateDrawerMode = EntityDrawerMode.Create;
        _selectedVatRate = null;
        _vatRateDrawerOpen = true;
        await Task.CompletedTask;
    }

    private async Task OnVatRateCreated(VatRateDto newVatRate)
    {
        _vatRates.Add(newVatRate);
        StateHasChanged();
        await Task.CompletedTask;
    }

    private async Task OnVatRateUpdated(VatRateDto updatedVatRate)
    {
        var index = _vatRates.FindIndex(v => v.Id == updatedVatRate.Id);
        if (index >= 0)
        {
            _vatRates[index] = updatedVatRate;
        }
        StateHasChanged();
        await Task.CompletedTask;
    }

    private async Task ViewVatRate(VatRateDto vatRate)
    {
        _vatRateDrawerMode = EntityDrawerMode.View;
        _selectedVatRate = vatRate;
        _vatRateDrawerOpen = true;
        await Task.CompletedTask;
    }

    private async Task EditVatRate(VatRateDto vatRate)
    {
        _vatRateDrawerMode = EntityDrawerMode.Edit;
        _selectedVatRate = vatRate;
        _vatRateDrawerOpen = true;
        await Task.CompletedTask;
    }

    private async Task DeleteVatRate(VatRateDto vatRate)
    {
        var confirmTitle = TranslationService.GetTranslation("common.confirm", "Conferma");
        var confirmMessage = TranslationService.GetTranslation("financial.confirmVatRateDelete", 
            "Sei sicuro di voler eliminare l'aliquota IVA '{0}'? Questa azione non può essere annullata.", 
            vatRate.Name);

        var confirm = await DialogService.ShowMessageBox(
            confirmTitle,
            confirmMessage,
            yesText: TranslationService.GetTranslation("common.delete", "Elimina"),
            cancelText: TranslationService.GetTranslation("common.cancel", "Annulla"));

        if (confirm == true)
        {
            try
            {
                await FinancialService.DeleteVatRateAsync(vatRate.Id);
                _vatRates.Remove(vatRate);
                Snackbar.Add(TranslationService.GetTranslation("financial.vatRateDeleted", "Aliquota IVA eliminata con successo!"), Severity.Success);
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Snackbar.Add(TranslationService.GetTranslation("financial.deleteVatRateError", 
                    "Errore nell'eliminazione dell'aliquota IVA: {0}", ex.Message), Severity.Error);
                Logger.LogError(ex, "Error deleting VAT rate {VatRateId}", vatRate.Id);
            }
        }
    }

    private Color GetStatusColor(VatRateStatus status)
    {
        return status switch
        {
            VatRateStatus.Active => Color.Success,
            VatRateStatus.Suspended => Color.Warning,
            VatRateStatus.Deleted => Color.Error,
            _ => Color.Default
        };
    }

    private string GetStatusIcon(VatRateStatus status)
    {
        return status switch
        {
            VatRateStatus.Active => Icons.Material.Outlined.CheckCircle,
            VatRateStatus.Suspended => Icons.Material.Outlined.Pause,
            VatRateStatus.Deleted => Icons.Material.Outlined.Cancel,
            _ => Icons.Material.Outlined.Help
        };
    }

    private string GetStatusText(VatRateStatus status)
    {
        return status switch
        {
            VatRateStatus.Active => TranslationService.GetTranslation("field.active", "Attivo"),
            VatRateStatus.Suspended => TranslationService.GetTranslation("field.suspended", "Sospeso"),
            VatRateStatus.Deleted => TranslationService.GetTranslation("field.deleted", "Eliminato"),
            _ => status.ToString()
        };
    }
}
