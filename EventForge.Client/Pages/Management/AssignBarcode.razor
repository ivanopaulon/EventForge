@page "/products/assign-barcode"
@using Microsoft.AspNetCore.Authorization
@using EventForge.DTOs.Common
@using EventForge.DTOs.Products
@using System.Web
@attribute [Authorize(Roles = "SuperAdmin,Admin,Manager")]
@inject IProductService ProductService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject ITranslationService TranslationService
@inject ILogger<AssignBarcode> Logger
@inject NavigationManager NavigationManager

<PageTitle>@TranslationService.GetTranslation("products.assignBarcode", "Assegna Codice a Barre")</PageTitle>

<MudContainer MaxWidth="MaxWidth.Medium" Class="mt-4">
    <MudText Typo="Typo.h4" Class="mb-4">
        <MudIcon Icon="@Icons.Material.Outlined.Link" Class="mr-2" Size="Size.Medium" />
        @TranslationService.GetTranslation("products.assignBarcode", "Assegna Codice a Barre")
    </MudText>

    @if (_isLoading)
    {
        <MudProgressLinear Indeterminate="true" Class="mb-4" />
    }

    <MudPaper Elevation="2" Class="pa-4 mb-4">
        <MudText Typo="Typo.h6" Class="mb-3">
            @TranslationService.GetTranslation("products.barcodeToAssign", "Codice da Assegnare")
        </MudText>
        <MudChip T="string" Icon="@Icons.Material.Outlined.QrCode" Color="Color.Primary">@Barcode</MudChip>
    </MudPaper>

    <MudPaper Elevation="2" Class="pa-4 mb-4">
        <MudText Typo="Typo.h6" Class="mb-3">
            @TranslationService.GetTranslation("products.selectProduct", "Seleziona Prodotto")
        </MudText>

        <MudAutocomplete T="ProductDto"
                         @bind-Value="_selectedProduct"
                         Label="@TranslationService.GetTranslation("products.searchProduct", "Cerca Prodotto")"
                         Variant="Variant.Outlined"
                         SearchFunc="@SearchProducts"
                         ToStringFunc="@(p => p?.Name ?? string.Empty)"
                         Immediate="true"
                         ResetValueOnEmptyText="true"
                         CoerceText="true"
                         CoerceValue="false"
                         Adornment="Adornment.Start"
                         AdornmentIcon="@Icons.Material.Outlined.Search">
            <ItemTemplate Context="product">
                <MudText Typo="Typo.body2">@product.Name</MudText>
                <MudText Typo="Typo.caption" Color="Color.Secondary">@product.Code</MudText>
            </ItemTemplate>
        </MudAutocomplete>
    </MudPaper>

    @if (_selectedProduct != null)
    {
        <MudPaper Elevation="2" Class="pa-4 mb-4">
            <MudText Typo="Typo.h6" Class="mb-3">
                @TranslationService.GetTranslation("products.selectedProduct", "Prodotto Selezionato")
            </MudText>

            <MudGrid Spacing="2">
                <MudItem xs="12" md="6">
                    <MudText Typo="Typo.body2" Color="Color.Secondary">@TranslationService.GetTranslation("products.productName", "Nome Prodotto")</MudText>
                    <MudText Typo="Typo.body1" Style="font-weight: 600;">@_selectedProduct.Name</MudText>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudText Typo="Typo.body2" Color="Color.Secondary">@TranslationService.GetTranslation("products.productCode", "Codice Prodotto")</MudText>
                    <MudText Typo="Typo.body1" Style="font-weight: 600;">@_selectedProduct.Code</MudText>
                </MudItem>
                <MudItem xs="12">
                    <MudText Typo="Typo.body2" Color="Color.Secondary">@TranslationService.GetTranslation("products.description", "Descrizione")</MudText>
                    <MudText Typo="Typo.body1">@_selectedProduct.Description</MudText>
                </MudItem>
            </MudGrid>
        </MudPaper>

        <MudPaper Elevation="2" Class="pa-4">
            <MudForm @ref="_form" @bind-IsValid="@_isFormValid">
                <MudGrid Spacing="3">
                    <MudItem xs="12">
                        <MudSelect @bind-Value="_createCodeDto.CodeType"
                                   Label="@TranslationService.GetTranslation("products.codeType", "Tipo Codice")"
                                   Variant="Variant.Outlined"
                                   Required="true"
                                   RequiredError="@TranslationService.GetTranslation("validation.required", "Campo obbligatorio")">
                            <MudSelectItem Value="@("EAN")">EAN</MudSelectItem>
                            <MudSelectItem Value="@("UPC")">UPC</MudSelectItem>
                            <MudSelectItem Value="@("SKU")">SKU</MudSelectItem>
                            <MudSelectItem Value="@("QR")">QR Code</MudSelectItem>
                            <MudSelectItem Value="@("Barcode")">@TranslationService.GetTranslation("products.barcode", "Codice a Barre")</MudSelectItem>
                            <MudSelectItem Value="@("Other")">@TranslationService.GetTranslation("products.other", "Altro")</MudSelectItem>
                        </MudSelect>
                    </MudItem>

                    <MudItem xs="12">
                        <MudTextField @bind-Value="_createCodeDto.AlternativeDescription"
                                      Label="@TranslationService.GetTranslation("products.alternativeDescription", "Descrizione Alternativa")"
                                      Variant="Variant.Outlined"
                                      Lines="2"
                                      MaxLength="200"
                                      Counter="200"
                                      HelperText="@TranslationService.GetTranslation("products.descriptionHelper", "Descrizione opzionale per questo codice")" />
                    </MudItem>

                    <MudItem xs="12">
                        <MudStack Row="true" Spacing="2" Class="mt-3">
                            <MudButton StartIcon="@Icons.Material.Outlined.Save"
                                      Color="Color.Primary"
                                      Variant="Variant.Filled"
                                      OnClick="@AssignBarcodeToProduct"
                                      Disabled="@(!_isFormValid || _isLoading || _selectedProduct == null)">
                                @TranslationService.GetTranslation("common.save", "Salva")
                            </MudButton>
                            <MudButton StartIcon="@Icons.Material.Outlined.Cancel"
                                      Color="Color.Default"
                                      Variant="Variant.Outlined"
                                      OnClick="@Cancel">
                                @TranslationService.GetTranslation("common.cancel", "Annulla")
                            </MudButton>
                        </MudStack>
                    </MudItem>
                </MudGrid>
            </MudForm>
        </MudPaper>
    }
</MudContainer>

@code {
    private bool _isLoading = false;
    private bool _isFormValid = false;
    private MudForm? _form;
    private ProductDto? _selectedProduct;
    private CreateProductCodeDto _createCodeDto = new();
    private List<ProductDto> _allProducts = new();

    [Parameter]
    [SupplyParameterFromQuery(Name = "barcode")]
    public string? Barcode { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrWhiteSpace(Barcode))
        {
            Snackbar.Add(TranslationService.GetTranslation("products.noBarcodeProvided", "Nessun codice a barre fornito"), Severity.Warning);
            NavigationManager.NavigateTo("/warehouse/inventory-procedure");
            return;
        }

        _createCodeDto.Code = Barcode;
        _createCodeDto.CodeType = "Barcode";
        _createCodeDto.Status = ProductCodeStatus.Active;

        await LoadProducts();
    }

    private async Task LoadProducts()
    {
        _isLoading = true;
        try
        {
            var result = await ProductService.GetProductsAsync(1, 100);
            if (result != null)
            {
                _allProducts = result.Items.ToList();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading products");
            Snackbar.Add(TranslationService.GetTranslation("products.loadError", "Errore nel caricamento prodotti"), Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }

    private Task<IEnumerable<ProductDto>> SearchProducts(string value, CancellationToken token)
    {
        if (string.IsNullOrWhiteSpace(value))
            return Task.FromResult<IEnumerable<ProductDto>>(_allProducts);

        return Task.FromResult<IEnumerable<ProductDto>>(_allProducts
            .Where(p => p.Name.Contains(value, StringComparison.OrdinalIgnoreCase) ||
                       p.Code.Contains(value, StringComparison.OrdinalIgnoreCase))
            .ToList());
    }

    private async Task AssignBarcodeToProduct()
    {
        if (!_isFormValid || _selectedProduct == null)
            return;

        _isLoading = true;
        try
        {
            _createCodeDto.ProductId = _selectedProduct.Id;
            var result = await ProductService.CreateProductCodeAsync(_createCodeDto);

            if (result != null)
            {
                Snackbar.Add(TranslationService.GetTranslation("products.barcodeAssigned", "Codice a barre assegnato con successo"), Severity.Success);
                NavigationManager.NavigateTo("/warehouse/inventory-procedure");
            }
            else
            {
                Snackbar.Add(TranslationService.GetTranslation("products.assignError", "Errore nell'assegnazione del codice"), Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error assigning barcode to product");
            Snackbar.Add(TranslationService.GetTranslation("products.assignError", "Errore nell'assegnazione del codice"), Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/warehouse/inventory-procedure");
    }
}
