@using EventForge.DTOs.Products
@using EventForge.Client.Services
@inject ITranslationService TranslationService
@inject IProductService ProductService
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject ILogger<ProductSuppliersTab> Logger

<MudGrid>
    <MudItem xs="12" Class="d-flex justify-space-between align-center mb-2">
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Outlined.LocalShipping" Class="mr-2" />
            @TranslationService.GetTranslation("product.suppliers", "Fornitori")
            <MudChip T="string" Size="Size.Small" Class="ml-2">@(_productSuppliers?.Count() ?? 0)</MudChip>
        </MudText>
        <MudButton Variant="Variant.Filled" 
                   Color="Color.Primary" 
                   StartIcon="@Icons.Material.Outlined.Add"
                   OnClick="@OpenCreateDialog"
                   Size="Size.Small">
            @TranslationService.GetTranslation("common.add", "Aggiungi")
        </MudButton>
    </MudItem>

    <MudItem xs="12">
        @if (_isLoading)
        {
            <MudProgressLinear Color="Color.Primary" Indeterminate="true" />
        }
        else if (_productSuppliers == null || !_productSuppliers.Any())
        {
            <MudAlert Severity="Severity.Info">
                @TranslationService.GetTranslation("product.noSuppliers", "Nessun fornitore configurato")
            </MudAlert>
        }
        else
        {
            <MudTable Items="_productSuppliers" Hover="true" Striped="true" Dense="true">
                <HeaderContent>
                    <MudTh>@TranslationService.GetTranslation("field.supplier", "Fornitore")</MudTh>
                    <MudTh>@TranslationService.GetTranslation("field.supplierCode", "Codice Fornitore")</MudTh>
                    <MudTh>@TranslationService.GetTranslation("field.cost", "Costo")</MudTh>
                    <MudTh>@TranslationService.GetTranslation("field.leadTime", "Tempo di Consegna")</MudTh>
                    <MudTh>@TranslationService.GetTranslation("field.isPreferred", "Preferito")</MudTh>
                    <MudTh Style="text-align: right;">@TranslationService.GetTranslation("field.actions", "Azioni")</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="@TranslationService.GetTranslation("field.supplier", "Fornitore")">@context.SupplierName</MudTd>
                    <MudTd DataLabel="@TranslationService.GetTranslation("field.supplierCode", "Codice Fornitore")">@context.SupplierProductCode</MudTd>
                    <MudTd DataLabel="@TranslationService.GetTranslation("field.cost", "Costo")">€@context.UnitCost?.ToString("N2")</MudTd>
                    <MudTd DataLabel="@TranslationService.GetTranslation("field.leadTime", "Tempo di Consegna")">@context.LeadTimeDays gg</MudTd>
                    <MudTd DataLabel="@TranslationService.GetTranslation("field.isPreferred", "Preferito")">
                        @if (context.Preferred)
                        {
                            <MudIcon Icon="@Icons.Material.Filled.Star" Color="Color.Warning" Size="Size.Small" />
                        }
                    </MudTd>
                    <MudTd DataLabel="@TranslationService.GetTranslation("field.actions", "Azioni")" Style="text-align: right;">
                        <MudIconButton Icon="@Icons.Material.Outlined.Edit" 
                                       Size="Size.Small" 
                                       Color="Color.Primary"
                                       OnClick="@(() => OpenEditDialog(context))" />
                        <MudIconButton Icon="@Icons.Material.Outlined.Delete" 
                                       Size="Size.Small" 
                                       Color="Color.Error"
                                       OnClick="@(() => DeleteSupplierAsync(context))" />
                    </MudTd>
                </RowTemplate>
            </MudTable>
        }
    </MudItem>
</MudGrid>

@code {
    [Parameter, EditorRequired]
    public Guid ProductId { get; set; }

    private IEnumerable<ProductSupplierDto>? _productSuppliers;
    private bool _isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadSuppliersAsync();
    }

    private async Task LoadSuppliersAsync()
    {
        _isLoading = true;
        try
        {
            _productSuppliers = await ProductService.GetProductSuppliersAsync(ProductId);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading product suppliers for product {ProductId}", ProductId);
            Snackbar.Add(TranslationService.GetTranslation("product.loadSuppliersError", "Errore nel caricamento dei fornitori"), Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }

    private void OpenCreateDialog()
    {
        // TODO: Implement create dialog
        Snackbar.Add("Funzionalità in fase di implementazione", Severity.Info);
    }

    private void OpenEditDialog(ProductSupplierDto supplier)
    {
        // TODO: Implement edit dialog
        Snackbar.Add("Funzionalità in fase di implementazione", Severity.Info);
    }

    private async Task DeleteSupplierAsync(ProductSupplierDto supplier)
    {
        var confirmed = await DialogService.ShowMessageBox(
            TranslationService.GetTranslation("common.confirm", "Conferma"),
            TranslationService.GetTranslation("product.confirmDeleteSupplier", "Sei sicuro di voler eliminare questo fornitore?"),
            yesText: TranslationService.GetTranslation("common.yes", "Sì"),
            noText: TranslationService.GetTranslation("common.no", "No"));

        if (confirmed == true)
        {
            try
            {
                await ProductService.DeleteProductSupplierAsync(supplier.Id);
                Snackbar.Add(TranslationService.GetTranslation("product.supplierDeleted", "Fornitore eliminato con successo"), Severity.Success);
                await LoadSuppliersAsync();
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error deleting product supplier {SupplierId}", supplier.Id);
                Snackbar.Add(TranslationService.GetTranslation("product.deleteSupplierError", "Errore nell'eliminazione del fornitore"), Severity.Error);
            }
        }
    }
}
