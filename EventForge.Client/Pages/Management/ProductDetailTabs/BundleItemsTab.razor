@using EventForge.DTOs.Products
@using EventForge.Client.Services
@using EventForge.Client.Shared.Components
@inject ITranslationService TranslationService
@inject IProductService ProductService
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject ILogger<BundleItemsTab> Logger

<MudStack Spacing="3">
    <MudPaper Elevation="1" Class="pa-4">
        <MudGrid>
            <MudItem xs="12" Class="d-flex justify-end align-center mb-2">
                <MudButton Variant="Variant.Filled" 
                           Color="Color.Primary" 
                           StartIcon="@Icons.Material.Filled.Add"
                           OnClick="@OpenCreateDialog"
                           Size="Size.Small">
                    @TranslationService.GetTranslation("common.add", "Aggiungi")
                </MudButton>
            </MudItem>

            <MudItem xs="12">
                @if (_isLoading)
                {
                    <MudProgressLinear Color="Color.Primary" Indeterminate="true" />
                }
                else if (_bundleItems == null || !_bundleItems.Any())
                {
                    <MudAlert Severity="Severity.Info">
                        @TranslationService.GetTranslation("product.noBundleItems", "Nessun componente configurato per questo bundle")
                    </MudAlert>
                }
                else
                {
                    <MudTable Items="_bundleItems" Hover="true" Striped="true" Dense="true">
                        <HeaderContent>
                            <MudTh>@TranslationService.GetTranslation("field.componentProduct", "Prodotto Componente")</MudTh>
                            <MudTh>@TranslationService.GetTranslation("field.quantity", "Quantità")</MudTh>
                            <MudTh Style="text-align: right;">@TranslationService.GetTranslation("field.actions", "Azioni")</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="@TranslationService.GetTranslation("field.componentProduct", "Prodotto Componente")">
                                @GetProductName(context.ComponentProductId)
                            </MudTd>
                            <MudTd DataLabel="@TranslationService.GetTranslation("field.quantity", "Quantità")">@context.Quantity</MudTd>
                            <MudTd DataLabel="@TranslationService.GetTranslation("field.actions", "Azioni")" Style="text-align: right;">
                                <MudIconButton Icon="@Icons.Material.Filled.Edit" 
                                               Size="Size.Small" 
                                               Color="Color.Primary"
                                               OnClick="@(() => OpenEditDialog(context))" />
                                <MudIconButton Icon="@Icons.Material.Filled.Delete" 
                                               Size="Size.Small" 
                                               Color="Color.Error"
                                               OnClick="@(() => DeleteBundleItemAsync(context))" />
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                }
            </MudItem>
        </MudGrid>
    </MudPaper>
</MudStack>

@code {
    [Parameter, EditorRequired]
    public ProductDto Product { get; set; } = default!;

    // Notifications for parent
    [Parameter] public EventCallback OnProductUpdated { get; set; }
    [Parameter] public EventCallback OnProductUpdatedPersisted { get; set; }

    // Add missing IsEditMode parameter
    [Parameter]
    public bool IsEditMode { get; set; }

    private IEnumerable<ProductBundleItemDto>? _bundleItems;
    private Dictionary<Guid, string> _productNames = new();
    private bool _isLoading = true;

    protected override async Task OnParametersSetAsync()
    {
        if (Product?.Id != Guid.Empty)
        {
            await LoadBundleItemsAsync();
        }
    }

    private async Task LoadBundleItemsAsync()
    {
        _isLoading = true;
        try
        {
            _bundleItems = await ProductService.GetProductBundleItemsAsync(Product.Id);
            
            // Load product names for display
            if (_bundleItems != null && _bundleItems.Any())
            {
                await LoadProductNamesAsync();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading bundle items for product {ProductId}", Product.Id);
            Snackbar.Add(TranslationService.GetTranslation("product.loadBundleItemsError", "Errore nel caricamento dei componenti"), Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }
    
    private async Task LoadProductNamesAsync()
    {
        try
        {
            _productNames.Clear();
            
            if (_bundleItems == null) return;
            
            // Load product details in parallel for better performance
            var loadTasks = _bundleItems.Select(async item =>
            {
                try
                {
                    var product = await ProductService.GetProductByIdAsync(item.ComponentProductId);
                    if (product != null)
                    {
                        return (item.ComponentProductId, Name: $"{product.Name} ({product.Code})");
                    }
                }
                catch (Exception ex)
                {
                    Logger.LogWarning(ex, "Error loading product name for {ProductId}", item.ComponentProductId);
                }
                return (item.ComponentProductId, Name: item.ComponentProductId.ToString());
            });
            
            var results = await Task.WhenAll(loadTasks);
            
            foreach (var (productId, name) in results)
            {
                _productNames[productId] = name;
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading product names");
        }
    }
    
    private string GetProductName(Guid productId)
    {
        if (_productNames.TryGetValue(productId, out var name))
        {
            return name;
        }
        return productId.ToString();
    }

    private async Task OpenCreateDialog()
    {
        var parameters = new DialogParameters
        {
            { "BundleProductId", Product.Id }
        };

        var options = new DialogOptions
        {
            MaxWidth = MaxWidth.Medium,
            FullWidth = true,
            CloseButton = true
        };

        var dialog = await DialogService.ShowAsync<AddBundleItemDialog>(
            TranslationService.GetTranslation("product.addBundleItem", "Aggiungi Componente Bundle"),
            parameters,
            options);

        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await LoadBundleItemsAsync();
            await NotifyPersisted();
        }
    }

    private async Task OpenEditDialog(ProductBundleItemDto item)
    {
        var parameters = new DialogParameters
        {
            { "BundleItem", item },
            { "BundleProductId", Product.Id }
        };

        var options = new DialogOptions
        {
            MaxWidth = MaxWidth.Medium,
            FullWidth = true,
            CloseButton = true
        };

        var dialog = await DialogService.ShowAsync<EditBundleItemDialog>(
            TranslationService.GetTranslation("product.editBundleItem", "Modifica Componente Bundle"),
            parameters,
            options);

        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await LoadBundleItemsAsync();
            await NotifyPersisted();
        }
    }

    private async Task DeleteBundleItemAsync(ProductBundleItemDto item)
    {
        var productName = GetProductName(item.ComponentProductId);
        var message = $"{TranslationService.GetTranslation("product.confirmDeleteBundleItem", "Sei sicuro di voler eliminare questo componente?")} ({productName})";
        
        var confirmed = await DialogService.ShowMessageBox(
            TranslationService.GetTranslation("common.confirm", "Conferma"),
            message,
            yesText: TranslationService.GetTranslation("common.yes", "Sì"),
            noText: TranslationService.GetTranslation("common.no", "No"));

        if (confirmed == true)
        {
            try
            {
                await ProductService.DeleteProductBundleItemAsync(item.Id);
                Snackbar.Add(TranslationService.GetTranslation("product.bundleItemDeleted", "Componente eliminato con successo"), Severity.Success);
                await LoadBundleItemsAsync();
                await NotifyPersisted();
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error deleting bundle item {ItemId}", item.Id);
                Snackbar.Add(TranslationService.GetTranslation("product.deleteBundleItemError", "Errore nell'eliminazione del componente"), Severity.Error);
            }
        }
    }

    private async Task NotifyUpdated()
    {
        try
        {
            if (OnProductUpdated.HasDelegate)
                await OnProductUpdated.InvokeAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error invoking OnProductUpdated from BundleItemsTab");
        }
    }

    private async Task NotifyPersisted()
    {
        try
        {
            if (OnProductUpdatedPersisted.HasDelegate)
                await OnProductUpdatedPersisted.InvokeAsync();
            else if (OnProductUpdated.HasDelegate)
                await OnProductUpdated.InvokeAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error invoking OnProductUpdatedPersisted from BundleItemsTab");
        }
    }
}
