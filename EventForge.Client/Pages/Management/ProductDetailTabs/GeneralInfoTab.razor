@using EventForge.DTOs.Products
@using EventForge.Client.Services
@using Microsoft.AspNetCore.Components.Forms
@inject ITranslationService TranslationService
@inject IProductService ProductService
@inject ISnackbar Snackbar
@inject ILogger<GeneralInfoTab> Logger

<MudGrid>
    <!-- Left column: basic fields -->
    <MudItem xs="12" md="8">
        <MudGrid>
            <MudItem xs="12">
                <MudText Typo="Typo.h6" Class="mb-3">
                    <MudIcon Icon="@Icons.Material.Outlined.Info" Class="mr-2" />
                    @TranslationService.GetTranslation("product.basicInfo", "Informazioni di Base")
                </MudText>
                <MudDivider Class="mb-4" />
            </MudItem>

            <MudItem xs="12" md="6">
                <MudTextField @bind-Value="Product.Name"
                              Label="@($"{TranslationService.GetTranslation("field.name", "Nome")} *")"
                              Variant="Variant.Outlined"
                              ReadOnly="@(!IsEditMode)"
                              MaxLength="100"
                              @bind-Value:after="NotifyUpdated" />
            </MudItem>

            <MudItem xs="12" md="6">
                <MudTextField @bind-Value="Product.Code"
                              Label="@($"{TranslationService.GetTranslation("field.code", "Codice")} *")"
                              Variant="Variant.Outlined"
                              ReadOnly="true"
                              HelperText="@TranslationService.GetTranslation("product.codeImmutable", "Il codice è immutabile")"
                              MaxLength="100" />
            </MudItem>

            <MudItem xs="12" md="6">
                <MudTextField @bind-Value="Product.ShortDescription"
                              Label="@TranslationService.GetTranslation("field.shortDescription", "Descrizione Breve")"
                              Variant="Variant.Outlined"
                              ReadOnly="@(!IsEditMode)"
                              MaxLength="50"
                              @bind-Value:after="NotifyUpdated" />
            </MudItem>

            <MudItem xs="12" md="6">
                <MudSelect T="ProductStatus"
                           @bind-Value="Product.Status"
                           Label="@($"{TranslationService.GetTranslation("field.status", "Stato")} *")"
                           Variant="Variant.Outlined"
                           ReadOnly="@(!IsEditMode)"
                           @bind-Value:after="NotifyUpdated">
                    <MudSelectItem T="ProductStatus" Value="@ProductStatus.Active">@TranslationService.GetTranslation("status.active", "Attivo")</MudSelectItem>
                    <MudSelectItem T="ProductStatus" Value="@ProductStatus.Suspended">@TranslationService.GetTranslation("status.suspended", "Sospeso")</MudSelectItem>
                    <MudSelectItem T="ProductStatus" Value="@ProductStatus.OutOfStock">@TranslationService.GetTranslation("status.outOfStock", "Esaurito")</MudSelectItem>
                    <MudSelectItem T="ProductStatus" Value="@ProductStatus.Deleted">@TranslationService.GetTranslation("status.deleted", "Eliminato")</MudSelectItem>
                </MudSelect>
            </MudItem>

            <MudItem xs="12">
                <MudTextField @bind-Value="Product.Description"
                              Label="@TranslationService.GetTranslation("field.description", "Descrizione")"
                              Variant="Variant.Outlined"
                              Lines="5"
                              ReadOnly="@(!IsEditMode)"
                              @bind-Value:after="NotifyUpdated" />
            </MudItem>

            <MudItem xs="12" md="4">
                <MudSwitch T="bool"
                           @bind-Checked="Product.IsBundle"
                           @bind-Checked:after="OnBundleChanged"
                           Label="@TranslationService.GetTranslation("product.isBundle", "È un Bundle")"
                           Color="Color.Primary"
                           ReadOnly="@(!IsEditMode)" />
            </MudItem>
        </MudGrid>
    </MudItem>

    <!-- Right column: image preview + upload controls -->
    <MudItem xs="12" md="4">
        <MudText Typo="Typo.h6" Class="mb-3">
            <MudIcon Icon="@Icons.Material.Outlined.Image" Class="mr-2" />
            @TranslationService.GetTranslation("product.productImage", "Immagine Prodotto")
        </MudText>

        <MudCard>
            @if (!string.IsNullOrEmpty(Product.ThumbnailUrl))
            {
                <MudCardMedia Image="@Product.ThumbnailUrl" Height="180" />
            }
            else
            {
                <div style="height:180px; display:flex; align-items:center; justify-content:center; background-color:rgba(0,0,0,0.03);">
                    <MudText Typo="Typo.subtitle2" Class="mud-text-secondary">
                        @TranslationService.GetTranslation("product.noImage", "Nessuna immagine")
                    </MudText>
                </div>
            }

            <MudCardContent>
                <div class="d-flex flex-column">
                    @if (IsEditMode)
                    {
                        <div class="d-flex gap-2 align-center">
                            <MudFileUpload T="IBrowserFile"
                                           Accept="image/*"
                                           @bind-Files="_selectedImage"
                                           MaximumFileCount="1">
                                <ActivatorContent>
                                    <MudButton HtmlTag="label"
                                              Variant="Variant.Filled"
                                              Color="Color.Primary"
                                              StartIcon="@Icons.Material.Filled.CloudUpload"
                                              Size="Size.Medium"
                                              Disabled="_isUploadingImage">
                                        @TranslationService.GetTranslation("product.selectImage", "Seleziona Immagine")
                                    </MudButton>
                                </ActivatorContent>
                            </MudFileUpload>

                            <MudButton OnClick="@UploadImage"
                                       Variant="Variant.Filled"
                                       Color="Color.Success"
                                       StartIcon="@Icons.Material.Filled.Upload"
                                       Disabled="_isUploadingImage || SelectedFile == null"
                                       Size="Size.Medium">
                                @TranslationService.GetTranslation("common.upload", "Carica")
                            </MudButton>

                            @if (Product.ImageDocumentId.HasValue)
                            {
                                <MudButton OnClick="@RemoveImage"
                                           Variant="Variant.Filled"
                                           Color="Color.Error"
                                           StartIcon="@Icons.Material.Filled.Delete"
                                           Disabled="_isUploadingImage"
                                           Size="Size.Medium">
                                    @TranslationService.GetTranslation("common.remove", "Rimuovi")
                                </MudButton>
                            }
                        </div>

                        @if (SelectedFile != null)
                        {
                            <MudChip T="string" Color="Color.Info" Icon="@Icons.Material.Filled.Image" OnClose="@ClearImage" Class="mt-2">
                                @SelectedFile.Name
                            </MudChip>
                            <MudText Typo="Typo.caption" Class="mt-1 mud-text-secondary">@FormatFileSize(SelectedFile.Size)</MudText>
                        }

                        @if (_isUploadingImage)
                        {
                            <MudProgressLinear Indeterminate="true" Class="mt-2" />
                        }
                    }
                    else
                    {
                        <MudText Typo="Typo.caption" Class="mud-text-secondary">
                            @TranslationService.GetTranslation("product.imageViewOnly", "Solo visualizzazione immagine (modalità lettura)")
                        </MudText>
                    }
                </div>
            </MudCardContent>
        </MudCard>

        <MudText Typo="Typo.caption" Class="mt-2 mud-text-secondary">
            @TranslationService.GetTranslation("product.imageHelp", "Formati supportati: JPEG, PNG, GIF, WebP. Dimensione massima: 5MB")
        </MudText>
    </MudItem>

    <!-- Metadata moved below as before -->
    <MudItem xs="12" Class="mt-4">
        <MudText Typo="Typo.h6" Class="mb-3">
            <MudIcon Icon="@Icons.Material.Outlined.CalendarToday" Class="mr-2" />
            @TranslationService.GetTranslation("common.metadata", "Metadati")
        </MudText>
        <MudDivider Class="mb-4" />
    </MudItem>

    <MudItem xs="12" md="6">
        <MudTextField Value="@Product.CreatedAt.ToString("dd/MM/yyyy HH:mm")"
                      Label="@TranslationService.GetTranslation("field.createdAt", "Creato il")"
                      Variant="Variant.Outlined"
                      ReadOnly="true" />
    </MudItem>

    <MudItem xs="12" md="6">
        <MudTextField Value="@Product.CreatedBy"
                      Label="@TranslationService.GetTranslation("field.createdBy", "Creato da")"
                      Variant="Variant.Outlined"
                      ReadOnly="true" />
    </MudItem>

    @if (Product.ModifiedAt.HasValue)
    {
        <MudItem xs="12" md="6">
            <MudTextField Value="@Product.ModifiedAt.Value.ToString("dd/MM/yyyy HH:mm")"
                          Label="@TranslationService.GetTranslation("field.modifiedAt", "Modificato il")"
                          Variant="Variant.Outlined"
                          ReadOnly="true" />
        </MudItem>

        <MudItem xs="12" md="6">
            <MudTextField Value="@Product.ModifiedBy"
                          Label="@TranslationService.GetTranslation("field.modifiedBy", "Modificato da")"
                          Variant="Variant.Outlined"
                          ReadOnly="true" />
        </MudItem>
    }
</MudGrid>

@code {
    [Parameter, EditorRequired]
    public ProductDto Product { get; set; } = default!;

    [Parameter]
    public bool IsEditMode { get; set; }

    [Parameter]
    public EventCallback OnProductUpdated { get; set; }

    // Child calls this to indicate a persisted change (so parent updates snapshot)
    [Parameter]
    public EventCallback OnProductUpdatedPersisted { get; set; }

    // Use single IBrowserFile as MudFileUpload expects a single file binding in this project
    private IBrowserFile? _selectedImage;
    private bool _isUploadingImage = false;

    // helper to get selected file
    private IBrowserFile? SelectedFile => _selectedImage;

    // ClearImage returns Task so it can be used as EventCallback target
    private Task ClearImage()
    {
        _selectedImage = null;
        return Task.CompletedTask;
    }

    private async Task RemoveImage()
    {
        Product.ImageDocumentId = null;
        Product.ThumbnailUrl = null;
        await NotifyUpdated();
    }

    private async Task UploadImage()
    {
        var file = SelectedFile;
        if (file == null || Product.Id == Guid.Empty)
            return;

        const long maxBytes = 5 * 1024 * 1024;
        var allowedTypes = new[] { "image/jpeg", "image/png", "image/gif", "image/webp" };

        if (file.Size > maxBytes)
        {
            Snackbar.Add(TranslationService.GetTranslation("product.imageTooLarge", "Immagine troppo grande (max 5MB)"), Severity.Error);
            return;
        }

        if (!string.IsNullOrWhiteSpace(file.ContentType) && !allowedTypes.Contains(file.ContentType))
        {
            Snackbar.Add(TranslationService.GetTranslation("product.imageTypeNotAllowed", "Formato immagine non supportato"), Severity.Error);
            return;
        }

        _isUploadingImage = true;
        try
        {
            Logger.LogInformation("Uploading image for product {ProductId}", Product.Id);

            var updatedProduct = await ProductService.UploadProductImageDocumentAsync(Product.Id, file);

            if (updatedProduct != null)
            {
                Product.ImageDocumentId = updatedProduct.ImageDocumentId;
                Product.ThumbnailUrl = updatedProduct.ThumbnailUrl;

                Snackbar.Add(TranslationService.GetTranslation("product.imageUploadSuccess", "Immagine caricata con successo"), Severity.Success);

                _selectedImage = null;

                if (OnProductUpdatedPersisted.HasDelegate)
                    await OnProductUpdatedPersisted.InvokeAsync();
                else
                    await NotifyUpdated();
            }
            else
            {
                Logger.LogWarning("Image upload returned null for product {ProductId}", Product.Id);
                Snackbar.Add(TranslationService.GetTranslation("product.imageUploadError", "Errore nel caricamento dell'immagine"), Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error uploading image for product {ProductId}", Product.Id);
            Snackbar.Add(TranslationService.GetTranslation("product.imageUploadError", "Errore nel caricamento dell'immagine"), Severity.Error);
        }
        finally
        {
            _isUploadingImage = false;
        }
    }

    private async Task OnBundleChanged()
    {
        await NotifyUpdated();
    }

    private async Task NotifyUpdated()
    {
        try
        {
            if (OnProductUpdated.HasDelegate)
                await OnProductUpdated.InvokeAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error invoking OnProductUpdated from GeneralInfoTab");
        }
    }

    private static string FormatFileSize(long bytes)
    {
        if (bytes < 1024) return bytes + " B";
        if (bytes < 1024 * 1024) return (bytes / 1024.0).ToString("N1") + " KB";
        return (bytes / (1024.0 * 1024.0)).ToString("N2") + " MB";
    }
}
