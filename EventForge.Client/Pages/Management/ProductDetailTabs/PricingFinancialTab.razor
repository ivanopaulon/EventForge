@using EventForge.DTOs.Products
@using EventForge.DTOs.VatRates
@using EventForge.Client.Services
@inject ITranslationService TranslationService
@inject IFinancialService FinancialService
@inject ILogger<PricingFinancialTab> Logger

<MudGrid>
    <MudItem xs="12">
        <MudText Typo="Typo.h6" Class="mb-3">
            <MudIcon Icon="@Icons.Material.Filled.AttachMoney" Class="mr-2" />
            @TranslationService.GetTranslation("product.pricingInfo", "Informazioni Prezzi")
        </MudText>
        <MudDivider Class="mb-4" />
    </MudItem>

    <MudItem xs="12" md="6">
        <MudNumericField @bind-Value="Product.DefaultPrice"
                         Label="@TranslationService.GetTranslation("field.defaultPrice", "Prezzo Predefinito")"
                         Variant="Variant.Outlined"
                         ReadOnly="@(!IsEditMode)"
                         Min="0"
                         Format="N2"
                         Adornment="Adornment.Start"
                         AdornmentText="â‚¬"
                         Size="Size.Small"
                         @bind-Value:after="NotifyUpdated" />
    </MudItem>

    <MudItem xs="12" md="6">
        <MudSwitch T="bool"
                   @bind-Checked="Product.IsVatIncluded"
                   @bind-Checked:after="OnVatIncludedChanged"
                   Label="@TranslationService.GetTranslation("product.isVatIncluded", "IVA Inclusa")"
                   Color="Color.Primary"
                   ReadOnly="@(!IsEditMode)" />
    </MudItem>

    <MudItem xs="12" md="6">
        <MudSelect T="Guid?"
                   @bind-Value="Product.VatRateId"
                   Label="@TranslationService.GetTranslation("field.vatRate", "Aliquota IVA")"
                   Variant="Variant.Outlined"
                   ReadOnly="@(!IsEditMode)"
                   Clearable="true"
                   Size="Size.Small"
                   @bind-Value:after="NotifyUpdated">
            @if (_vatRates != null)
            {
                @foreach (var vat in _vatRates)
                {
                    <MudSelectItem T="Guid?" Value="@((Guid?)vat.Id)">@vat.Name (@vat.Percentage%)</MudSelectItem>
                }
            }
        </MudSelect>
    </MudItem>
</MudGrid>

@code {
    [Parameter, EditorRequired]
    public ProductDto Product { get; set; } = default!;

    [Parameter]
    public bool IsEditMode { get; set; }

    [Parameter]
    public EventCallback OnProductUpdated { get; set; }

    private IEnumerable<VatRateDto>? _vatRates;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _vatRates = await FinancialService.GetVatRatesAsync();
        }
        catch (Exception ex)
        {
            Logger.LogWarning(ex, "Unable to load VAT rates");
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        // Ensure VAT rates are loaded and include the currently selected VatRate so MudSelect shows the label
        if (_vatRates == null)
        {
            try
            {
                _vatRates = await FinancialService.GetVatRatesAsync();
            }
            catch (Exception ex)
            {
                Logger.LogWarning(ex, "Unable to load VAT rates on parameter set");
            }
        }

        // If product has a VatRateId that's not present in the loaded list, fetch it explicitly and add it
        try
        {
            if (Product?.VatRateId.HasValue == true && _vatRates != null && !_vatRates.Any(v => v.Id == Product.VatRateId.Value))
            {
                var single = await FinancialService.GetVatRateAsync(Product.VatRateId.Value);
                if (single != null)
                {
                    _vatRates = _vatRates.Append(single).ToList();
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogWarning(ex, "Unable to load specific VAT rate {VatRateId}", Product?.VatRateId);
        }
        StateHasChanged();
    }

    // Nota: chiamato come @bind-Checked:after, deve essere parameterless
    private async Task OnVatIncludedChanged()
    {
        await NotifyUpdated();
    }

    private async Task NotifyUpdated()
    {
        try
        {
            if (OnProductUpdated.HasDelegate)
                await OnProductUpdated.InvokeAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error invoking OnProductUpdated from PricingFinancialTab");
        }
    }
}
