@using EventForge.DTOs.Products
@using EventForge.DTOs.Documents
@using EventForge.DTOs.Common
@using EventForge.DTOs.Warehouse
@using EventForge.Client.Services
@inject ITranslationService TranslationService
@inject IDocumentHeaderService DocumentHeaderService
@inject IStockService StockService
@inject IProductService ProductService
@inject ILogger<StockInventoryTab> Logger

<MudGrid>
    <MudItem xs="12">
        <MudText Typo="Typo.h6" Class="mb-3">
            <MudIcon Icon="@Icons.Material.Outlined.Warehouse" Class="mr-2" />
            @TranslationService.GetTranslation("product.stockInfo", "Informazioni Magazzino")
        </MudText>
        <MudDivider Class="mb-4" />
    </MudItem>

    <!-- Two column layout: procurement data (left) and stock summary (right) -->
    <MudItem xs="12">
        <MudGrid>
            <!-- force side-by-side even on small screens by using xs=6 -->
            <MudItem xs="6" md="6">
                <MudPaper Elevation="0" Class="pa-3">
                    <MudText Typo="Typo.subtitle1" Class="mb-2">@TranslationService.GetTranslation("product.general", "Generali")</MudText>
                    <MudGrid>
                        <MudItem xs="12" md="3">
                            <MudTooltip Text="@TranslationService.GetTranslation("helper.reorderPoint", "Livello al quale si dovrebbe creare un ordine di riapprovvigionamento")">
                            <div>
                            <MudNumericField Value="@(Product.ReorderPoint ??0)"
                                             Label="@TranslationService.GetTranslation("field.reorderPoint", "Punto di Riordino")"
                                             Variant="Variant.Outlined"
                                             ReadOnly="true"
                                             Min="0" Format="N2" Style="max-width:180px; min-width:140px" />
                            </div>
                            </MudTooltip>
                        </MudItem>

                        <MudItem xs="12" md="3">
                            <MudTooltip Text="@TranslationService.GetTranslation("helper.safetyStock", "Quantità minima di sicurezza da mantenere in magazzino")">
                            <div>
                            <MudNumericField Value="@(Product.SafetyStock ??0)"
                                             Label="@TranslationService.GetTranslation("field.safetyStock", "Scorta di Sicurezza")"
                                             Variant="Variant.Outlined"
                                             ReadOnly="true"
                                             Min="0" Format="N2" Style="max-width:180px; min-width:140px" />
                            </div>
                            </MudTooltip>
                        </MudItem>

                        <MudItem xs="12" md="3">
                            <MudTooltip Text="@TranslationService.GetTranslation("helper.targetStockLevel", "Livello di scorte obiettivo desiderato per gestire la domanda")">
                            <div>
                            <MudNumericField Value="@(Product.TargetStockLevel ??0)"
                                             Label="@TranslationService.GetTranslation("field.targetStockLevel", "Livello Stock Obiettivo")"
                                             Variant="Variant.Outlined"
                                             ReadOnly="true"
                                             Min="0" Format="N2" Style="max-width:180px; min-width:140px" />
                            </div>
                            </MudTooltip>
                        </MudItem>

                        <MudItem xs="12" md="3">
                            <MudTooltip Text="@TranslationService.GetTranslation("helper.averageDailyDemand", "Domanda media giornaliera prevista per il prodotto")">
                            <div>
                            <MudNumericField Value="@(Product.AverageDailyDemand ??0)"
                                             Label="@TranslationService.GetTranslation("field.averageDailyDemand", "Domanda Media Giornaliera")"
                                             Variant="Variant.Outlined"
                                             ReadOnly="true"
                                             Min="0" Format="N2" Style="max-width:180px; min-width:140px" />
                            </div>
                            </MudTooltip>
                        </MudItem>
                    </MudGrid>
                </MudPaper>
            </MudItem>

            <MudItem xs="6" md="6">
                <MudPaper Elevation="0" Class="pa-3">
                    <MudText Typo="Typo.subtitle1" Class="mb-2">@TranslationService.GetTranslation("product.availabilityStock", "Disponibilità e giacenza")</MudText>
                    @if (_isLoadingStock)
                    {
                        <div class="d-flex justify-center pa-4">
                            <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                        </div>
                    }
                    else if (_stockLevels?.Any() == true)
                    {
                        <!-- Only show detailed table to avoid duplicated summary values -->
                        <MudTable Items="@_stockLevels" Hover="true" Striped="true" Dense="true" Class="mb-0">
                            <HeaderContent>
                                <MudTh>@TranslationService.GetTranslation("warehouse.warehouse", "Magazzino")</MudTh>
                                <MudTh>@TranslationService.GetTranslation("warehouse.location", "Ubicazione")</MudTh>
                                <MudTh>@TranslationService.GetTranslation("warehouse.lot", "Lotto")</MudTh>
                                <MudTh Class="text-right">@TranslationService.GetTranslation("warehouse.quantity", "Quantità")</MudTh>
                                <MudTh Class="text-right">@TranslationService.GetTranslation("warehouse.reserved", "Riservata")</MudTh>
                                <MudTh Class="text-right">@TranslationService.GetTranslation("warehouse.available", "Disponibile")</MudTh>
                                <MudTh>@TranslationService.GetTranslation("warehouse.lastMovement", "Ultimo Movimento")</MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd>@(context.WarehouseName ?? "-")</MudTd>
                                <MudTd>@(context.StorageLocationCode ?? "-")</MudTd>
                                <MudTd>@(context.LotCode ?? "-")</MudTd>
                                <MudTd Class="text-right">@context.Quantity.ToString("N2")</MudTd>
                                <MudTd Class="text-right">@context.ReservedQuantity.ToString("N2")</MudTd>
                                <MudTd Class="text-right">@context.AvailableQuantity.ToString("N2")</MudTd>
                                <MudTd>@(context.LastMovementDate?.ToString("dd/MM/yyyy") ?? "-")</MudTd>
                            </RowTemplate>
                        </MudTable>
                    }
                    else
                    {
                        <MudAlert Severity="Severity.Info" Class="mb-0 mt-4">
                            @TranslationService.GetTranslation("product.noStockFound", "Nessuna giacenza trovata per questo prodotto")
                        </MudAlert>
                    }
                </MudPaper>
            </MudItem>
        </MudGrid>
    </MudItem>

    <!-- Documents list below stock (on the next row) -->
    <MudItem xs="12" Class="mt-4">
        <MudDivider Class="my-4" />
        <MudText Typo="Typo.h6" Class="mb-3">
            <MudIcon Icon="@Icons.Material.Outlined.Description" Class="mr-2" />
            @TranslationService.GetTranslation("product.documentHistory", "Storico Documenti")
        </MudText>
    </MudItem>

    <!-- Filters and documents table (same as before) -->
    <MudItem xs="12">
        <MudPaper Elevation="0" Class="pa-4 mb-4" Style="background-color: var(--mud-palette-background-grey);">
            <MudGrid Spacing="2">
                <MudItem xs="12" md="3">
                    <MudDatePicker @bind-Date="_fromDate"
                                   Label="@TranslationService.GetTranslation("filter.fromDate", "Da Data")"
                                   Variant="Variant.Outlined"
                                   Clearable="true"
                                   DateFormat="dd/MM/yyyy"
                                   Style="max-width:180px; min-width:140px" />
                </MudItem>
                <MudItem xs="12" md="3">
                    <MudDatePicker @bind-Date="_toDate"
                                   Label="@TranslationService.GetTranslation("filter.toDate", "A Data")"
                                   Variant="Variant.Outlined"
                                   Clearable="true"
                                   DateFormat="dd/MM/yyyy"
                                   Style="max-width:180px; min-width:140px" />
                </MudItem>
                <MudItem xs="12" md="3">
                    <MudTextField @bind-Value="_customerNameFilter"
                                  Label="@TranslationService.GetTranslation("filter.customerSupplier", "Cliente/Fornitore")"
                                  Variant="Variant.Outlined"
                                  Clearable="true"
                                  Style="max-width:180px; min-width:140px" />
                </MudItem>
                <MudItem xs="12" md="3" Class="d-flex align-end">
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Primary"
                               StartIcon="@Icons.Material.Outlined.FilterAlt"
                               OnClick="LoadDocumentsAsync"
                               Size="Size.Medium"
                               Style="min-width:140px">
                        @TranslationService.GetTranslation("common.filter", "Filtra")
                    </MudButton>
                </MudItem>
            </MudGrid>
        </MudPaper>
    </MudItem>

    <MudItem xs="12">
        @if (_isLoadingDocuments)
        {
            <div class="d-flex justify-center pa-4">
                <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
            </div>
        }
        else if (_documents?.Items?.Any() == true)
        {
            <MudTable Items="@_documents.Items" Hover="true" Striped="true" Dense="true" Class="mb-4">
                <HeaderContent>
                    <MudTh>@TranslationService.GetTranslation("field.number", "Numero")</MudTh>
                    <MudTh>@TranslationService.GetTranslation("field.date", "Data")</MudTh>
                    <MudTh>@TranslationService.GetTranslation("field.type", "Tipo")</MudTh>
                    <MudTh Class="mud-hidden-sm-down">@TranslationService.GetTranslation("field.businessParty", "Cliente/Fornitore")</MudTh>
                    <MudTh>@TranslationService.GetTranslation("field.status", "Stato")</MudTh>
                    <MudTh Class="text-right mud-hidden-sm-down">@TranslationService.GetTranslation("field.total", "Totale")</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="@TranslationService.GetTranslation("field.number", "Numero")">@context.Number</MudTd>
                    <MudTd DataLabel="@TranslationService.GetTranslation("field.date", "Data")">@context.Date.ToString("dd/MM/yyyy")</MudTd>
                    <MudTd DataLabel="@TranslationService.GetTranslation("field.type", "Tipo")">@context.DocumentTypeName</MudTd>
                    <MudTd DataLabel="@TranslationService.GetTranslation("field.businessParty", "Cliente/Fornitore")" Class="mud-hidden-sm-down">@(context.BusinessPartyName ?? context.CustomerName ?? "-")</MudTd>
                    <MudTd>
                        <MudChip T="string" Size="Size.Small" Color="GetStatusColor(context.Status)">
                            @GetStatusText(context.Status)
                        </MudChip>
                    </MudTd>
                    <MudTd Class="text-right mud-hidden-sm-down">@context.TotalGrossAmount.ToString("C2")</MudTd>
                </RowTemplate>
            </MudTable>

            <div class="d-flex justify-space-between align-center">
                <MudText Typo="Typo.body2" Class="mud-text-secondary">
                    @TranslationService.GetTranslation("pagination.showing", "Mostrando") 
                    @((_documents.Page -1) * _documents.PageSize +1) - 
                    @Math.Min(_documents.Page * _documents.PageSize, _documents.TotalCount) 
                    @TranslationService.GetTranslation("pagination.of", "di") 
                    @_documents.TotalCount
                </MudText>
                <MudPagination Count="@((int)((_documents.TotalCount + _documents.PageSize -1) / _documents.PageSize))"
                               Selected="@_currentPage"
                               SelectedChanged="OnPageChangedAsync"
                               ShowFirstButton="true"
                               ShowLastButton="true" />
            </div>
        }
        else
        {
            <MudAlert Severity="Severity.Info" Class="mb-4">
                @TranslationService.GetTranslation("product.noDocumentsFound", "Nessun documento trovato per questo prodotto")
            </MudAlert>
        }
    </MudItem>
</MudGrid>

@code {
    [Parameter, EditorRequired]
    public ProductDto Product { get; set; } = default!;

    [Parameter]
    public bool IsEditMode { get; set; }

    [Parameter]
    public EventCallback OnProductUpdated { get; set; }

    [Parameter]
    public EventCallback OnProductUpdatedPersisted { get; set; }

    private bool _isLoadingDocuments = false;
    private bool _isLoadingStock = false;
    private PagedResult<DocumentHeaderDto>? _documents;
    private IEnumerable<StockDto> _stockLevels = Enumerable.Empty<StockDto>();
    private int _currentPage =1;
    private const int PageSize =10;

    // Filters
    private DateTime? _fromDate;
    private DateTime? _toDate;
    private string? _customerNameFilter;

    protected override async Task OnParametersSetAsync()
    {
        // Load documents and stock
        await Task.WhenAll(LoadDocumentsAsync(), LoadStockLevelsAsync());
    }

    private async Task LoadStockLevelsAsync()
    {
        _isLoadingStock = true;
        try
        {
            _stockLevels = await StockService.GetStockByProductIdAsync(Product.Id);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading stock levels for product {ProductId}", Product.Id);
            _stockLevels = Enumerable.Empty<StockDto>();
        }
        finally
        {
            _isLoadingStock = false;
            StateHasChanged();
        }
    }

    private async Task LoadDocumentsAsync()
    {
        _isLoadingDocuments = true;
        try
        {
            var queryParameters = new DocumentHeaderQueryParameters
            {
                Page = _currentPage,
                PageSize = PageSize,
                ProductId = Product.Id,
                FromDate = _fromDate,
                ToDate = _toDate,
                CustomerName = _customerNameFilter,
                SortBy = "Date",
                SortDirection = "desc"
            };

            _documents = await DocumentHeaderService.GetPagedDocumentHeadersAsync(queryParameters);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading documents for product {ProductId}", Product.Id);
            _documents = null;
        }
        finally
        {
            _isLoadingDocuments = false;
            StateHasChanged();
        }
    }

    private async Task OnPageChangedAsync(int page)
    {
        _currentPage = page;
        await LoadDocumentsAsync();
    }

    private Color GetStatusColor(DocumentStatus status)
    {
        return status switch
        {
            DocumentStatus.Draft => Color.Default,
            DocumentStatus.Approved => Color.Success,
            DocumentStatus.Rejected => Color.Error,
            DocumentStatus.Cancelled => Color.Error,
            _ => Color.Default
        };
    }

    private string GetStatusText(DocumentStatus status)
    {
        return status switch
        {
            DocumentStatus.Draft => TranslationService.GetTranslation("status.draft", "Bozza"),
            DocumentStatus.Approved => TranslationService.GetTranslation("status.approved", "Approvato"),
            DocumentStatus.Rejected => TranslationService.GetTranslation("status.rejected", "Rifiutato"),
            DocumentStatus.Cancelled => TranslationService.GetTranslation("status.cancelled", "Annullato"),
            _ => status.ToString()
        };
    }

    private async Task NotifyUpdated()
    {
        try
        {
            if (OnProductUpdated.HasDelegate)
                await OnProductUpdated.InvokeAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error invoking OnProductUpdated from StockInventoryTab");
        }
    }
}
