@using EventForge.DTOs.Products
@using EventForge.DTOs.UnitOfMeasures
@using EventForge.DTOs.Station
@using EventForge.Client.Services
@using EventForge.DTOs.Common
@using MudBlazor
@inject ITranslationService TranslationService
@inject IBrandService BrandService
@inject IModelService ModelService
@inject IUMService UMService
@inject IEntityManagementService EntityManagementService
@inject ILogger<ClassificationTab> Logger
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudGrid>
    <MudItem xs="12">
        <MudText Typo="Typo.h6" Class="mb-3">
            <MudIcon Icon="@Icons.Material.Outlined.Category" Class="mr-2" />
            @TranslationService.GetTranslation("product.classificationInfo", "Classificazione")
        </MudText>
        <MudDivider Class="mb-4" />
    </MudItem>

    <MudItem xs="12" md="6">
        <MudSelect T="Guid?"
                   @bind-Value="Product.BrandId"
                   Label="@TranslationService.GetTranslation("field.brand", "Marchio")"
                   Variant="Variant.Outlined"
                   ReadOnly="@(!IsEditMode)"
                   Clearable="true"
                   @bind-Value:after="OnBrandChanged">
            @if (_brands != null)
            {
                @foreach (var brand in _brands)
                {
                    <MudSelectItem T="Guid?" Value="@((Guid?)brand.Id)">@brand.Name</MudSelectItem>
                }
            }
        </MudSelect>
    </MudItem>

    <MudItem xs="12" md="6">
        <MudSelect T="Guid?"
                   @bind-Value="Product.ModelId"
                   Label="@TranslationService.GetTranslation("field.model", "Modello")"
                   Variant="Variant.Outlined"
                   ReadOnly="@(!IsEditMode)"
                   Clearable="true"
                   @bind-Value:after="NotifyUpdated">
            @if (_models != null)
            {
                @foreach (var model in _models)
                {
                    <MudSelectItem T="Guid?" Value="@((Guid?)model.Id)">@model.Name</MudSelectItem>
                }
            }
        </MudSelect>
    </MudItem>

    <MudItem xs="12" md="6">
        <MudSelect T="Guid?"
                   @bind-Value="Product.UnitOfMeasureId"
                   Label="@TranslationService.GetTranslation("field.unitOfMeasure", "Unità di Misura")"
                   Variant="Variant.Outlined"
                   ReadOnly="@(!IsEditMode)"
                   Clearable="true"
                   @bind-Value:after="NotifyUpdated">
            @if (_unitsOfMeasure != null)
            {
                @foreach (var um in _unitsOfMeasure)
                {
                    <MudSelectItem T="Guid?" Value="@((Guid?)um.Id)">@um.Name (@um.Symbol)</MudSelectItem>
                }
            }
        </MudSelect>
    </MudItem>

    <!-- Category picker -->
    <MudItem xs="12" md="4">
        <MudText Typo="Typo.caption" Class="mb-1">@TranslationService.GetTranslation("product.categoryLabel","Categoria")</MudText>
        <div class="d-flex gap-2">
            <MudTextField Value="@(_categoryName ?? Product.CategoryNodeId?.ToString() ?? "-")"
                          Variant="Variant.Outlined"
                          ReadOnly="true"
                          Style="flex:1" />
            <MudButton Variant="Variant.Outlined" Disabled="!IsEditMode" OnClick="@(() => OpenPicker(ProductClassificationType.Category))">
                @TranslationService.GetTranslation("common.select","Seleziona")
            </MudButton>
            <MudIconButton Icon="@Icons.Material.Outlined.Clear" Disabled="!IsEditMode || Product.CategoryNodeId == null" OnClick="@ClearCategory" />
        </div>
    </MudItem>

    <!-- Family picker -->
    <MudItem xs="12" md="4">
        <MudText Typo="Typo.caption" Class="mb-1">@TranslationService.GetTranslation("product.familyLabel","Famiglia")</MudText>
        <div class="d-flex gap-2">
            <MudTextField Value="@(_familyName ?? Product.FamilyNodeId?.ToString() ?? "-")"
                          Variant="Variant.Outlined"
                          ReadOnly="true"
                          Style="flex:1" />
            <MudButton Variant="Variant.Outlined" Disabled="!IsEditMode" OnClick="@(() => OpenPicker(ProductClassificationType.Family))">
                @TranslationService.GetTranslation("common.select","Seleziona")
            </MudButton>
            <MudIconButton Icon="@Icons.Material.Outlined.Clear" Disabled="!IsEditMode || Product.FamilyNodeId == null" OnClick="@ClearFamily" />
        </div>
    </MudItem>

    <!-- MerchandiseGroup picker -->
    <MudItem xs="12" md="4">
        <MudText Typo="Typo.caption" Class="mb-1">@TranslationService.GetTranslation("product.groupLabel","Gruppo")</MudText>
        <div class="d-flex gap-2">
            <MudTextField Value="@(_groupName ?? Product.GroupNodeId?.ToString() ?? "-")"
                          Variant="Variant.Outlined"
                          ReadOnly="true"
                          Style="flex:1" />
            <MudButton Variant="Variant.Outlined" Disabled="!IsEditMode" OnClick="@(() => OpenPicker(ProductClassificationType.MerchandiseGroup))">
                @TranslationService.GetTranslation("common.select","Seleziona")
            </MudButton>
            <MudIconButton Icon="@Icons.Material.Outlined.Clear" Disabled="!IsEditMode || Product.GroupNodeId == null" OnClick="@ClearGroup" />
        </div>
    </MudItem>
</MudGrid>

@code {
    [Parameter, EditorRequired]
    public ProductDto Product { get; set; } = default!;

    [Parameter]
    public bool IsEditMode { get; set; }

    [Parameter]
    public EventCallback OnProductUpdated { get; set; }

    private IEnumerable<BrandDto>? _brands;
    private IEnumerable<ModelDto>? _models;
    private IEnumerable<UMDto>? _unitsOfMeasure;

    // friendly names for currently selected classification nodes
    private string? _categoryName;
    private string? _familyName;
    private string? _groupName;

    // flags to handle parameter-driven loading
    private bool _lookupsLoaded = false;
    private Guid? _currentBrandId;

    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        // refresh names for selected nodes
        await LoadSelectedNodeNamesAsync();

        if (!_lookupsLoaded)
        {
            await LoadDataAsync();
        }
        else if (!Nullable.Equals(_currentBrandId, Product?.BrandId))
        {
            _currentBrandId = Product?.BrandId;
            await RefreshModelsForBrandAsync();
        }
    }

    private async Task LoadDataAsync()
    {
        try
        {
            try
            {
                var brandsResult = await BrandService.GetBrandsAsync(1, 100);
                _brands = brandsResult?.Items ?? Enumerable.Empty<BrandDto>();
            }
            catch (Exception ex)
            {
                Logger.LogWarning(ex, "Failed to load brands");
                _brands = Enumerable.Empty<BrandDto>();
                Snackbar.Add(TranslationService.GetTranslation("product.loadBrandsError", "Errore nel caricamento dei marchi"), Severity.Warning);
            }

            try
            {
                if (Product?.BrandId != null)
                {
                    var modelsByBrand = await ModelService.GetModelsByBrandIdAsync(Product.BrandId.Value, 1, 100);
                    _models = modelsByBrand?.Items ?? Enumerable.Empty<ModelDto>();
                    _currentBrandId = Product.BrandId;
                }
                else
                {
                    var modelsResult = await ModelService.GetModelsAsync(1, 100);
                    _models = modelsResult?.Items ?? Enumerable.Empty<ModelDto>();
                    _currentBrandId = null;
                }
            }
            catch (Exception ex)
            {
                Logger.LogWarning(ex, "Failed to load models");
                _models = Enumerable.Empty<ModelDto>();
                Snackbar.Add(TranslationService.GetTranslation("product.loadModelsError", "Errore nel caricamento dei modelli"), Severity.Warning);
            }

            try
            {
                var umsResult = await UMService.GetUMsAsync(1, 100);
                _unitsOfMeasure = umsResult?.Items ?? Enumerable.Empty<UMDto>();
            }
            catch (Exception ex)
            {
                Logger.LogWarning(ex, "Failed to load units of measure");
                _unitsOfMeasure = Enumerable.Empty<UMDto>();
                Snackbar.Add(TranslationService.GetTranslation("product.loadUMError", "Errore nel caricamento unità di misura"), Severity.Warning);
            }

            _lookupsLoaded = true;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Unexpected error loading classification lookups");
            Snackbar.Add(TranslationService.GetTranslation("product.loadLookupsError", "Errore caricamento dati classificazione"), Severity.Error);
        }
        finally
        {
            StateHasChanged();
        }
    }

    private async Task RefreshModelsForBrandAsync()
    {
        try
        {
            if (Product?.BrandId != null)
            {
                var modelsByBrand = await ModelService.GetModelsByBrandIdAsync(Product.BrandId.Value, 1, 100);
                _models = modelsByBrand?.Items ?? Enumerable.Empty<ModelDto>();
            }
            else
            {
                var modelsResult = await ModelService.GetModelsAsync(1, 100);
                _models = modelsResult?.Items ?? Enumerable.Empty<ModelDto>();
            }
        }
        catch (Exception ex)
        {
            Logger.LogWarning(ex, "Failed to refresh models for brand {BrandId}", Product?.BrandId);
            _models = Enumerable.Empty<ModelDto>();
            Snackbar.Add(TranslationService.GetTranslation("product.loadModelsError", "Errore nel caricamento dei modelli"), Severity.Warning);
        }
        finally
        {
            StateHasChanged();
        }
    }

    private async Task LoadSelectedNodeNamesAsync()
    {
        // Load readable names for currently selected classification GUIDs (if present)
        _categoryName = null;
        _familyName = null;
        _groupName = null;

        try
        {
            if (Product?.CategoryNodeId != null)
            {
                var n = await EntityManagementService.GetClassificationNodeAsync(Product.CategoryNodeId.Value);
                _categoryName = n?.Name;
            }
        }
        catch (Exception ex)
        {
            Logger.LogWarning(ex, "Failed to load category node name");
        }

        try
        {
            if (Product?.FamilyNodeId != null)
            {
                var n = await EntityManagementService.GetClassificationNodeAsync(Product.FamilyNodeId.Value);
                _familyName = n?.Name;
            }
        }
        catch (Exception ex)
        {
            Logger.LogWarning(ex, "Failed to load family node name");
        }

        try
        {
            if (Product?.GroupNodeId != null)
            {
                var n = await EntityManagementService.GetClassificationNodeAsync(Product.GroupNodeId.Value);
                _groupName = n?.Name;
            }
        }
        catch (Exception ex)
        {
            Logger.LogWarning(ex, "Failed to load group node name");
        }

        StateHasChanged();
    }

    private async Task OpenPicker(ProductClassificationType type)
    {
        try
        {
            var parameters = new DialogParameters
            {
                { "Type", type },
                {
                    "InitialSelectedId",
                    type == ProductClassificationType.Category ? Product.CategoryNodeId :
                    type == ProductClassificationType.Family ? Product.FamilyNodeId :
                    Product.GroupNodeId
                },
                { "Title", TranslationService.GetTranslation("classificationNode.selectFor", $"Seleziona {type}") }
            };

            var options = new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true };
            var dialog = DialogService.Show<EventForge.Client.Shared.Components.ClassificationNodePicker>("", parameters, options);
            var result = await dialog.Result;

            // MudBlazor's DialogResult exposes 'Canceled' (US spelling). Cast Data safely to avoid pattern-scope issues.
            if (!result.Canceled)
            {
                var selected = result.Data as ClassificationNodeDto;
                if (selected != null)
                {
                    switch (type)
                    {
                        case ProductClassificationType.Category:
                            Product.CategoryNodeId = selected.Id;
                            _categoryName = selected.Name;
                            break;
                        case ProductClassificationType.Family:
                            Product.FamilyNodeId = selected.Id;
                            _familyName = selected.Name;
                            break;
                        case ProductClassificationType.MerchandiseGroup:
                            Product.GroupNodeId = selected.Id;
                            _groupName = selected.Name;
                            break;
                    }

                    await NotifyUpdated();
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error opening classification picker");
            Snackbar.Add(TranslationService.GetTranslation("classificationNode.openPickerError", "Errore nell'apertura del selettore nodi"), Severity.Error);
        }
    }

    private async Task NotifyUpdated()
    {
        try
        {
            if (OnProductUpdated.HasDelegate)
                await OnProductUpdated.InvokeAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error invoking OnProductUpdated from ClassificationTab");
        }
    }

    private async Task OnBrandChanged()
    {
        try
        {
            if (Product?.BrandId == null)
            {
                _models = Enumerable.Empty<ModelDto>();
                Product.ModelId = null;
            }
            else
            {
                try
                {
                    var modelsByBrand = await ModelService.GetModelsByBrandIdAsync(Product.BrandId.Value, 1, 100);
                    _models = modelsByBrand?.Items ?? Enumerable.Empty<ModelDto>();
                    _currentBrandId = Product.BrandId;
                }
                catch (Exception ex)
                {
                    Logger.LogWarning(ex, "Failed to load models for brand {BrandId}", Product.BrandId);
                    _models = Enumerable.Empty<ModelDto>();
                    Snackbar.Add(TranslationService.GetTranslation("product.loadModelsByBrandError", "Errore caricamento modelli per il marchio selezionato"), Severity.Warning);
                }

                if (Product.ModelId.HasValue && !_models.Any(m => m.Id == Product.ModelId.Value))
                {
                    Product.ModelId = null;
                }
            }
        }
        finally
        {
            await NotifyUpdated();
            StateHasChanged();
        }
    }

    private void ClearCategory()
    {
        Product.CategoryNodeId = null;
        _categoryName = null;
        _ = NotifyUpdated();
    }

    private void ClearFamily()
    {
        Product.FamilyNodeId = null;
        _familyName = null;
        _ = NotifyUpdated();
    }

    private void ClearGroup()
    {
        Product.GroupNodeId = null;
        _groupName = null;
        _ = NotifyUpdated();
    }
}
