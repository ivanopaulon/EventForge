@using EventForge.DTOs.Products
@using EventForge.DTOs.UnitOfMeasures
@using EventForge.DTOs.Station
@using EventForge.Client.Services
@using MudBlazor
@inject ITranslationService TranslationService
@inject IBrandService BrandService
@inject IModelService ModelService
@inject IUMService UMService
@inject IEntityManagementService EntityManagementService
@inject ILogger<ClassificationTab> Logger
@inject ISnackbar Snackbar

<MudGrid>
    <MudItem xs="12">
        <MudText Typo="Typo.h6" Class="mb-3">
            <MudIcon Icon="@Icons.Material.Outlined.Category" Class="mr-2" />
            @TranslationService.GetTranslation("product.classificationInfo", "Classificazione")
        </MudText>
        <MudDivider Class="mb-4" />
    </MudItem>

    <MudItem xs="12" md="6">
        <MudSelect T="Guid?"
                   @bind-Value="Product.BrandId"
                   Label="@TranslationService.GetTranslation("field.brand", "Marchio")"
                   Variant="Variant.Outlined"
                   ReadOnly="@(!IsEditMode)"
                   Clearable="true"
                   @bind-Value:after="OnBrandChanged">
            @if (_brands != null)
            {
                @foreach (var brand in _brands)
                {
                    <MudSelectItem T="Guid?" Value="@((Guid?)brand.Id)">@brand.Name</MudSelectItem>
                }
            }
        </MudSelect>
    </MudItem>

    <MudItem xs="12" md="6">
        <MudSelect T="Guid?"
                   @bind-Value="Product.ModelId"
                   Label="@TranslationService.GetTranslation("field.model", "Modello")"
                   Variant="Variant.Outlined"
                   ReadOnly="@(!IsEditMode)"
                   Clearable="true"
                   @bind-Value:after="NotifyUpdated">
            @if (_models != null)
            {
                @foreach (var model in _models)
                {
                    <MudSelectItem T="Guid?" Value="@((Guid?)model.Id)">@model.Name</MudSelectItem>
                }
            }
        </MudSelect>
    </MudItem>

    <MudItem xs="12" md="6">
        <MudSelect T="Guid?"
                   @bind-Value="Product.UnitOfMeasureId"
                   Label="@TranslationService.GetTranslation("field.unitOfMeasure", "Unità di Misura")"
                   Variant="Variant.Outlined"
                   ReadOnly="@(!IsEditMode)"
                   Clearable="true"
                   @bind-Value:after="NotifyUpdated">
            @if (_unitsOfMeasure != null)
            {
                @foreach (var um in _unitsOfMeasure)
                {
                    <MudSelectItem T="Guid?" Value="@((Guid?)um.Id)">@um.Name (@um.Symbol)</MudSelectItem>
                }
            }
        </MudSelect>
    </MudItem>

    <MudItem xs="12" md="4">
        <MudTextField @bind-Value="_categoryText"
                      Label="@TranslationService.GetTranslation("product.category", "Categoria (GUID)")"
                      Variant="Variant.Outlined"
                      Immediate="true"
                      ReadOnly="@(!IsEditMode)"
                      @bind-Value:after="OnCategoryChanged" />
    </MudItem>

    <MudItem xs="12" md="4">
        <MudTextField @bind-Value="_familyText"
                      Label="@TranslationService.GetTranslation("product.family", "Famiglia (GUID)")"
                      Variant="Variant.Outlined"
                      Immediate="true"
                      ReadOnly="@(!IsEditMode)"
                      @bind-Value:after="OnFamilyChanged" />
    </MudItem>

    <MudItem xs="12" md="4">
        <MudTextField @bind-Value="_groupText"
                      Label="@TranslationService.GetTranslation("product.group", "Gruppo (GUID)")"
                      Variant="Variant.Outlined"
                      Immediate="true"
                      ReadOnly="@(!IsEditMode)"
                      @bind-Value:after="OnGroupChanged" />
    </MudItem>
</MudGrid>

@code {
    [Parameter, EditorRequired]
    public ProductDto Product { get; set; } = default!;

    [Parameter]
    public bool IsEditMode { get; set; }

    [Parameter]
    public EventCallback OnProductUpdated { get; set; }

    private IEnumerable<BrandDto>? _brands;
    private IEnumerable<ModelDto>? _models;
    private IEnumerable<UMDto>? _unitsOfMeasure;
    private IEnumerable<StationDto>? _stations;

    // local edit buffers for GUID text fields (to avoid binding to read-only computed props)
    private string? _categoryText;
    private string? _familyText;
    private string? _groupText;

    // flags to handle parameter-driven loading
    private bool _lookupsLoaded = false;
    private Guid? _currentBrandId;

    protected override async Task OnInitializedAsync()
    {
        // keep lightweight here; actual lookup load may depend on Product passed by parent
        // attempt to load lookups but OnParametersSetAsync will ensure models are synced to Product.BrandId
        await LoadDataAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        // populate local buffers from Product when parameters change
        if (Product != null)
        {
            _categoryText = Product.CategoryNodeId?.ToString();
            _familyText = Product.FamilyNodeId?.ToString();
            _groupText = Product.GroupNodeId?.ToString();
        }

        // If initial lookups not loaded yet, LoadDataAsync already called from OnInitializedAsync,
        // but parent may have provided Product after initialization; ensure models reflect current brand.
        if (!_lookupsLoaded)
        {
            // ensure lookups are loaded (brands, ums, models possibly filtered)
            await LoadDataAsync();
        }
        else
        {
            // if Product.BrandId changed after lookups were loaded, refresh models accordingly
            if (!Nullable.Equals(_currentBrandId, Product?.BrandId))
            {
                _currentBrandId = Product?.BrandId;
                try
                {
                    if (Product?.BrandId != null)
                    {
                        var modelsByBrand = await ModelService.GetModelsByBrandIdAsync(Product.BrandId.Value, 1, 100);
                        _models = modelsByBrand?.Items ?? Enumerable.Empty<ModelDto>();
                    }
                    else
                    {
                        var modelsResult = await ModelService.GetModelsAsync(1, 100);
                        _models = modelsResult?.Items ?? Enumerable.Empty<ModelDto>();
                    }
                }
                catch (Exception ex)
                {
                    Logger.LogWarning(ex, "Failed to refresh models for brand {BrandId} in OnParametersSetAsync", Product?.BrandId);
                    _models = Enumerable.Empty<ModelDto>();
                    Snackbar.Add(TranslationService.GetTranslation("product.loadModelsError", "Errore nel caricamento dei modelli"), Severity.Warning);
                }
                StateHasChanged();
            }
        }
    }

    private async Task LoadDataAsync()
    {
        try
        {
            // Load required lookups defensively: each call handled independently so one failure doesn't prevent others
            try
            {
                var brandsResult = await BrandService.GetBrandsAsync(1, 100);
                _brands = brandsResult?.Items ?? Enumerable.Empty<BrandDto>();
            }
            catch (Exception ex)
            {
                Logger.LogWarning(ex, "Failed to load brands");
                _brands = Enumerable.Empty<BrandDto>();
                Snackbar.Add(TranslationService.GetTranslation("product.loadBrandsError", "Errore nel caricamento dei marchi"), Severity.Warning);
            }

            try
            {
                // if product already has a brand, prefer loading models filtered by brand to reduce payload and be accurate
                if (Product?.BrandId != null)
                {
                    var modelsByBrand = await ModelService.GetModelsByBrandIdAsync(Product.BrandId.Value, 1, 100);
                    _models = modelsByBrand?.Items ?? Enumerable.Empty<ModelDto>();
                    _currentBrandId = Product.BrandId;
                }
                else
                {
                    var modelsResult = await ModelService.GetModelsAsync(1, 100);
                    _models = modelsResult?.Items ?? Enumerable.Empty<ModelDto>();
                    _currentBrandId = null;
                }
            }
            catch (Exception ex)
            {
                Logger.LogWarning(ex, "Failed to load models");
                _models = Enumerable.Empty<ModelDto>();
                Snackbar.Add(TranslationService.GetTranslation("product.loadModelsError", "Errore nel caricamento dei modelli"), Severity.Warning);
            }

            try
            {
                var umsResult = await UMService.GetUMsAsync(1, 100);
                _unitsOfMeasure = umsResult?.Items ?? Enumerable.Empty<UMDto>();
            }
            catch (Exception ex)
            {
                Logger.LogWarning(ex, "Failed to load units of measure");
                _unitsOfMeasure = Enumerable.Empty<UMDto>();
                Snackbar.Add(TranslationService.GetTranslation("product.loadUMError", "Errore nel caricamento unità di misura"), Severity.Warning);
            }

            _lookupsLoaded = true;
        }
        catch (Exception ex)
        {
            // generic fallback - should not be reached because inner catches handle expected failures
            Logger.LogError(ex, "Unexpected error loading classification lookups");
            Snackbar.Add(TranslationService.GetTranslation("product.loadLookupsError", "Errore caricamento dati classificazione"), Severity.Error);
        }
        finally
        {
            StateHasChanged();
        }
    }

    private async Task OnBrandChanged()
    {
        try
        {
            // When brand changes, reload models for the selected brand.
            if (Product?.BrandId == null)
            {
                _models = Enumerable.Empty<ModelDto>();
                Product.ModelId = null;
            }
            else
            {
                try
                {
                    var modelsByBrand = await ModelService.GetModelsByBrandIdAsync(Product.BrandId.Value, 1, 100);
                    _models = modelsByBrand?.Items ?? Enumerable.Empty<ModelDto>();
                    _currentBrandId = Product.BrandId;
                }
                catch (Exception ex)
                {
                    Logger.LogWarning(ex, "Failed to load models for brand {BrandId}", Product.BrandId);
                    _models = Enumerable.Empty<ModelDto>();
                    Snackbar.Add(TranslationService.GetTranslation("product.loadModelsByBrandError", "Errore caricamento modelli per il marchio selezionato"), Severity.Warning);
                }

                // If selected model doesn't belong to new brand, clear it
                if (Product.ModelId.HasValue && !_models.Any(m => m.Id == Product.ModelId.Value))
                {
                    Product.ModelId = null;
                }
            }
        }
        finally
        {
            // notify parent that product has changed (brand/model may have been cleared)
            await NotifyUpdated();
            StateHasChanged();
        }
    }

    private async Task OnCategoryChanged()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(_categoryText))
                Product.CategoryNodeId = null;
            else if (Guid.TryParse(_categoryText, out var g))
                Product.CategoryNodeId = g;
            else
            {
                // invalid GUID — keep previous value and optionally inform user
                Logger.LogWarning("Invalid GUID entered for Category: {Value}", _categoryText);
                Product.CategoryNodeId = null;
                Snackbar.Add(TranslationService.GetTranslation("product.invalidGuid", "GUID non valido"), Severity.Warning);
            }

            if (OnProductUpdated.HasDelegate)
                await OnProductUpdated.InvokeAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error in OnCategoryChanged");
        }
    }

    private async Task OnFamilyChanged()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(_familyText))
                Product.FamilyNodeId = null;
            else if (Guid.TryParse(_familyText, out var g))
                Product.FamilyNodeId = g;
            else
            {
                Logger.LogWarning("Invalid GUID entered for Family: {Value}", _familyText);
                Product.FamilyNodeId = null;
                Snackbar.Add(TranslationService.GetTranslation("product.invalidGuid", "GUID non valido"), Severity.Warning);
            }

            if (OnProductUpdated.HasDelegate)
                await OnProductUpdated.InvokeAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error in OnFamilyChanged");
        }
    }

    private async Task OnGroupChanged()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(_groupText))
                Product.GroupNodeId = null;
            else if (Guid.TryParse(_groupText, out var g))
                Product.GroupNodeId = g;
            else
            {
                Logger.LogWarning("Invalid GUID entered for Group: {Value}", _groupText);
                Product.GroupNodeId = null;
                Snackbar.Add(TranslationService.GetTranslation("product.invalidGuid", "GUID non valido"), Severity.Warning);
            }

            if (OnProductUpdated.HasDelegate)
                await OnProductUpdated.InvokeAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error in OnGroupChanged");
        }
    }

    private async Task NotifyUpdated()
    {
        try
        {
            if (OnProductUpdated.HasDelegate)
                await OnProductUpdated.InvokeAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error invoking OnProductUpdated from ClassificationTab");
        }
    }
}
