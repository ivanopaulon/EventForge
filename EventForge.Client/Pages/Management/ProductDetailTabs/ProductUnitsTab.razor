@using EventForge.DTOs.Products
@using EventForge.DTOs.UnitOfMeasures
@using EventForge.Client.Services
@using EventForge.Client.Shared.Components
@inject ITranslationService TranslationService
@inject IProductService ProductService
@inject IUMService UMService
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject ILogger<ProductUnitsTab> Logger

<MudGrid>
    <MudItem xs="12" Class="d-flex justify-space-between align-center mb-2">
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Outlined.Straighten" Class="mr-2" />
            @TranslationService.GetTranslation("product.alternativeUnits", "Unità Alternative")
            <MudChip T="string" Size="Size.Small" Class="ml-2">@(_productUnits?.Count() ?? 0)</MudChip>
        </MudText>
        <MudButton Variant="Variant.Filled" 
                   Color="Color.Primary" 
                   StartIcon="@Icons.Material.Outlined.Add"
                   OnClick="@OpenCreateDialog"
                   Size="Size.Small">
            @TranslationService.GetTranslation("common.add", "Aggiungi")
        </MudButton>
    </MudItem>

    <MudItem xs="12">
        @if (_isLoading)
        {
            <MudProgressLinear Color="Color.Primary" Indeterminate="true" />
        }
        else if (_productUnits == null || !_productUnits.Any())
        {
            <MudAlert Severity="Severity.Info">
                @TranslationService.GetTranslation("product.noAlternativeUnits", "Nessuna unità alternativa configurata")
            </MudAlert>
        }
        else
        {
            <MudTable Items="_productUnits" Hover="true" Striped="true" Dense="true">
                <HeaderContent>
                    <MudTh>@TranslationService.GetTranslation("field.unitType", "Tipo Unità")</MudTh>
                    <MudTh>@TranslationService.GetTranslation("field.unitOfMeasure", "Unità di Misura")</MudTh>
                    <MudTh>@TranslationService.GetTranslation("field.conversionFactor", "Fattore di Conversione")</MudTh>
                    <MudTh>@TranslationService.GetTranslation("field.description", "Descrizione")</MudTh>
                    <MudTh>@TranslationService.GetTranslation("field.status", "Stato")</MudTh>
                    <MudTh Style="text-align: right;">@TranslationService.GetTranslation("field.actions", "Azioni")</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="@TranslationService.GetTranslation("field.unitType", "Tipo Unità")">@context.UnitType</MudTd>
                    <MudTd DataLabel="@TranslationService.GetTranslation("field.unitOfMeasure", "Unità di Misura")">@context.UnitOfMeasureId</MudTd>
                    <MudTd DataLabel="@TranslationService.GetTranslation("field.conversionFactor", "Fattore di Conversione")">@context.ConversionFactor.ToString("N3")</MudTd>
                    <MudTd DataLabel="@TranslationService.GetTranslation("field.description", "Descrizione")">@context.Description</MudTd>
                    <MudTd DataLabel="@TranslationService.GetTranslation("field.status", "Stato")">@context.Status</MudTd>
                    <MudTd DataLabel="@TranslationService.GetTranslation("field.actions", "Azioni")" Style="text-align: right;">
                        <MudIconButton Icon="@Icons.Material.Filled.Edit" 
                                       Size="Size.Small" 
                                       Color="Color.Primary"
                                       OnClick="@(() => OpenEditDialog(context))" />
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" 
                                       Size="Size.Small" 
                                       Color="Color.Error"
                                       OnClick="@(() => DeleteUnitAsync(context))" />
                    </MudTd>
                </RowTemplate>
            </MudTable>
        }
    </MudItem>
</MudGrid>

@code {
    [Parameter, EditorRequired]
    public Guid ProductId { get; set; }

    // Notifications for parent
    [Parameter] public EventCallback OnProductUpdated { get; set; }
    [Parameter] public EventCallback OnProductUpdatedPersisted { get; set; }

    private IEnumerable<ProductUnitDto>? _productUnits;
    private bool _isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadUnitsAsync();
    }

    private async Task LoadUnitsAsync()
    {
        _isLoading = true;
        try
        {
            _productUnits = await ProductService.GetProductUnitsAsync(ProductId);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading product units for product {ProductId}", ProductId);
            Snackbar.Add(TranslationService.GetTranslation("product.loadUnitsError", "Errore nel caricamento delle unità"), Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task OpenCreateDialog()
    {
        // Load unit of measures for the dialog
        var unitOfMeasuresResult = await UMService.GetUMsAsync(page: 1, pageSize: 100);
        var unitOfMeasures = unitOfMeasuresResult?.Items ?? new List<UMDto>();
        
        var parameters = new DialogParameters
        {
            { "ProductId", ProductId },
            { "UnitOfMeasures", unitOfMeasures },
            { "ExistingUnits", _productUnits ?? new List<ProductUnitDto>() }
        };

        var options = new DialogOptions
        {
            MaxWidth = MaxWidth.Medium,
            FullWidth = true,
            CloseButton = true
        };

        var dialog = await DialogService.ShowAsync<AddProductUnitDialog>(
            TranslationService.GetTranslation("product.addUnit", "Aggiungi Unità Alternativa"),
            parameters,
            options);

        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await LoadUnitsAsync();
            await NotifyPersisted();
        }
    }

    private async Task OpenEditDialog(ProductUnitDto unit)
    {
        // Load unit of measures for the dialog
        var unitOfMeasuresResult = await UMService.GetUMsAsync(page: 1, pageSize: 100);
        var unitOfMeasures = unitOfMeasuresResult?.Items ?? new List<UMDto>();
        
        var parameters = new DialogParameters
        {
            { "ProductUnit", unit },
            { "UnitOfMeasures", unitOfMeasures },
            { "ExistingUnits", _productUnits ?? new List<ProductUnitDto>() }
        };

        var options = new DialogOptions
        {
            MaxWidth = MaxWidth.Medium,
            FullWidth = true,
            CloseButton = true
        };

        var dialog = await DialogService.ShowAsync<EditProductUnitDialog>(
            TranslationService.GetTranslation("product.editUnit", "Modifica Unità Alternativa"),
            parameters,
            options);

        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await LoadUnitsAsync();
            await NotifyPersisted();
        }
    }

    private async Task DeleteUnitAsync(ProductUnitDto unit)
    {
        var confirmed = await DialogService.ShowMessageBox(
            TranslationService.GetTranslation("common.confirm", "Conferma"),
            TranslationService.GetTranslation("product.confirmDeleteUnit", "Sei sicuro di voler eliminare questa unità?"),
            yesText: TranslationService.GetTranslation("common.yes", "Sì"),
            noText: TranslationService.GetTranslation("common.no", "No"));

        if (confirmed == true)
        {
            try
            {
                await ProductService.DeleteProductUnitAsync(unit.Id);
                Snackbar.Add(TranslationService.GetTranslation("product.unitDeleted", "Unità eliminata con successo"), Severity.Success);
                await LoadUnitsAsync();
                await NotifyPersisted();
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error deleting product unit {UnitId}", unit.Id);
                Snackbar.Add(TranslationService.GetTranslation("product.deleteUnitError", "Errore nell'eliminazione dell'unità"), Severity.Error);
            }
        }
    }

    private async Task NotifyUpdated()
    {
        try
        {
            if (OnProductUpdated.HasDelegate)
                await OnProductUpdated.InvokeAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error invoking OnProductUpdated from ProductUnitsTab");
        }
    }

    private async Task NotifyPersisted()
    {
        try
        {
            if (OnProductUpdatedPersisted.HasDelegate)
                await OnProductUpdatedPersisted.InvokeAsync();
            else if (OnProductUpdated.HasDelegate)
                await OnProductUpdated.InvokeAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error invoking OnProductUpdatedPersisted from ProductUnitsTab");
        }
    }
}
