@page "/warehouse/inventory-procedure"
@using Microsoft.AspNetCore.Authorization
@using EventForge.DTOs.Common
@using EventForge.DTOs.Warehouse
@using EventForge.DTOs.Products
@using EventForge.Client.Shared.Components
@attribute [Authorize(Roles = "SuperAdmin,Admin,Manager,Operator")]
@inject IProductService ProductService
@inject IInventoryService InventoryService
@inject IStorageLocationService StorageLocationService
@inject IWarehouseService WarehouseService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject ITranslationService TranslationService
@inject ILogger<InventoryProcedure> Logger
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<PageTitle>@TranslationService.GetTranslation("warehouse.inventoryProcedure", "Procedura Inventario")</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <MudGrid Class="mb-4">
        <MudItem xs="12" md="8">
            <MudText Typo="Typo.h4">
                <MudIcon Icon="@Icons.Material.Outlined.Inventory" Class="mr-2" Size="Size.Medium" />
                @TranslationService.GetTranslation("warehouse.inventoryProcedure", "Procedura Inventario")
            </MudText>
        </MudItem>
        <MudItem xs="12" md="4">
            <MudStack Row="true" Justify="Justify.FlexEnd">
                <MudButton StartIcon="@Icons.Material.Outlined.List" 
                           Color="Color.Default" 
                           Variant="Variant.Outlined"
                           OnClick="@(() => NavigationManager.NavigateTo("/warehouse/inventory-list"))">
                    @TranslationService.GetTranslation("warehouse.viewInventory", "Visualizza Inventario")
                </MudButton>
            </MudStack>
        </MudItem>
    </MudGrid>

    @if (_isLoading)
    {
        <MudProgressLinear Indeterminate="true" Class="mb-4" />
    }

    <!-- Session Status Banner -->
    @if (_currentDocument != null)
    {
        <MudAlert Severity="Severity.Info" Class="mb-4" Variant="Variant.Filled">
            <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                <div>
                    <MudText Typo="Typo.subtitle1" Style="font-weight: 600;">
                        @TranslationService.GetTranslation("warehouse.inventorySessionActive", "Sessione di Inventario Attiva")
                    </MudText>
                    <MudText Typo="Typo.body2">
                        @TranslationService.GetTranslation("warehouse.documentNumber", "Documento") #@_currentDocument.Number - 
                        @_currentDocument.TotalItems @TranslationService.GetTranslation("warehouse.itemsCounted", "articoli contati")
                    </MudText>
                </div>
                <MudStack Row="true" Spacing="2">
                    <MudButton StartIcon="@Icons.Material.Outlined.PlaylistAddCheck" 
                               Color="Color.Success" 
                               Variant="Variant.Filled"
                               OnClick="@FinalizeInventory"
                               Disabled="@(_currentDocument.TotalItems == 0)">
                        @TranslationService.GetTranslation("warehouse.finalizeInventory", "Finalizza")
                    </MudButton>
                    <MudButton StartIcon="@Icons.Material.Outlined.Cancel" 
                               Color="Color.Default" 
                               Variant="Variant.Outlined"
                               OnClick="@CancelInventorySession">
                        @TranslationService.GetTranslation("common.cancel", "Annulla")
                    </MudButton>
                </MudStack>
            </MudStack>
        </MudAlert>
    }

    <!-- Storage Facility Selection -->
    <MudPaper Elevation="2" Class="pa-4 mb-4">
        <MudText Typo="Typo.h6" Class="mb-3">
            <MudIcon Icon="@Icons.Material.Outlined.Warehouse" Class="mr-2" />
            @TranslationService.GetTranslation("warehouse.selectStorageFacility", "Seleziona Magazzino")
        </MudText>
        
        <MudGrid Spacing="3">
            <MudItem xs="12" md="8">
                <MudSelect T="Guid?"
                           @bind-Value="_selectedStorageFacilityId"
                           Label="@TranslationService.GetTranslation("warehouse.storageFacility", "Magazzino")"
                           Variant="Variant.Outlined"
                           Required="true"
                           Disabled="@(_currentDocument != null)"
                           Adornment="Adornment.Start"
                           AdornmentIcon="@Icons.Material.Outlined.Business">
                    @if (_storageFacilities != null)
                    {
                        @foreach (var facility in _storageFacilities)
                        {
                            <MudSelectItem Value="@((Guid?)facility.Id)">@facility.Name - @facility.Code</MudSelectItem>
                        }
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12" md="4">
                @if (_currentDocument == null)
                {
                    <MudButton StartIcon="@Icons.Material.Outlined.PlayArrow" 
                               Color="Color.Primary" 
                               Variant="Variant.Filled"
                               FullWidth="true"
                               OnClick="@StartInventorySession"
                               Disabled="@(!_selectedStorageFacilityId.HasValue)">
                        @TranslationService.GetTranslation("warehouse.startSession", "Avvia Sessione")
                    </MudButton>
                }
                else
                {
                    <MudChip T="string" Color="Color.Success" Icon="@Icons.Material.Filled.CheckCircle" Size="Size.Large">
                        @TranslationService.GetTranslation("warehouse.sessionActive", "Sessione Attiva")
                    </MudChip>
                }
            </MudItem>
        </MudGrid>
    </MudPaper>

    <!-- Barcode Scanner Section -->
    @if (_currentDocument != null)
    {
        <MudPaper Elevation="2" Class="pa-4 mb-4">
            <MudText Typo="Typo.h6" Class="mb-3">
                <MudIcon Icon="@Icons.Material.Outlined.QrCodeScanner" Class="mr-2" />
                @TranslationService.GetTranslation("warehouse.scanBarcode", "Scansiona Codice a Barre")
            </MudText>

            <MudGrid Spacing="3">
                <MudItem xs="12" md="8">
                    <MudTextField @bind-Value="_scannedBarcode"
                                  Label="@TranslationService.GetTranslation("warehouse.barcodeInput", "Codice a Barre")"
                                  Variant="Variant.Outlined"
                                  @onkeydown="@OnBarcodeKeyDown"
                                  @ref="_barcodeInput"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Outlined.QrCode"
                                  HelperText="@TranslationService.GetTranslation("warehouse.scanOrTypeBarcode", "Scansiona o digita il codice a barre e premi Invio")" />
                </MudItem>
                <MudItem xs="12" md="4">
                    <MudButton StartIcon="@Icons.Material.Outlined.Search"
                               Color="Color.Primary"
                               Variant="Variant.Filled"
                               FullWidth="true"
                               OnClick="@SearchBarcode"
                               Disabled="@string.IsNullOrWhiteSpace(_scannedBarcode)">
                        @TranslationService.GetTranslation("common.search", "Cerca")
                    </MudButton>
                </MudItem>
            </MudGrid>
        </MudPaper>

        <!-- Product Found/Not Found Section -->
        @if (_productSearched && _currentProduct != null)
        {
            <!-- Product Information -->
            <MudPaper Elevation="2" Class="pa-4 mb-4">
                <MudText Typo="Typo.h6" Class="mb-3">
                    <MudIcon Icon="@Icons.Material.Outlined.Inventory2" Class="mr-2" />
                    @TranslationService.GetTranslation("warehouse.productInfo", "Informazioni Prodotto")
                </MudText>

                <MudGrid Spacing="2">
                    <MudItem xs="12" md="6">
                        <MudText Typo="Typo.body2" Color="Color.Secondary">@TranslationService.GetTranslation("warehouse.productName", "Nome Prodotto")</MudText>
                        <MudText Typo="Typo.body1" Style="font-weight: 600;">@_currentProduct.Name</MudText>
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <MudText Typo="Typo.body2" Color="Color.Secondary">@TranslationService.GetTranslation("warehouse.productCode", "Codice Prodotto")</MudText>
                        <MudText Typo="Typo.body1" Style="font-weight: 600;">@_currentProduct.Code</MudText>
                    </MudItem>
                    <MudItem xs="12">
                        <MudText Typo="Typo.body2" Color="Color.Secondary">@TranslationService.GetTranslation("warehouse.description", "Descrizione")</MudText>
                        <MudText Typo="Typo.body1">@_currentProduct.Description</MudText>
                    </MudItem>
                </MudGrid>
            </MudPaper>

            <!-- Inventory Entry Form -->
            <MudPaper Elevation="2" Class="pa-4 mb-4">
                <MudText Typo="Typo.h6" Class="mb-3">
                    <MudIcon Icon="@Icons.Material.Outlined.PostAdd" Class="mr-2" />
                    @TranslationService.GetTranslation("warehouse.inventoryEntry", "Inserimento Inventario")
                </MudText>

                <MudGrid Spacing="3">
                    <MudItem xs="12" md="6">
                        <MudSelect T="Guid?"
                                   @bind-Value="_selectedLocationId"
                                   Label="@TranslationService.GetTranslation("warehouse.storageLocation", "Ubicazione")"
                                   Variant="Variant.Outlined"
                                   Required="true">
                            @if (_locations != null)
                            {
                                @foreach (var location in _locations)
                                {
                                    <MudSelectItem Value="@((Guid?)location.Id)">@location.Code - @location.Description</MudSelectItem>
                                }
                            }
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <MudNumericField @bind-Value="_quantity"
                                        Label="@TranslationService.GetTranslation("warehouse.quantity", "Quantità")"
                                        Variant="Variant.Outlined"
                                        Min="0"
                                        Required="true"
                                        @onkeydown="@OnQuantityKeyDown"
                                        Adornment="Adornment.Start"
                                        AdornmentIcon="@Icons.Material.Outlined.Numbers" />
                    </MudItem>
                    <MudItem xs="12">
                        <MudTextField @bind-Value="_notes"
                                     Label="@TranslationService.GetTranslation("warehouse.notes", "Note")"
                                     Variant="Variant.Outlined"
                                     Lines="2"
                                     MaxLength="200" />
                    </MudItem>
                    <MudItem xs="12">
                        <MudStack Row="true" Spacing="2">
                            <MudButton StartIcon="@Icons.Material.Outlined.Add"
                                      Color="Color.Success"
                                      Variant="Variant.Filled"
                                      OnClick="@AddInventoryRow"
                                      Disabled="@(!_selectedLocationId.HasValue || _quantity < 0)">
                                @TranslationService.GetTranslation("warehouse.addToInventory", "Aggiungi al Documento")
                            </MudButton>
                            <MudButton StartIcon="@Icons.Material.Outlined.Clear"
                                      Color="Color.Default"
                                      Variant="Variant.Outlined"
                                      OnClick="@ClearProductForm">
                                @TranslationService.GetTranslation("common.clear", "Pulisci")
                            </MudButton>
                        </MudStack>
                    </MudItem>
                </MudGrid>
            </MudPaper>
        }

        <!-- Inventory Document Rows -->
        @if (_currentDocument?.Rows?.Any() == true)
        {
            <MudPaper Elevation="2" Class="pa-4">
                <MudText Typo="Typo.h6" Class="mb-3">
                    <MudIcon Icon="@Icons.Material.Outlined.ListAlt" Class="mr-2" />
                    @TranslationService.GetTranslation("warehouse.inventoryItems", "Articoli nel Documento di Inventario")
                    <MudChip T="string" Size="Size.Small" Color="Color.Primary" Class="ml-2">@_currentDocument.TotalItems</MudChip>
                </MudText>

                <MudTable Items="_currentDocument.Rows" Hover="true" Dense="true" Striped="true">
                    <HeaderContent>
                        <MudTh>@TranslationService.GetTranslation("warehouse.product", "Prodotto")</MudTh>
                        <MudTh>@TranslationService.GetTranslation("warehouse.location", "Ubicazione")</MudTh>
                        <MudTh>@TranslationService.GetTranslation("warehouse.quantity", "Quantità")</MudTh>
                        <MudTh>@TranslationService.GetTranslation("warehouse.adjustment", "Aggiustamento")</MudTh>
                        <MudTh>@TranslationService.GetTranslation("warehouse.time", "Ora")</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Product">
                            <MudText Typo="Typo.body2" Style="font-weight: 600;">@context.ProductName</MudText>
                            <MudText Typo="Typo.caption" Color="Color.Secondary">@context.ProductCode</MudText>
                        </MudTd>
                        <MudTd DataLabel="Location">@context.LocationName</MudTd>
                        <MudTd DataLabel="Quantity">
                            <MudChip T="string" Size="Size.Small" Color="Color.Info">@context.Quantity</MudChip>
                        </MudTd>
                        <MudTd DataLabel="Adjustment">
                            @if (context.AdjustmentQuantity.HasValue)
                            {
                                <MudChip T="string" Size="Size.Small" 
                                         Color="@(context.AdjustmentQuantity > 0 ? Color.Success : context.AdjustmentQuantity < 0 ? Color.Warning : Color.Default)">
                                    @(context.AdjustmentQuantity > 0 ? "+" : "")@context.AdjustmentQuantity
                                </MudChip>
                            }
                        </MudTd>
                        <MudTd DataLabel="Time">@context.CreatedAt.ToLocalTime().ToString("HH:mm:ss")</MudTd>
                    </RowTemplate>
                </MudTable>
            </MudPaper>
        }
    }
    else
    {
        <MudAlert Severity="Severity.Normal" Variant="Variant.Outlined" Class="mt-4">
            <MudText Typo="Typo.body1">
                @TranslationService.GetTranslation("warehouse.noSessionActive", "Nessuna sessione di inventario attiva. Seleziona un magazzino e avvia una nuova sessione per iniziare.")
            </MudText>
        </MudAlert>
    }
</MudContainer>

<ProductDrawer @bind-IsOpen="_productDrawerOpen"
               @bind-Mode="_productDrawerMode"
               OriginalProduct="_productForDrawer"
               AllowEdit="false"
               OnProductCreated="@HandleProductCreated" />

@code {
    private bool _isLoading = false;
    private string _scannedBarcode = string.Empty;
    private bool _productSearched = false;
    private ProductDto? _currentProduct;
    private List<StorageLocationDto> _locations = new();
    private List<StorageFacilityDto> _storageFacilities = new();
    private Guid? _selectedLocationId;
    private Guid? _selectedStorageFacilityId;
    private decimal _quantity = 0;
    private string _notes = string.Empty;
    private InventoryDocumentDto? _currentDocument = null;
    private MudTextField<string>? _barcodeInput;
    
    // ProductDrawer related fields
    private bool _productDrawerOpen = false;
    private EntityDrawerMode _productDrawerMode = EntityDrawerMode.Create;
    private ProductDto? _productForDrawer;

    protected override async Task OnInitializedAsync()
    {
        await Task.WhenAll(
            LoadStorageFacilities(),
            LoadLocations()
        );
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && _barcodeInput != null && _currentDocument != null)
        {
            await _barcodeInput.FocusAsync();
        }
    }

    private async Task LoadStorageFacilities()
    {
        _isLoading = true;
        try
        {
            var result = await WarehouseService.GetStorageFacilitiesAsync(1, 100);
            if (result?.Items != null)
            {
                _storageFacilities = result.Items.ToList();
                
                // Auto-select the first facility if only one exists
                if (_storageFacilities.Count == 1)
                {
                    _selectedStorageFacilityId = _storageFacilities[0].Id;
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading storage facilities");
            Snackbar.Add(TranslationService.GetTranslation("warehouse.loadFacilitiesError", "Errore nel caricamento dei magazzini"), Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task LoadLocations()
    {
        _isLoading = true;
        try
        {
            var result = await StorageLocationService.GetStorageLocationsAsync(1, 100);
            if (result?.Items != null)
            {
                _locations = result.Items.ToList();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading storage locations");
            Snackbar.Add(TranslationService.GetTranslation("warehouse.loadLocationsError", "Errore nel caricamento ubicazioni"), Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task StartInventorySession()
    {
        if (!_selectedStorageFacilityId.HasValue)
            return;

        _isLoading = true;
        try
        {
            var createDto = new CreateInventoryDocumentDto
            {
                WarehouseId = _selectedStorageFacilityId,
                InventoryDate = DateTime.UtcNow,
                Notes = $"Inventario del {DateTime.Now:dd/MM/yyyy HH:mm}"
            };

            _currentDocument = await InventoryService.StartInventoryDocumentAsync(createDto);

            if (_currentDocument != null)
            {
                Snackbar.Add(TranslationService.GetTranslation("warehouse.sessionStarted", "Sessione di inventario avviata"), Severity.Success);
                
                // Focus on barcode input after session start
                if (_barcodeInput != null)
                {
                    await InvokeAsync(async () => await _barcodeInput.FocusAsync());
                }
            }
            else
            {
                Snackbar.Add(TranslationService.GetTranslation("warehouse.sessionStartError", "Errore nell'avvio della sessione"), Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error starting inventory session");
            Snackbar.Add(TranslationService.GetTranslation("warehouse.sessionStartError", "Errore nell'avvio della sessione"), Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task OnBarcodeKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(_scannedBarcode))
        {
            await SearchBarcode();
        }
    }

    private async Task OnQuantityKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && _selectedLocationId.HasValue && _quantity >= 0)
        {
            await AddInventoryRow();
        }
    }

    private async Task SearchBarcode()
    {
        if (string.IsNullOrWhiteSpace(_scannedBarcode))
            return;

        _isLoading = true;
        _productSearched = false;
        _currentProduct = null;

        try
        {
            _currentProduct = await ProductService.GetProductByCodeAsync(_scannedBarcode);
            _productSearched = true;

            if (_currentProduct != null)
            {
                Snackbar.Add(TranslationService.GetTranslation("warehouse.productFound", "Prodotto trovato: {0}", _currentProduct.Name), Severity.Success);
            }
            else
            {
                // Product not found - show dialog to choose action
                await ShowProductNotFoundDialog();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error searching product by barcode {Barcode}", _scannedBarcode);
            Snackbar.Add(TranslationService.GetTranslation("warehouse.searchError", "Errore nella ricerca"), Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task AddInventoryRow()
    {
        if (_currentDocument == null || _currentProduct == null || !_selectedLocationId.HasValue || _quantity < 0)
            return;

        _isLoading = true;
        try
        {
            var rowDto = new AddInventoryDocumentRowDto
            {
                ProductId = _currentProduct.Id,
                LocationId = _selectedLocationId.Value,
                Quantity = _quantity,
                Notes = _notes
            };

            var updatedDocument = await InventoryService.AddInventoryDocumentRowAsync(_currentDocument.Id, rowDto);

            if (updatedDocument != null)
            {
                _currentDocument = updatedDocument;
                Snackbar.Add(TranslationService.GetTranslation("warehouse.itemAdded", "Articolo aggiunto al documento"), Severity.Success);
                
                // Clear form and refocus on barcode
                ClearProductForm();
            }
            else
            {
                Snackbar.Add(TranslationService.GetTranslation("warehouse.addItemError", "Errore nell'aggiunta dell'articolo"), Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error adding inventory row");
            Snackbar.Add(TranslationService.GetTranslation("warehouse.addItemError", "Errore nell'aggiunta dell'articolo"), Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }

    private void ClearProductForm()
    {
        _scannedBarcode = string.Empty;
        _productSearched = false;
        _currentProduct = null;
        _selectedLocationId = null;
        _quantity = 0;
        _notes = string.Empty;
        
        if (_barcodeInput != null)
        {
            InvokeAsync(async () => await _barcodeInput.FocusAsync());
        }
    }

    private async Task FinalizeInventory()
    {
        if (_currentDocument == null)
            return;

        var confirmed = await DialogService.ShowMessageBox(
            TranslationService.GetTranslation("warehouse.confirmFinalize", "Conferma Finalizzazione"),
            TranslationService.GetTranslation("warehouse.finalizeMessage", 
                "Confermi di voler finalizzare l'inventario? Verranno applicati tutti gli aggiustamenti di stock per {0} articoli.", 
                _currentDocument.TotalItems),
            yesText: TranslationService.GetTranslation("common.yes", "Sì"),
            cancelText: TranslationService.GetTranslation("common.no", "No")
        );

        if (confirmed != true)
            return;

        _isLoading = true;
        try
        {
            var finalizedDocument = await InventoryService.FinalizeInventoryDocumentAsync(_currentDocument.Id);

            if (finalizedDocument != null)
            {
                Snackbar.Add(TranslationService.GetTranslation("warehouse.inventoryFinalized", "Inventario finalizzato con successo"), Severity.Success);
                
                // Reset the session
                _currentDocument = null;
                ClearProductForm();
            }
            else
            {
                Snackbar.Add(TranslationService.GetTranslation("warehouse.finalizeError", "Errore nella finalizzazione"), Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error finalizing inventory");
            Snackbar.Add(TranslationService.GetTranslation("warehouse.finalizeError", "Errore nella finalizzazione"), Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task CancelInventorySession()
    {
        if (_currentDocument == null)
            return;

        var confirmed = await DialogService.ShowMessageBox(
            TranslationService.GetTranslation("warehouse.confirmCancel", "Conferma Annullamento"),
            TranslationService.GetTranslation("warehouse.cancelMessage", 
                "Confermi di voler annullare la sessione di inventario? Tutti i dati inseriti ({0} articoli) andranno persi.", 
                _currentDocument.TotalItems),
            yesText: TranslationService.GetTranslation("common.yes", "Sì"),
            cancelText: TranslationService.GetTranslation("common.no", "No")
        );

        if (confirmed != true)
            return;

        // Simply reset the document without finalizing
        _currentDocument = null;
        ClearProductForm();
        Snackbar.Add(TranslationService.GetTranslation("warehouse.sessionCanceled", "Sessione annullata"), Severity.Info);
    }

    private async Task ShowProductNotFoundDialog()
    {
        var parameters = new DialogParameters
        {
            { "Barcode", _scannedBarcode }
        };

        var options = new DialogOptions
        {
            CloseOnEscapeKey = true,
            MaxWidth = MaxWidth.Medium,
            FullWidth = true
        };

        // Show a simple dialog to ask what the user wants to do
        var dialog = await DialogService.ShowAsync<ProductNotFoundDialog>(
            TranslationService.GetTranslation("warehouse.productNotFound", "Prodotto non trovato"),
            parameters,
            options
        );

        var result = await dialog.Result;

        if (!result.Canceled && result.Data is string action)
        {
            if (action == "create")
            {
                CreateNewProduct();
            }
            else if (action == "assign")
            {
                await AssignToExistingProduct();
            }
        }
    }

    private void CreateNewProduct()
    {
        // Create a new ProductDto with the scanned barcode as Code
        _productForDrawer = new ProductDto
        {
            Code = _scannedBarcode,
            Name = string.Empty,
            Status = ProductStatus.Active
        };
        
        _productDrawerMode = EntityDrawerMode.Create;
        _productDrawerOpen = true;
    }
    
    private async Task HandleProductCreated(ProductDto createdProduct)
    {
        // Product created successfully, search again to load it
        await SearchBarcode();
    }

    private async Task AssignToExistingProduct()
    {
        var parameters = new DialogParameters
        {
            { "Barcode", _scannedBarcode }
        };

        var options = new DialogOptions
        {
            CloseOnEscapeKey = true,
            MaxWidth = MaxWidth.Medium,
            FullWidth = true
        };

        var dialog = await DialogService.ShowAsync<AssignBarcodeDialog>(
            TranslationService.GetTranslation("products.assignBarcode", "Assegna Codice a Barre"),
            parameters,
            options
        );

        var result = await dialog.Result;

        if (!result.Canceled)
        {
            // Barcode assigned successfully, search again to load the product
            await SearchBarcode();
        }
    }
}
