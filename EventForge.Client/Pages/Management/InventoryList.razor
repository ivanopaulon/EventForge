@page "/warehouse/inventory-list"
@using Microsoft.AspNetCore.Authorization
@using EventForge.DTOs.Common
@using EventForge.DTOs.Warehouse
@attribute [Authorize(Roles = "SuperAdmin,Admin,Manager,Operator")]
@inject IInventoryService InventoryService
@inject ISnackbar Snackbar
@inject ITranslationService TranslationService
@inject ILogger<InventoryList> Logger
@inject NavigationManager NavigationManager

<PageTitle>@TranslationService.GetTranslation("warehouse.inventoryList", "Elenco Inventario")</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudText Typo="Typo.h4" Class="mb-4">
        <MudIcon Icon="@Icons.Material.Outlined.Inventory2" Class="mr-2" Size="Size.Medium" />
        @TranslationService.GetTranslation("warehouse.inventoryList", "Elenco Inventario")
    </MudText>

    @if (_isLoading)
    {
        <MudProgressLinear Indeterminate="true" Class="mb-4" />
    }

    <MudPaper Elevation="2" Class="pa-4">
        <!-- Action Buttons -->
        <MudGrid Class="mb-4">
            <MudItem xs="12" md="8">
                <MudText Typo="Typo.h6">
                    @TranslationService.GetTranslation("warehouse.totalEntries", "Totale Inserimenti: {0}", _totalCount)
                </MudText>
            </MudItem>
            <MudItem xs="12" md="4">
                <MudStack Row="true" Justify="Justify.FlexEnd" Spacing="2">
                    <MudButton StartIcon="@Icons.Material.Outlined.Add" 
                               Color="Color.Primary" 
                               Variant="Variant.Filled"
                               OnClick="@(() => NavigationManager.NavigateTo("/warehouse/inventory-procedure"))">
                        @TranslationService.GetTranslation("warehouse.newInventory", "Nuova Procedura")
                    </MudButton>
                    <MudButton StartIcon="@Icons.Material.Outlined.Refresh" 
                               Color="Color.Default" 
                               Variant="Variant.Outlined"
                               OnClick="@LoadInventoryEntries">
                        @TranslationService.GetTranslation("common.refresh", "Aggiorna")
                    </MudButton>
                </MudStack>
            </MudItem>
        </MudGrid>

        <!-- Inventory Table -->
        <MudTable Items="_inventoryEntries" Hover="true" Dense="true" Loading="_isLoading">
            <HeaderContent>
                <MudTh>@TranslationService.GetTranslation("warehouse.product", "Prodotto")</MudTh>
                <MudTh>@TranslationService.GetTranslation("warehouse.location", "Ubicazione")</MudTh>
                <MudTh>@TranslationService.GetTranslation("warehouse.quantity", "Quantit√†")</MudTh>
                <MudTh>@TranslationService.GetTranslation("warehouse.lot", "Lotto")</MudTh>
                <MudTh>@TranslationService.GetTranslation("warehouse.notes", "Note")</MudTh>
                <MudTh>@TranslationService.GetTranslation("warehouse.createdAt", "Data Creazione")</MudTh>
                <MudTh>@TranslationService.GetTranslation("warehouse.createdBy", "Creato Da")</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Product">
                    <MudText Typo="Typo.body2">@context.ProductName</MudText>
                    <MudText Typo="Typo.caption" Color="Color.Secondary">@context.ProductCode</MudText>
                </MudTd>
                <MudTd DataLabel="Location">@context.LocationName</MudTd>
                <MudTd DataLabel="Quantity">@context.Quantity</MudTd>
                <MudTd DataLabel="Lot">@(context.LotCode ?? "-")</MudTd>
                <MudTd DataLabel="Notes">@(context.Notes ?? "-")</MudTd>
                <MudTd DataLabel="CreatedAt">@context.CreatedAt.ToLocalTime().ToString("dd/MM/yyyy HH:mm")</MudTd>
                <MudTd DataLabel="CreatedBy">@(context.CreatedBy ?? "-")</MudTd>
            </RowTemplate>
            <NoRecordsContent>
                <MudText>@TranslationService.GetTranslation("warehouse.noInventoryEntries", "Nessun inserimento inventario trovato")</MudText>
            </NoRecordsContent>
        </MudTable>

        <!-- Pagination -->
        @if (_totalCount > 0)
        {
            <MudPagination 
                Class="mt-4" 
                Count="@((int)((_totalCount + _pageSize - 1) / _pageSize))" 
                Selected="@_currentPage" 
                SelectedChanged="@OnPageChanged" 
                ShowFirstButton="true" 
                ShowLastButton="true" />
        }
    </MudPaper>
</MudContainer>

@code {
    private bool _isLoading = false;
    private List<InventoryEntryDto> _inventoryEntries = new();
    private int _currentPage = 1;
    private int _pageSize = 20;
    private long _totalCount = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadInventoryEntries();
    }

    private async Task LoadInventoryEntries()
    {
        _isLoading = true;
        try
        {
            var result = await InventoryService.GetInventoryEntriesAsync(_currentPage, _pageSize);
            if (result != null)
            {
                _inventoryEntries = result.Items.ToList();
                _totalCount = result.TotalCount;
            }
            else
            {
                Snackbar.Add(TranslationService.GetTranslation("warehouse.loadInventoryError", "Errore nel caricamento inventario"), Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading inventory entries");
            Snackbar.Add(TranslationService.GetTranslation("warehouse.loadInventoryError", "Errore nel caricamento inventario"), Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task OnPageChanged(int page)
    {
        _currentPage = page;
        await LoadInventoryEntries();
    }
}
