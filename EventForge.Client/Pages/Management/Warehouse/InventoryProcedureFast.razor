@page "/warehouse/inventory-procedure-fast"
@using Microsoft.AspNetCore.Authorization
@using EventForge.DTOs.Common
@using EventForge.DTOs.Warehouse
@using EventForge.DTOs.Products
@using EventForge.Client.Shared.Components
@attribute [Authorize(Roles = "SuperAdmin,Admin,Manager,Operator")]
@inject IProductService ProductService
@inject IInventoryService InventoryService
@inject IStorageLocationService StorageLocationService
@inject IWarehouseService WarehouseService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject ITranslationService TranslationService
@inject ILogger<InventoryProcedureFast> Logger
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject IInventorySessionService InventorySessionService

<PageTitle>@TranslationService.GetTranslation("warehouse.inventoryProcedureFast", "Procedura Inventario Rapida")</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <MudGrid Class="mb-4">
        <MudItem xs="12" md="8">
            <MudText Typo="Typo.h4">
                <MudIcon Icon="@Icons.Material.Outlined.Inventory" Class="mr-2" Size="Size.Medium" />
                @TranslationService.GetTranslation("warehouse.inventoryProcedureFast", "Procedura Inventario Rapida")
            </MudText>
            <MudText Typo="Typo.body2" Color="Color.Secondary">
                @TranslationService.GetTranslation("warehouse.fastProcedureDescription", "Procedura ottimizzata per scansioni rapide sequenziali senza popup")
            </MudText>
        </MudItem>
        <MudItem xs="12" md="4">
            <MudStack Row="true" Justify="Justify.FlexEnd" Spacing="2">
                <MudButton StartIcon="@Icons.Material.Outlined.Inventory" 
                           Color="Color.Default" 
                           Variant="Variant.Outlined"
                           OnClick="@(() => NavigationManager.NavigateTo("/warehouse/inventory-procedure"))">
                    @TranslationService.GetTranslation("warehouse.classicProcedure", "Procedura Classica")
                </MudButton>
                <MudButton StartIcon="@Icons.Material.Outlined.List" 
                           Color="Color.Default" 
                           Variant="Variant.Outlined"
                           OnClick="@(() => NavigationManager.NavigateTo("/warehouse/inventory-list"))">
                    @TranslationService.GetTranslation("warehouse.viewInventory", "Visualizza Inventario")
                </MudButton>
            </MudStack>
        </MudItem>
    </MudGrid>

    @if (_isLoading)
    {
        <MudProgressLinear Indeterminate="true" Class="mb-4" />
    }

    <!-- Session Status Banner with Enhanced Statistics -->
    @if (_currentDocument != null)
    {
        <MudAlert Severity="Severity.Info" Class="mb-4" Variant="Variant.Filled">
            <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                <div>
                    <MudText Typo="Typo.subtitle1" Style="font-weight: 600;">
                        @TranslationService.GetTranslation("warehouse.inventorySessionActive", "Sessione di Inventario Attiva")
                    </MudText>
                    <MudText Typo="Typo.body2">
                        @TranslationService.GetTranslation("warehouse.documentNumber", "Documento") #@_currentDocument.Number - 
                        @_currentDocument.TotalItems @TranslationService.GetTranslation("warehouse.itemsCounted", "articoli contati")
                    </MudText>
                    <MudText Typo="Typo.caption" Color="Color.Default">
                        @TranslationService.GetTranslation("warehouse.sessionStarted", "Iniziata il") @_sessionStartTime.ToLocalTime().ToString("dd/MM/yyyy HH:mm")
                    </MudText>
                </div>
                <MudStack Row="true" Spacing="2">
                    <MudTooltip Text="@TranslationService.GetTranslation("warehouse.exportTooltip", "Esporta documento in Excel")">
                        <MudButton StartIcon="@Icons.Material.Outlined.Download" 
                                   Color="Color.Info" 
                                   Variant="Variant.Outlined"
                                   OnClick="@ExportInventoryDocument"
                                   Disabled="@(_currentDocument.TotalItems == 0)">
                            @TranslationService.GetTranslation("common.export", "Esporta")
                        </MudButton>
                    </MudTooltip>
                    <MudTooltip Text="@TranslationService.GetTranslation("warehouse.finalizeTooltip", "Applica tutti gli aggiustamenti e chiudi la sessione")">
                        <MudButton StartIcon="@Icons.Material.Outlined.PlaylistAddCheck" 
                                   Color="Color.Success" 
                                   Variant="Variant.Filled"
                                   OnClick="@FinalizeInventory"
                                   Disabled="@(_currentDocument.TotalItems == 0)">
                            @TranslationService.GetTranslation("warehouse.finalizeInventory", "Finalizza")
                        </MudButton>
                    </MudTooltip>
                    <MudTooltip Text="@TranslationService.GetTranslation("warehouse.cancelTooltip", "Annulla sessione senza salvare")">
                        <MudButton StartIcon="@Icons.Material.Outlined.Cancel" 
                                   Color="Color.Default" 
                                   Variant="Variant.Outlined"
                                   OnClick="@CancelInventorySession">
                            @TranslationService.GetTranslation("common.cancel", "Annulla")
                        </MudButton>
                    </MudTooltip>
                </MudStack>
            </MudStack>
        </MudAlert>

        <!-- Real-time Statistics Panel -->
        <MudGrid Class="mb-4">
            <MudItem xs="12" md="3">
                <MudPaper Elevation="2" Class="pa-3">
                    <MudStack Spacing="1">
                        <MudText Typo="Typo.caption" Color="Color.Secondary">
                            @TranslationService.GetTranslation("warehouse.totalItems", "Totale Articoli")
                        </MudText>
                        <MudText Typo="Typo.h5" Color="Color.Primary" Style="font-weight: 600;">
                            @_currentDocument.TotalItems
                        </MudText>
                    </MudStack>
                </MudPaper>
            </MudItem>
            <MudItem xs="12" md="3">
                <MudPaper Elevation="2" Class="pa-3">
                    <MudStack Spacing="1">
                        <MudText Typo="Typo.caption" Color="Color.Secondary">
                            @TranslationService.GetTranslation("warehouse.positiveAdjustments", "Eccedenze")
                        </MudText>
                        <MudText Typo="Typo.h5" Color="Color.Success" Style="font-weight: 600;">
                            +@GetPositiveAdjustmentsCount()
                        </MudText>
                    </MudStack>
                </MudPaper>
            </MudItem>
            <MudItem xs="12" md="3">
                <MudPaper Elevation="2" Class="pa-3">
                    <MudStack Spacing="1">
                        <MudText Typo="Typo.caption" Color="Color.Secondary">
                            @TranslationService.GetTranslation("warehouse.negativeAdjustments", "Mancanze")
                        </MudText>
                        <MudText Typo="Typo.h5" Color="Color.Warning" Style="font-weight: 600;">
                            @GetNegativeAdjustmentsCount()
                        </MudText>
                    </MudStack>
                </MudPaper>
            </MudItem>
            <MudItem xs="12" md="3">
                <MudPaper Elevation="2" Class="pa-3">
                    <MudStack Spacing="1">
                        <MudText Typo="Typo.caption" Color="Color.Secondary">
                            @TranslationService.GetTranslation("warehouse.sessionDuration", "Durata Sessione")
                        </MudText>
                        <MudText Typo="Typo.h5" Color="Color.Info" Style="font-weight: 600;">
                            @GetSessionDuration()
                        </MudText>
                    </MudStack>
                </MudPaper>
            </MudItem>
        </MudGrid>
    }

    <!-- Storage Facility Selection -->
    <MudPaper Elevation="2" Class="pa-4 mb-4">
        <MudText Typo="Typo.h6" Class="mb-3">
            <MudIcon Icon="@Icons.Material.Outlined.Warehouse" Class="mr-2" />
            @TranslationService.GetTranslation("warehouse.selectStorageFacility", "Seleziona Magazzino")
        </MudText>
        
        <MudGrid Spacing="3">
            <MudItem xs="12" md="8">
                <MudSelect T="Guid?"
                           @bind-Value="_selectedStorageFacilityId"
                           Label="@TranslationService.GetTranslation("warehouse.storageFacility", "Magazzino")"
                           Variant="Variant.Outlined"
                           Required="true"
                           Disabled="@(_currentDocument != null)"
                           Adornment="Adornment.Start"
                           AdornmentIcon="@Icons.Material.Outlined.Business">
                    @if (_storageFacilities != null)
                    {
                        @foreach (var facility in _storageFacilities)
                        {
                            <MudSelectItem T="Guid?" Value="@((Guid?)facility.Id)">@facility.Name - @facility.Code</MudSelectItem>
                        }
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12" md="4">
                @if (_currentDocument == null)
                {
                    <MudButton StartIcon="@Icons.Material.Outlined.PlayArrow" 
                               Color="Color.Primary" 
                               Variant="Variant.Filled"
                               FullWidth="true"
                               OnClick="@StartInventorySession"
                               Disabled="@(!_selectedStorageFacilityId.HasValue)">
                        @TranslationService.GetTranslation("warehouse.startSession", "Avvia Sessione")
                    </MudButton>
                }
                else
                {
                    <MudChip T="string" Color="Color.Success" Icon="@Icons.Material.Filled.CheckCircle" Size="Size.Large">
                        @TranslationService.GetTranslation("warehouse.sessionActive", "Sessione Attiva")
                    </MudChip>
                }
            </MudItem>
        </MudGrid>
    </MudPaper>

    <!-- Barcode Scanner Section -->
    @if (_currentDocument != null)
    {
        <MudPaper Elevation="2" Class="pa-4 mb-4">
            <MudText Typo="Typo.h6" Class="mb-3">
                <MudIcon Icon="@Icons.Material.Outlined.QrCodeScanner" Class="mr-2" />
                @TranslationService.GetTranslation("warehouse.scanBarcode", "Scansiona Codice a Barre")
            </MudText>

            <MudGrid Spacing="3">
                <MudItem xs="12" md="8">
                    <MudTextField @bind-Value="_scannedBarcode"
                                  Label="@TranslationService.GetTranslation("warehouse.barcodeInput", "Codice a Barre")"
                                  Variant="Variant.Outlined"
                                  @onkeydown="@OnBarcodeKeyDown"
                                  @ref="_barcodeInput"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Outlined.QrCode"
                                  HelperText="@TranslationService.GetTranslation("warehouse.scanOrTypeBarcode", "Scansiona o digita il codice a barre e premi Invio")" />
                </MudItem>
                <MudItem xs="12" md="4">
                    <MudButton StartIcon="@Icons.Material.Outlined.Search"
                               Color="Color.Primary"
                               Variant="Variant.Filled"
                               FullWidth="true"
                               OnClick="@SearchBarcode"
                               Disabled="@string.IsNullOrWhiteSpace(_scannedBarcode)">
                        @TranslationService.GetTranslation("common.search", "Cerca")
                    </MudButton>
                </MudItem>
                <MudItem xs="12">
                    <MudSwitch @bind-Value="_fastConfirmEnabled" 
                              Color="Color.Primary"
                              Label="@TranslationService.GetTranslation("warehouse.fastConfirm", "Conferma rapida")"
                              UnCheckedColor="Color.Default" />
                    <MudText Typo="Typo.caption" Color="Color.Secondary">
                        @TranslationService.GetTranslation("warehouse.fastConfirmHelp", "Quando attivo, le scansioni ripetute dello stesso prodotto vengono confermate automaticamente")
                    </MudText>
                </MudItem>
            </MudGrid>
        </MudPaper>

        <!-- Inline Product Entry Form (NEW FAST PROCEDURE) -->
        @if (_currentProduct != null)
        {
            <MudPaper Elevation="3" Class="pa-4 mb-4 product-entry-inline" Style="border: 2px solid var(--mud-palette-success); background-color: var(--mud-palette-background-grey);">
                <MudStack Spacing="2">
                    <!-- Product Information Display with Undo Button -->
                    <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                        <MudAlert Severity="Severity.Success" Dense="true" NoIcon="false" Variant="Variant.Text" Style="flex: 1;">
                            <MudStack Row="true" Spacing="2" AlignItems="AlignItems.Center">
                                <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success" Size="Size.Large" />
                                <div>
                                    <MudText Typo="Typo.h6" Style="font-weight: 600;">@_currentProduct.Name</MudText>
                                    <MudText Typo="Typo.caption" Color="Color.Secondary">@TranslationService.GetTranslation("warehouse.productCode", "Codice"): @_currentProduct.Code</MudText>
                                </div>
                            </MudStack>
                        </MudAlert>
                        @if (_lastAddedRow != null)
                        {
                            <MudButton StartIcon="@Icons.Material.Outlined.Undo"
                                      Color="Color.Warning"
                                      Variant="Variant.Outlined"
                                      Size="Size.Small"
                                      OnClick="@UndoLastAsync">
                                @TranslationService.GetTranslation("warehouse.undoLast", "Annulla ultima")
                            </MudButton>
                        }
                    </MudStack>

                    <!-- Entry Form -->
                    <MudGrid Spacing="2">
                        <MudItem xs="12" sm="5">
                            <MudAutocomplete T="StorageLocationDto"
                                           Value="_selectedLocation"
                                           Label="@TranslationService.GetTranslation("warehouse.storageLocation", "Ubicazione")"
                                           Variant="Variant.Outlined"
                                           Required="true"
                                           SearchFunc="@SearchLocations"
                                           ToStringFunc="@(l => l != null ? $"{l.Code} - {l.Description}" : string.Empty)"
                                           Adornment="Adornment.Start"
                                           AdornmentIcon="@Icons.Material.Outlined.LocationOn"
                                           @ref="_locationAutocomplete"
                                           @onkeydown="@OnLocationKeyDown"
                                           ValueChanged="@OnLocationChanged"
                                           Immediate="true"
                                           ResetValueOnEmptyText="true"
                                           CoerceText="false"
                                           CoerceValue="false">
                                <ItemTemplate Context="location">
                                    <MudText Typo="Typo.body2">@location.Code</MudText>
                                    @if (!string.IsNullOrEmpty(location.Description))
                                    {
                                        <MudText Typo="Typo.caption" Color="Color.Secondary">@location.Description</MudText>
                                    }
                                </ItemTemplate>
                            </MudAutocomplete>
                        </MudItem>
                        <MudItem xs="12" sm="4">
                            <MudNumericField @bind-Value="_quantity"
                                           Label="@TranslationService.GetTranslation("warehouse.quantity", "Quantità")"
                                           Variant="Variant.Outlined"
                                           Min="0"
                                           Required="true"
                                           Adornment="Adornment.Start"
                                           AdornmentIcon="@Icons.Material.Outlined.Numbers"
                                           @ref="_quantityField"
                                           @onkeydown="@OnQuantityKeyDown" />
                        </MudItem>
                        <MudItem xs="12" sm="3">
                            <MudButton Variant="Variant.Filled" 
                                      Color="Color.Success"
                                      FullWidth="true"
                                      Size="Size.Large"
                                      StartIcon="@Icons.Material.Filled.Add"
                                      OnClick="@ConfirmAndNext"
                                      Disabled="@(!_selectedLocationId.HasValue || _quantity < 0)">
                                @TranslationService.GetTranslation("warehouse.confirmAdd", "✓ Conferma")
                            </MudButton>
                        </MudItem>
                        <MudItem xs="12">
                            <MudTextField @bind-Value="_notes"
                                        Label="@TranslationService.GetTranslation("warehouse.notes", "Note (opzionale)")"
                                        Variant="Variant.Outlined"
                                        Lines="1"
                                        MaxLength="200"
                                        Adornment="Adornment.Start"
                                        AdornmentIcon="@Icons.Material.Outlined.Comment" />
                        </MudItem>
                    </MudGrid>

                    <!-- Quick Tips -->
                    <MudAlert Severity="Severity.Info" Dense="true" NoIcon="false" Variant="Variant.Text">
                        <MudText Typo="Typo.caption">
                            <MudIcon Icon="@Icons.Material.Outlined.Keyboard" Size="Size.Small" Class="mr-1" />
                            <strong>Suggerimento:</strong> Usa Tab per passare al campo successivo | Invio su Quantità = Conferma rapida | Esc = Annulla
                        </MudText>
                    </MudAlert>
                </MudStack>
            </MudPaper>
        }

        <!-- Inventory Document Rows with Enhanced Features -->
        @if (_currentDocument?.Rows?.Any() == true)
        {
            <MudPaper Elevation="2" Class="pa-4 mb-4">
                <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="mb-3">
                    <div>
                        <MudText Typo="Typo.h6">
                            <MudIcon Icon="@Icons.Material.Outlined.ListAlt" Class="mr-2" />
                            @TranslationService.GetTranslation("warehouse.inventoryItems", "Articoli nel Documento di Inventario")
                            <MudChip T="string" Size="Size.Small" Color="Color.Primary" Class="ml-2">@_currentDocument.TotalItems</MudChip>
                        </MudText>
                    </div>
                    <MudStack Row="true" Spacing="2">
                        <MudTooltip Text="@TranslationService.GetTranslation("warehouse.filterAdjustments", "Mostra solo articoli con differenze")">
                            <MudSwitch T="bool" @bind-Checked="_showOnlyAdjustments" 
                                      Color="Color.Primary" 
                                      Label="@TranslationService.GetTranslation("warehouse.onlyAdjustments", "Solo Differenze")" />
                        </MudTooltip>
                    </MudStack>
                </MudStack>

                <MudTable Items="@GetFilteredRows()" Hover="true" Dense="true" Striped="true" FixedHeader="true" Height="400px">
                    <HeaderContent>
                        <MudTh>@TranslationService.GetTranslation("warehouse.product", "Prodotto")</MudTh>
                        <MudTh>@TranslationService.GetTranslation("warehouse.location", "Ubicazione")</MudTh>
                        <MudTh>@TranslationService.GetTranslation("warehouse.quantity", "Quantità")</MudTh>
                        <MudTh>@TranslationService.GetTranslation("warehouse.adjustment", "Aggiustamento")</MudTh>
                        <MudTh>@TranslationService.GetTranslation("warehouse.notes", "Note")</MudTh>
                        <MudTh>@TranslationService.GetTranslation("warehouse.time", "Ora")</MudTh>
                        <MudTh>@TranslationService.GetTranslation("common.actions", "Azioni")</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Product">
                            <MudText Typo="Typo.body2" Style="font-weight: 600;">@context.ProductName</MudText>
                            <MudText Typo="Typo.caption" Color="Color.Secondary">@context.ProductCode</MudText>
                        </MudTd>
                        <MudTd DataLabel="Location">
                            <MudText Typo="Typo.body2">@context.LocationName</MudText>
                        </MudTd>
                        <MudTd DataLabel="Quantity">
                            <MudChip T="string" Size="Size.Small" Color="Color.Info">@context.Quantity</MudChip>
                        </MudTd>
                        <MudTd DataLabel="Adjustment">
                            @if (context.AdjustmentQuantity.HasValue)
                            {
                                var adjColor = context.AdjustmentQuantity > 0 ? Color.Success : 
                                               context.AdjustmentQuantity < 0 ? Color.Warning : Color.Default;
                                var adjIcon = context.AdjustmentQuantity > 0 ? Icons.Material.Filled.TrendingUp : 
                                              context.AdjustmentQuantity < 0 ? Icons.Material.Filled.TrendingDown : 
                                              Icons.Material.Filled.Remove;
                                
                                <MudChip T="string" Size="Size.Small" Color="@adjColor" Icon="@adjIcon">
                                    @(context.AdjustmentQuantity > 0 ? "+" : "")@context.AdjustmentQuantity
                                </MudChip>
                            }
                            else
                            {
                                <MudChip T="string" Size="Size.Small" Color="Color.Default">
                                    @TranslationService.GetTranslation("warehouse.noAdjustment", "N/A")
                                </MudChip>
                            }
                        </MudTd>
                        <MudTd DataLabel="Notes">
                            @if (!string.IsNullOrEmpty(context.Notes))
                            {
                                <MudTooltip Text="@context.Notes">
                                    <MudIcon Icon="@Icons.Material.Filled.Comment" Size="Size.Small" Color="Color.Info" />
                                </MudTooltip>
                            }
                        </MudTd>
                        <MudTd DataLabel="Time">
                            <MudText Typo="Typo.caption">@context.CreatedAt.ToLocalTime().ToString("HH:mm:ss")</MudText>
                        </MudTd>
                        <MudTd DataLabel="Actions">
                            <MudStack Row="true" Spacing="1">
                                <MudTooltip Text="@TranslationService.GetTranslation("common.edit", "Modifica")">
                                    <MudIconButton Icon="@Icons.Material.Outlined.Edit" 
                                                   Size="Size.Small" 
                                                   Color="Color.Primary"
                                                   OnClick="@(() => EditInventoryRow(context))" />
                                </MudTooltip>
                                <MudTooltip Text="@TranslationService.GetTranslation("common.delete", "Elimina")">
                                    <MudIconButton Icon="@Icons.Material.Outlined.Delete" 
                                                   Size="Size.Small" 
                                                   Color="Color.Error"
                                                   OnClick="@(() => DeleteInventoryRow(context))" />
                                </MudTooltip>
                            </MudStack>
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            </MudPaper>
        }

        <!-- Operation Log / Activity Timeline - Collapsible -->
        @if (_operationLog.Any())
        {
            <MudPaper Elevation="2" Class="pa-4">
                <div style="cursor: pointer;" @onclick="@(() => _operationLogExpanded = !_operationLogExpanded)">
                    <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="mb-2">
                        <div>
                            <MudText Typo="Typo.h6">
                                <MudIcon Icon="@Icons.Material.Outlined.History" Class="mr-2" />
                                @TranslationService.GetTranslation("warehouse.operationLog", "Registro Operazioni")
                                <MudChip T="string" Size="Size.Small" Color="Color.Secondary" Class="ml-2">@_operationLog.Count</MudChip>
                            </MudText>
                        </div>
                        <MudIconButton Icon="@(_operationLogExpanded ? Icons.Material.Outlined.ExpandLess : Icons.Material.Outlined.ExpandMore)"
                                       Color="Color.Default"
                                       Size="Size.Small" />
                    </MudStack>
                </div>

                <MudCollapse Expanded="@_operationLogExpanded">
                    <MudTimeline TimelineOrientation="TimelineOrientation.Vertical" TimelinePosition="TimelinePosition.Start" Class="mt-3">
                        @foreach (var log in _operationLog.OrderByDescending(l => l.Timestamp).Take(20))
                        {
                            <MudTimelineItem Color="@GetLogColor(log.Type)" Size="Size.Small">
                                <ItemContent>
                                    <MudText Typo="Typo.body2" Style="font-weight: 600;">@log.Message</MudText>
                                    <MudText Typo="Typo.caption" Color="Color.Secondary">
                                        @log.Timestamp.ToLocalTime().ToString("dd/MM/yyyy HH:mm:ss")
                                    </MudText>
                                    @if (!string.IsNullOrEmpty(log.Details))
                                    {
                                        <MudText Typo="Typo.caption" Color="Color.Secondary" Class="mt-1">
                                            @log.Details
                                        </MudText>
                                    }
                                </ItemContent>
                            </MudTimelineItem>
                        }
                    </MudTimeline>

                    @if (_operationLog.Count > 20)
                    {
                        <MudText Typo="Typo.caption" Color="Color.Secondary" Class="mt-2">
                            @TranslationService.GetTranslation("warehouse.showingRecent", "Mostrando le ultime 20 operazioni su {0} totali", _operationLog.Count)
                        </MudText>
                    }
                </MudCollapse>
            </MudPaper>
        }
    }
    else
    {
        <MudAlert Severity="Severity.Normal" Variant="Variant.Outlined" Class="mt-4">
            <MudText Typo="Typo.body1">
                @TranslationService.GetTranslation("warehouse.noSessionActive", "Nessuna sessione di inventario attiva. Seleziona un magazzino e avvia una nuova sessione per iniziare.")
            </MudText>
        </MudAlert>
    }
</MudContainer>

<ProductDrawer @bind-IsOpen="_productDrawerOpen"
               @bind-Mode="_productDrawerMode"
               OriginalProduct="_productForDrawer"
               AllowEdit="false"
               OnProductCreated="@HandleProductCreated" />

@code {
    private bool _isLoading = false;
    private string _scannedBarcode = string.Empty;
    private ProductDto? _currentProduct;
    private List<StorageLocationDto> _locations = new();
    private List<StorageFacilityDto> _storageFacilities = new();
    private Guid? _selectedLocationId;
    private StorageLocationDto? _selectedLocation;
    private Guid? _selectedStorageFacilityId;
    private decimal _quantity = 1; // Default to 1 for faster input
    private string _notes = string.Empty;
    private InventoryDocumentDto? _currentDocument = null;
    private MudTextField<string>? _barcodeInput;
    private MudAutocomplete<StorageLocationDto>? _locationAutocomplete;
    private MudNumericField<decimal>? _quantityField;
    private DateTime _sessionStartTime = DateTime.UtcNow;
    private bool _showOnlyAdjustments = false;
    private bool _operationLogExpanded = false;
    
    // Scanner robustness fields
    private bool _scanLock = false;
    private DateTime _lastScanAt = DateTime.MinValue;
    private static readonly TimeSpan ScanDebounce = TimeSpan.FromMilliseconds(150);
    
    // Fast confirm toggle
    private bool _fastConfirmEnabled = true;
    
    // Undo last row tracking
    private InventoryDocumentRowDto? _lastAddedRow = null;
    
    // Location search constants
    private const int MaxLocationSearchResults = 20;
    
    // Operation log for audit trail
    private List<OperationLogEntry> _operationLog = new();
    
    // ProductDrawer related fields
    private bool _productDrawerOpen = false;
    private EntityDrawerMode _productDrawerMode = EntityDrawerMode.Create;
    private ProductDto? _productForDrawer;

    // Helper class for operation logging
    private class OperationLogEntry
    {
        public DateTime Timestamp { get; set; }
        public string Message { get; set; } = string.Empty;
        public string Details { get; set; } = string.Empty;
        public string Type { get; set; } = "Info"; // Info, Success, Warning, Error
    }
    
    // Helper method for barcode sanitization
    private static string SanitizeBarcode(string raw) => raw?.Trim().Trim('\r', '\n') ?? string.Empty;

    private void AddOperationLog(string message, string details = "", string type = "Info")
    {
        _operationLog.Add(new OperationLogEntry
        {
            Timestamp = DateTime.UtcNow,
            Message = message,
            Details = details,
            Type = type
        });

        Logger.LogInformation("Inventory Operation: {Message} - {Details}", message, details);
    }

    private Color GetLogColor(string type) => type switch
    {
        "Success" => Color.Success,
        "Warning" => Color.Warning,
        "Error" => Color.Error,
        _ => Color.Info
    };

    private int GetPositiveAdjustmentsCount()
    {
        if (_currentDocument?.Rows == null) return 0;
        return _currentDocument.Rows.Count(r => r.AdjustmentQuantity.HasValue && r.AdjustmentQuantity > 0);
    }

    private int GetNegativeAdjustmentsCount()
    {
        if (_currentDocument?.Rows == null) return 0;
        return _currentDocument.Rows.Count(r => r.AdjustmentQuantity.HasValue && r.AdjustmentQuantity < 0);
    }

    private string GetSessionDuration()
    {
        if (_currentDocument == null) return "00:00";
        
        var duration = DateTime.UtcNow - _sessionStartTime;
        return $"{(int)duration.TotalMinutes:D2}:{duration.Seconds:D2}";
    }

    private IEnumerable<InventoryDocumentRowDto> GetFilteredRows()
    {
        if (_currentDocument?.Rows == null) return Enumerable.Empty<InventoryDocumentRowDto>();
        
        var rows = _currentDocument.Rows.AsEnumerable();
        
        if (_showOnlyAdjustments)
        {
            rows = rows.Where(r => r.AdjustmentQuantity.HasValue && r.AdjustmentQuantity != 0);
        }
        
        return rows;
    }

    private async Task ExportInventoryDocument()
    {
        if (_currentDocument == null) return;

        try
        {
            AddOperationLog(
                TranslationService.GetTranslation("warehouse.exportStarted", "Esportazione documento iniziata"),
                $"Documento #{_currentDocument.Number} - {_currentDocument.TotalItems} articoli",
                "Info"
            );

            // Create CSV content
            var csv = new System.Text.StringBuilder();
            csv.AppendLine("Codice Prodotto,Nome Prodotto,Ubicazione,Quantità Contata,Aggiustamento,Note,Data/Ora");
            
            foreach (var row in _currentDocument.Rows)
            {
                csv.AppendLine($"\"{row.ProductCode}\",\"{row.ProductName}\",\"{row.LocationName}\",{row.Quantity},{row.AdjustmentQuantity ?? 0},\"{row.Notes ?? ""}\",\"{row.CreatedAt.ToLocalTime():dd/MM/yyyy HH:mm:ss}\"");
            }

            // Download the file using existing utility
            var fileName = $"Inventario_{_currentDocument.Number}_{DateTime.Now:yyyyMMdd_HHmmss}.csv";
            await JSRuntime.InvokeVoidAsync("downloadCsv", fileName, csv.ToString());

            Snackbar.Add(
                TranslationService.GetTranslation("warehouse.exportSuccess", "Documento esportato con successo"), 
                Severity.Success
            );

            AddOperationLog(
                TranslationService.GetTranslation("warehouse.exportCompleted", "Esportazione completata"),
                $"File: {fileName}",
                "Success"
            );
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error exporting inventory document");
            Snackbar.Add(
                TranslationService.GetTranslation("warehouse.exportError", "Errore durante l'esportazione"), 
                Severity.Error
            );
            
            AddOperationLog(
                TranslationService.GetTranslation("warehouse.exportFailed", "Esportazione fallita"),
                ex.Message,
                "Error"
            );
        }
    }

    private async Task RestoreInventorySessionAsync()
    {
        try
        {
            InventoryDocumentDto? document = null;
            Guid? warehouseId = null;
            DateTime? sessionStartTime = null;
            string restorationSource = "localStorage";

            // Step 1: Try to restore from localStorage
            var sessionState = await InventorySessionService.LoadSessionAsync();
            if (sessionState != null)
            {
                // Try to load the inventory document from the server
                document = await InventoryService.GetInventoryDocumentAsync(sessionState.DocumentId);
                
                if (document != null && document.Status == "Open")
                {
                    warehouseId = sessionState.WarehouseId;
                    sessionStartTime = sessionState.SessionStartTime;
                }
                else
                {
                    // Document not found or already finalized, clear the invalid session
                    await InventorySessionService.ClearSessionAsync();
                    document = null;
                    Logger.LogInformation("Inventory session in localStorage is invalid (document not found or finalized)");
                }
            }

            // Step 2: If localStorage restoration failed, try to get the most recent open document from server
            if (document == null)
            {
                document = await InventoryService.GetMostRecentOpenInventoryDocumentAsync();
                if (document != null)
                {
                    warehouseId = document.WarehouseId;
                    sessionStartTime = document.CreatedAt;
                    restorationSource = "server";
                    
                    // Save this session to localStorage for future use
                    await InventorySessionService.SaveSessionAsync(new InventorySessionState
                    {
                        DocumentId = document.Id,
                        DocumentNumber = document.Number,
                        WarehouseId = warehouseId,
                        SessionStartTime = sessionStartTime ?? DateTime.UtcNow
                    });
                    
                    Logger.LogInformation("Inventory session restored from most recent open document: {DocumentId}", document.Id);
                }
            }

            // Step 3: If we have a valid document to restore, apply it
            if (document != null)
            {
                _currentDocument = document;
                _selectedStorageFacilityId = warehouseId;
                _sessionStartTime = sessionStartTime ?? DateTime.UtcNow;
                
                string sourceMessage = restorationSource == "localStorage" 
                    ? TranslationService.GetTranslation("warehouse.sessionRestoredFromCache", "Sessione ripristinata dalla cache")
                    : TranslationService.GetTranslation("warehouse.sessionRestoredFromServer", "Sessione ripristinata dal server (documento più recente aperto)");
                
                AddOperationLog(
                    TranslationService.GetTranslation("warehouse.sessionRestored", "Sessione di inventario ripristinata"),
                    $"{sourceMessage} - Documento #{_currentDocument.Number} - {_currentDocument.TotalItems} articoli - {document.Rows?.Count ?? 0} righe",
                    "Success"
                );
                
                Snackbar.Add(
                    TranslationService.GetTranslation("warehouse.sessionRestored", "Sessione di inventario ripristinata"), 
                    Severity.Info
                );
                
                Logger.LogInformation("Inventory session restored from {Source}: Document {DocumentId} with {RowCount} rows", restorationSource, document.Id, document.Rows?.Count ?? 0);
                
                // Force UI update to ensure rows are displayed
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error restoring inventory session");
            // Clear invalid session only if it exists in localStorage
            try
            {
                if (await InventorySessionService.HasActiveSessionAsync())
                {
                    await InventorySessionService.ClearSessionAsync();
                }
            }
            catch (Exception clearEx)
            {
                Logger.LogError(clearEx, "Error clearing invalid session");
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await Task.WhenAll(
            LoadStorageFacilities(),
            LoadLocations()
        );
        
        // Try to restore active inventory session
        await RestoreInventorySessionAsync();
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && _barcodeInput != null && _currentDocument != null)
        {
            await _barcodeInput.FocusAsync();
        }
    }

    private async Task LoadStorageFacilities()
    {
        _isLoading = true;
        try
        {
            var result = await WarehouseService.GetStorageFacilitiesAsync(1, 100);
            if (result?.Items != null)
            {
                _storageFacilities = result.Items.ToList();
                
                // Auto-select the first facility if only one exists
                if (_storageFacilities.Count == 1)
                {
                    _selectedStorageFacilityId = _storageFacilities[0].Id;
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading storage facilities");
            Snackbar.Add(TranslationService.GetTranslation("warehouse.loadFacilitiesError", "Errore nel caricamento dei magazzini"), Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task LoadLocations()
    {
        _isLoading = true;
        try
        {
            var result = await StorageLocationService.GetStorageLocationsAsync(1, 100);
            if (result?.Items != null)
            {
                _locations = result.Items.ToList();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading storage locations");
            Snackbar.Add(TranslationService.GetTranslation("warehouse.loadLocationsError", "Errore nel caricamento ubicazioni"), Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task StartInventorySession()
    {
        if (!_selectedStorageFacilityId.HasValue)
            return;

        _isLoading = true;
        try
        {
            var createDto = new CreateInventoryDocumentDto
            {
                WarehouseId = _selectedStorageFacilityId,
                InventoryDate = DateTime.UtcNow,
                Notes = $"Inventario del {DateTime.Now:dd/MM/yyyy HH:mm}"
            };

            _currentDocument = await InventoryService.StartInventoryDocumentAsync(createDto);

            if (_currentDocument != null)
            {
                _sessionStartTime = DateTime.UtcNow;
                _operationLog.Clear();
                
                var facilityName = _storageFacilities.FirstOrDefault(f => f.Id == _selectedStorageFacilityId)?.Name ?? "N/A";
                
                // Save session state to localStorage
                await InventorySessionService.SaveSessionAsync(new InventorySessionState
                {
                    DocumentId = _currentDocument.Id,
                    DocumentNumber = _currentDocument.Number,
                    WarehouseId = _selectedStorageFacilityId,
                    SessionStartTime = _sessionStartTime
                });
                
                AddOperationLog(
                    TranslationService.GetTranslation("warehouse.sessionStarted", "Sessione di inventario avviata"),
                    $"Magazzino: {facilityName}, Documento: #{_currentDocument.Number}",
                    "Success"
                );

                Snackbar.Add(TranslationService.GetTranslation("warehouse.sessionStarted", "Sessione di inventario avviata"), Severity.Success);
                
                // Focus on barcode input after session start
                if (_barcodeInput != null)
                {
                    await InvokeAsync(async () => await _barcodeInput.FocusAsync());
                }
            }
            else
            {
                Snackbar.Add(TranslationService.GetTranslation("warehouse.sessionStartError", "Errore nell'avvio della sessione"), Severity.Error);
                AddOperationLog(
                    TranslationService.GetTranslation("warehouse.sessionStartError", "Errore nell'avvio della sessione"),
                    "",
                    "Error"
                );
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error starting inventory session");
            Snackbar.Add(TranslationService.GetTranslation("warehouse.sessionStartError", "Errore nell'avvio della sessione"), Severity.Error);
            AddOperationLog(
                TranslationService.GetTranslation("warehouse.sessionStartError", "Errore nell'avvio della sessione"),
                ex.Message,
                "Error"
            );
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task OnBarcodeKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            // Sanitize barcode input
            var sanitized = SanitizeBarcode(_scannedBarcode);
            if (string.IsNullOrWhiteSpace(sanitized))
                return;
            
            // Apply debouncing and re-entrancy lock
            if (_scanLock)
                return;
            
            var now = DateTime.UtcNow;
            if ((now - _lastScanAt) < ScanDebounce)
                return;
            
            _scanLock = true;
            _lastScanAt = now;
            
            try
            {
                _scannedBarcode = sanitized;
                await SearchBarcode();
            }
            finally
            {
                _scanLock = false;
            }
        }
    }

    private async Task SearchBarcode()
    {
        if (string.IsNullOrWhiteSpace(_scannedBarcode))
            return;

        _isLoading = true;

        try
        {
            AddOperationLog(
                TranslationService.GetTranslation("warehouse.searchingProduct", "Ricerca prodotto"),
                $"Codice: {_scannedBarcode}",
                "Info"
            );

            var foundProduct = await ProductService.GetProductByCodeAsync(_scannedBarcode);

            if (foundProduct != null)
            {
                // Check if this is a repeated scan of the same product
                if (_currentProduct != null && 
                    _currentProduct.Id == foundProduct.Id && 
                    _selectedLocationId.HasValue)
                {
                    // Repeated scan detected - increment quantity
                    _quantity += 1;
                    
                    AddOperationLog(
                        TranslationService.GetTranslation("warehouse.repeatedScanIncrement", "Scansione ripetuta, quantità incrementata"),
                        $"{foundProduct.Name} - Nuova quantità: {_quantity}",
                        "Info"
                    );
                    
                    // Auto-confirm if fast confirm is enabled
                    if (_fastConfirmEnabled)
                    {
                        await ConfirmAndNext();
                        return;
                    }
                    else
                    {
                        // Just increment and focus quantity for manual confirmation
                        StateHasChanged();
                        if (_quantityField != null)
                        {
                            await Task.Delay(100);
                            await _quantityField.FocusAsync();
                        }
                        return;
                    }
                }
                
                // New product scan
                _currentProduct = foundProduct;
                Snackbar.Add(TranslationService.GetTranslation("warehouse.productFound", "Prodotto trovato: {0}", _currentProduct.Name), Severity.Success);
                AddOperationLog(
                    TranslationService.GetTranslation("warehouse.productFound", "Prodotto trovato"),
                    $"{_currentProduct.Name} ({_currentProduct.Code})",
                    "Success"
                );

                // FAST PROCEDURE: Setup inline form instead of showing dialog
                // Auto-select location if only one exists
                if (_locations?.Count == 1)
                {
                    _selectedLocationId = _locations[0].Id;
                    _selectedLocation = _locations[0];
                    // Focus on quantity field since location is auto-selected
                    StateHasChanged();
                    if (_quantityField != null)
                    {
                        await Task.Delay(100);
                        await _quantityField.FocusAsync();
                    }
                }
                else if (_locationAutocomplete != null)
                {
                    // Focus on location autocomplete if multiple locations
                    StateHasChanged();
                    await Task.Delay(100);
                    await _locationAutocomplete.FocusAsync();
                }
                else
                {
                    StateHasChanged();
                }
            }
            else
            {
                _currentProduct = null;
                AddOperationLog(
                    TranslationService.GetTranslation("warehouse.productNotFound", "Prodotto non trovato"),
                    $"Codice: {_scannedBarcode}",
                    "Warning"
                );
                
                // Product not found - show dialog to choose action
                await ShowProductNotFoundDialog();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error searching product by barcode {Barcode}", _scannedBarcode);
            Snackbar.Add(TranslationService.GetTranslation("warehouse.searchError", "Errore nella ricerca"), Severity.Error);
            AddOperationLog(
                TranslationService.GetTranslation("warehouse.searchError", "Errore nella ricerca"),
                ex.Message,
                "Error"
            );
        }
        finally
        {
            _isLoading = false;
        }
    }

    // FAST PROCEDURE: Removed ShowInventoryEntryDialog - using inline form instead

    private async Task AddInventoryRow()
    {
        if (_currentDocument == null || _currentProduct == null || !_selectedLocationId.HasValue || _quantity < 0)
            return;

        _isLoading = true;
        try
        {
            var location = _locations.FirstOrDefault(l => l.Id == _selectedLocationId.Value);
            var locationName = location?.Code ?? "N/A";

            var rowDto = new AddInventoryDocumentRowDto
            {
                ProductId = _currentProduct.Id,
                LocationId = _selectedLocationId.Value,
                Quantity = _quantity,
                Notes = _notes
            };

            var updatedDocument = await InventoryService.AddInventoryDocumentRowAsync(_currentDocument.Id, rowDto);

            if (updatedDocument != null)
            {
                _currentDocument = updatedDocument;
                
                // Track the last added row (find the most recent one by CreatedAt)
                _lastAddedRow = _currentDocument.Rows?
                    .Where(r => r.ProductId == _currentProduct.Id && 
                                r.LocationId == _selectedLocationId.Value && 
                                r.Quantity == _quantity)
                    .OrderByDescending(r => r.CreatedAt)
                    .FirstOrDefault();
                
                AddOperationLog(
                    TranslationService.GetTranslation("warehouse.itemAdded", "Articolo aggiunto"),
                    $"{_currentProduct.Name} - Ubicazione: {locationName} - Quantità: {_quantity}" + 
                    (!string.IsNullOrEmpty(_notes) ? $" - Note: {_notes}" : ""),
                    "Success"
                );

                Snackbar.Add(TranslationService.GetTranslation("warehouse.itemAdded", "Articolo aggiunto al documento"), Severity.Success);
                
                // Clear form and refocus on barcode
                ClearProductForm();
                
                // Force UI refresh to show the newly added item
                StateHasChanged();
            }
            else
            {
                Snackbar.Add(TranslationService.GetTranslation("warehouse.addItemError", "Errore nell'aggiunta dell'articolo"), Severity.Error);
                AddOperationLog(
                    TranslationService.GetTranslation("warehouse.addItemError", "Errore nell'aggiunta dell'articolo"),
                    $"Prodotto: {_currentProduct.Name}",
                    "Error"
                );
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error adding inventory row");
            Snackbar.Add(TranslationService.GetTranslation("warehouse.addItemError", "Errore nell'aggiunta dell'articolo"), Severity.Error);
            AddOperationLog(
                TranslationService.GetTranslation("warehouse.addItemError", "Errore nell'aggiunta dell'articolo"),
                ex.Message,
                "Error"
            );
        }
        finally
        {
            _isLoading = false;
        }
    }

    private void ClearProductForm()
    {
        _scannedBarcode = string.Empty;
        _currentProduct = null;
        _selectedLocationId = null;
        _selectedLocation = null;
        _quantity = 1; // Reset to 1 for next product
        _notes = string.Empty;
        
        if (_barcodeInput != null)
        {
            InvokeAsync(async () => await _barcodeInput.FocusAsync());
        }
    }

    // FAST PROCEDURE: Keyboard handlers for inline form
    private async Task OnLocationKeyDown(KeyboardEventArgs e)
    {
        // Tab or Enter to move to quantity field
        if ((e.Key == "Tab" || e.Key == "Enter") && _selectedLocationId.HasValue)
        {
            if (_quantityField != null)
            {
                await Task.Delay(100); // Small delay to ensure location is set
                await _quantityField.FocusAsync();
            }
        }
    }
    
    // Search function for location autocomplete
    private Task<IEnumerable<StorageLocationDto>> SearchLocations(string value, CancellationToken token)
    {
        if (string.IsNullOrWhiteSpace(value))
            return Task.FromResult(_locations.Take(MaxLocationSearchResults));
        
        var results = _locations
            .Where(l => l.Code.Contains(value, StringComparison.OrdinalIgnoreCase) ||
                       (l.Description?.Contains(value, StringComparison.OrdinalIgnoreCase) ?? false))
            .Take(MaxLocationSearchResults);
        
        return Task.FromResult(results);
    }
    
    // Handle location value change to sync the ID
    private void OnLocationChanged(StorageLocationDto? location)
    {
        _selectedLocation = location;
        _selectedLocationId = location?.Id;
    }

    private async Task OnQuantityKeyDown(KeyboardEventArgs e)
    {
        // Enter to submit if form is valid
        if (e.Key == "Enter" && !e.ShiftKey && _selectedLocationId.HasValue && _quantity >= 0)
        {
            await ConfirmAndNext();
        }
        else if (e.Key == "Escape")
        {
            // Cancel and clear form
            ClearProductForm();
        }
    }

    // FAST PROCEDURE: Confirm and add the product, then prepare for next scan
    private async Task ConfirmAndNext()
    {
        if (_currentProduct == null || !_selectedLocationId.HasValue || _quantity < 0)
            return;

        await AddInventoryRow();
    }

    private async Task FinalizeInventory()
    {
        if (_currentDocument == null)
            return;

        var confirmed = await DialogService.ShowMessageBox(
            TranslationService.GetTranslation("warehouse.confirmFinalize", "Conferma Finalizzazione"),
            TranslationService.GetTranslation("warehouse.finalizeMessage", 
                "Confermi di voler finalizzare l'inventario? Verranno applicati tutti gli aggiustamenti di stock per {0} articoli.", 
                _currentDocument.TotalItems),
            yesText: TranslationService.GetTranslation("common.yes", "Sì"),
            cancelText: TranslationService.GetTranslation("common.no", "No")
        );

        if (confirmed != true)
            return;

        _isLoading = true;
        try
        {
            AddOperationLog(
                TranslationService.GetTranslation("warehouse.finalizingInventory", "Finalizzazione inventario in corso"),
                $"Documento #{_currentDocument.Number} con {_currentDocument.TotalItems} articoli",
                "Info"
            );

            var finalizedDocument = await InventoryService.FinalizeInventoryDocumentAsync(_currentDocument.Id);

            if (finalizedDocument != null)
            {
                var sessionDuration = DateTime.UtcNow - _sessionStartTime;
                
                AddOperationLog(
                    TranslationService.GetTranslation("warehouse.inventoryFinalized", "Inventario finalizzato con successo"),
                    $"Durata sessione: {(int)sessionDuration.TotalMinutes} minuti - {_currentDocument.TotalItems} articoli processati",
                    "Success"
                );

                Snackbar.Add(TranslationService.GetTranslation("warehouse.inventoryFinalized", "Inventario finalizzato con successo"), Severity.Success);
                
                // Clear session state from localStorage
                await InventorySessionService.ClearSessionAsync();
                
                // Reset the session
                _currentDocument = null;
                ClearProductForm();
            }
            else
            {
                Snackbar.Add(TranslationService.GetTranslation("warehouse.finalizeError", "Errore nella finalizzazione"), Severity.Error);
                AddOperationLog(
                    TranslationService.GetTranslation("warehouse.finalizeError", "Errore nella finalizzazione"),
                    "",
                    "Error"
                );
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error finalizing inventory");
            Snackbar.Add(TranslationService.GetTranslation("warehouse.finalizeError", "Errore nella finalizzazione"), Severity.Error);
            AddOperationLog(
                TranslationService.GetTranslation("warehouse.finalizeError", "Errore nella finalizzazione"),
                ex.Message,
                "Error"
            );
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task CancelInventorySession()
    {
        if (_currentDocument == null)
            return;

        var confirmed = await DialogService.ShowMessageBox(
            TranslationService.GetTranslation("warehouse.confirmCancel", "Conferma Annullamento"),
            TranslationService.GetTranslation("warehouse.cancelMessage", 
                "Confermi di voler annullare la sessione di inventario? Tutti i dati inseriti ({0} articoli) andranno persi.", 
                _currentDocument.TotalItems),
            yesText: TranslationService.GetTranslation("common.yes", "Sì"),
            cancelText: TranslationService.GetTranslation("common.no", "No")
        );

        if (confirmed != true)
            return;

        AddOperationLog(
            TranslationService.GetTranslation("warehouse.sessionCanceled", "Sessione annullata"),
            $"Documento #{_currentDocument.Number} - {_currentDocument.TotalItems} articoli scartati",
            "Warning"
        );

        // Clear session state from localStorage
        await InventorySessionService.ClearSessionAsync();

        // Simply reset the document without finalizing
        _currentDocument = null;
        ClearProductForm();
        Snackbar.Add(TranslationService.GetTranslation("warehouse.sessionCanceled", "Sessione annullata"), Severity.Info);
    }

    private async Task ShowProductNotFoundDialog()
    {
        var parameters = new DialogParameters
        {
            { "Barcode", _scannedBarcode },
            { "IsInventoryContext", true }
        };

        var options = new DialogOptions
        {
            CloseOnEscapeKey = true,
            MaxWidth = MaxWidth.Medium,
            FullWidth = true
        };

        // Show a simple dialog to ask what the user wants to do
        var dialog = await DialogService.ShowAsync<ProductNotFoundDialog>(
            TranslationService.GetTranslation("warehouse.productNotFound", "Prodotto non trovato"),
            parameters,
            options
        );

        var result = await dialog.Result;

        if (!result.Canceled && result.Data != null)
        {
            // Try typed result first
            if (result.Data is ProductNotFoundDialog.AssignResult assignResult)
            {
                _currentProduct = assignResult.Product;
                
                Snackbar.Add(
                    TranslationService.GetTranslation("warehouse.barcodeAssignedAutoAdvance", "Codice assegnato: {0}. Procedi con l'inventario.", assignResult.Product.Name),
                    Severity.Success
                );
                
                // Auto-advance to inline form
                if (assignResult.AutoAdvanceToQuantity)
                {
                    // Auto-select location if only one exists
                    if (_locations?.Count == 1)
                    {
                        _selectedLocationId = _locations[0].Id;
                        _selectedLocation = _locations[0];
                        StateHasChanged();
                        if (_quantityField != null)
                        {
                            await Task.Delay(100);
                            await _quantityField.FocusAsync();
                        }
                    }
                    else if (_locationAutocomplete != null)
                    {
                        StateHasChanged();
                        await Task.Delay(100);
                        await _locationAutocomplete.FocusAsync();
                    }
                    else
                    {
                        StateHasChanged();
                    }
                }
                return;
            }
            
            // Handle string actions (create, skip)
            if (result.Data is string action)
            {
                if (action == "create")
                {
                    CreateNewProduct();
                }
                else if (action == "skip")
                {
                    // Skip this product and continue with inventory
                    Snackbar.Add(
                        TranslationService.GetTranslation("warehouse.productSkipped", "Prodotto saltato: {0}", _scannedBarcode), 
                        Severity.Info
                    );
                    AddOperationLog(
                        TranslationService.GetTranslation("warehouse.productSkipped", "Prodotto saltato"),
                        $"Codice: {_scannedBarcode}",
                        "Info"
                    );
                    
                    // Clear the form and refocus on barcode input
                    ClearProductForm();
                }
            }
            // FAST PROCEDURE: Fallback to reflection for backward compatibility
            else
            {
                try
                {
                    // Property names for reflection fallback
                    const string ActionPropertyName = "Action";
                    const string ActionPropertyNameLower = "action";
                    const string ProductPropertyName = "Product";
                    const string ProductPropertyNameLower = "product";
                    const string AutoAdvancePropertyName = "AutoAdvanceToQuantity";
                    const string AutoAdvancePropertyNameLower = "autoAdvanceToQuantity";
                    
                    // Try to get the assigned product info from the dialog result
                    var resultType = result.Data.GetType();
                    var actionProp = resultType.GetProperty(ActionPropertyName) ?? resultType.GetProperty(ActionPropertyNameLower);
                    var productProp = resultType.GetProperty(ProductPropertyName) ?? resultType.GetProperty(ProductPropertyNameLower);
                    var autoAdvanceProp = resultType.GetProperty(AutoAdvancePropertyName) ?? resultType.GetProperty(AutoAdvancePropertyNameLower);

                    if (actionProp != null && actionProp.GetValue(result.Data)?.ToString() == "assigned")
                    {
                        if (productProp != null && productProp.GetValue(result.Data) is ProductDto assignedProduct)
                        {
                            _currentProduct = assignedProduct;
                            
                            // Auto-advance to inline form
                            var autoAdvance = autoAdvanceProp != null && autoAdvanceProp.GetValue(result.Data) is bool autoVal && autoVal;
                            if (autoAdvance)
                            {
                                Snackbar.Add(
                                    TranslationService.GetTranslation("warehouse.barcodeAssignedAutoAdvance", "Codice assegnato: {0}. Procedi con l'inventario.", assignedProduct.Name),
                                    Severity.Success
                                );
                                
                                // Auto-select location if only one exists
                                if (_locations?.Count == 1)
                                {
                                    _selectedLocationId = _locations[0].Id;
                                    _selectedLocation = _locations[0];
                                    StateHasChanged();
                                    if (_quantityField != null)
                                    {
                                        await Task.Delay(100);
                                        await _quantityField.FocusAsync();
                                    }
                                }
                                else if (_locationAutocomplete != null)
                                {
                                    StateHasChanged();
                                    await Task.Delay(100);
                                    await _locationAutocomplete.FocusAsync();
                                }
                                else
                                {
                                    StateHasChanged();
                                }
                            }
                            else
                            {
                                // Fallback: just search again to load it
                                await SearchBarcode();
                            }
                        }
                    }
                }
                catch
                {
                    // Fallback: Product was assigned directly from the dialog, search again to load it
                    await SearchBarcode();
                }
            }
        }
        else
        {
            // Dialog was canceled, clear and refocus
            ClearProductForm();
        }
    }

    private void CreateNewProduct()
    {
        // Create a new ProductDto with the scanned barcode as Code
        _productForDrawer = new ProductDto
        {
            Code = _scannedBarcode,
            Name = string.Empty,
            Status = ProductStatus.Active
        };
        
        _productDrawerMode = EntityDrawerMode.Create;
        _productDrawerOpen = true;
    }
    
    private async Task HandleProductCreated(ProductDto createdProduct)
    {
        // Product created successfully, re-open ProductNotFoundDialog with the product pre-selected
        await ShowProductNotFoundDialogWithProduct(createdProduct);
    }
    
    private async Task ShowProductNotFoundDialogWithProduct(ProductDto preSelectedProduct)
    {
        var parameters = new DialogParameters
        {
            { "Barcode", _scannedBarcode },
            { "IsInventoryContext", true },
            { "PreSelectedProduct", preSelectedProduct }
        };

        var options = new DialogOptions
        {
            CloseOnEscapeKey = true,
            MaxWidth = MaxWidth.Medium,
            FullWidth = true
        };

        var dialog = await DialogService.ShowAsync<ProductNotFoundDialog>(
            TranslationService.GetTranslation("warehouse.productNotFound", "Prodotto non trovato"),
            parameters,
            options
        );

        var result = await dialog.Result;

        if (!result.Canceled && result.Data != null)
        {
            // Handle string actions (skip only, since create was already done)
            if (result.Data is string action)
            {
                if (action == "skip")
                {
                    // Skip this product and continue with inventory
                    Snackbar.Add(
                        TranslationService.GetTranslation("warehouse.productSkipped", "Prodotto saltato: {0}", _scannedBarcode), 
                        Severity.Info
                    );
                    AddOperationLog(
                        TranslationService.GetTranslation("warehouse.productSkipped", "Prodotto saltato"),
                        $"Codice: {_scannedBarcode}",
                        "Info"
                    );
                    
                    // Clear the form and refocus on barcode input
                    ClearProductForm();
                }
            }
            // Handle assignment result from integrated search
            else
            {
                // Product was assigned directly from the dialog, search again to load it
                await SearchBarcode();
            }
        }
    }

    private async Task EditInventoryRow(InventoryDocumentRowDto row)
    {
        if (_currentDocument == null)
            return;

        var parameters = new DialogParameters
        {
            { "Quantity", row.Quantity },
            { "Notes", row.Notes ?? string.Empty },
            { "ProductName", row.ProductName }
        };

        var options = new DialogOptions
        {
            CloseOnEscapeKey = true,
            MaxWidth = MaxWidth.Small,
            FullWidth = true
        };

        var dialog = await DialogService.ShowAsync<EditInventoryRowDialog>(
            TranslationService.GetTranslation("warehouse.editRow", "Modifica Riga Inventario"),
            parameters,
            options
        );

        var result = await dialog.Result;

        if (!result.Canceled && result.Data is EditInventoryRowDialog.EditInventoryRowResult editResult)
        {
            _isLoading = true;
            try
            {
                var updateDto = new UpdateInventoryDocumentRowDto
                {
                    Quantity = editResult.Quantity,
                    Notes = editResult.Notes
                };

                var updatedDocument = await InventoryService.UpdateInventoryDocumentRowAsync(_currentDocument.Id, row.Id, updateDto);

                if (updatedDocument != null)
                {
                    _currentDocument = updatedDocument;
                    
                    AddOperationLog(
                        TranslationService.GetTranslation("warehouse.rowUpdated", "Riga aggiornata"),
                        $"{row.ProductName} - Nuova quantità: {editResult.Quantity}",
                        "Success"
                    );

                    Snackbar.Add(TranslationService.GetTranslation("warehouse.rowUpdated", "Riga aggiornata con successo"), Severity.Success);
                    
                    StateHasChanged();
                }
                else
                {
                    Snackbar.Add(TranslationService.GetTranslation("warehouse.updateError", "Errore nell'aggiornamento della riga"), Severity.Error);
                    AddOperationLog(
                        TranslationService.GetTranslation("warehouse.updateError", "Errore nell'aggiornamento della riga"),
                        "",
                        "Error"
                    );
                }
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error updating inventory row {RowId}", row.Id);
                Snackbar.Add(TranslationService.GetTranslation("warehouse.updateError", "Errore nell'aggiornamento della riga"), Severity.Error);
                AddOperationLog(
                    TranslationService.GetTranslation("warehouse.updateError", "Errore nell'aggiornamento della riga"),
                    ex.Message,
                    "Error"
                );
            }
            finally
            {
                _isLoading = false;
            }
        }
    }

    private async Task DeleteInventoryRow(InventoryDocumentRowDto row)
    {
        if (_currentDocument == null)
            return;

        var confirmed = await DialogService.ShowMessageBox(
            TranslationService.GetTranslation("warehouse.confirmDelete", "Conferma Eliminazione"),
            TranslationService.GetTranslation("warehouse.deleteRowMessage", "Confermi di voler eliminare la riga per il prodotto '{0}'?", row.ProductName),
            yesText: TranslationService.GetTranslation("common.yes", "Sì"),
            cancelText: TranslationService.GetTranslation("common.no", "No")
        );

        if (confirmed != true)
            return;

        _isLoading = true;
        try
        {
            var updatedDocument = await InventoryService.DeleteInventoryDocumentRowAsync(_currentDocument.Id, row.Id);

            if (updatedDocument != null)
            {
                _currentDocument = updatedDocument;
                
                // Clear last added row if it was this row
                if (_lastAddedRow?.Id == row.Id)
                {
                    _lastAddedRow = null;
                }
                
                AddOperationLog(
                    TranslationService.GetTranslation("warehouse.rowDeleted", "Riga eliminata"),
                    $"{row.ProductName} - Quantità: {row.Quantity}",
                    "Success"
                );

                Snackbar.Add(TranslationService.GetTranslation("warehouse.rowDeleted", "Riga eliminata con successo"), Severity.Success);
                
                StateHasChanged();
            }
            else
            {
                Snackbar.Add(TranslationService.GetTranslation("warehouse.deleteError", "Errore nell'eliminazione della riga"), Severity.Error);
                AddOperationLog(
                    TranslationService.GetTranslation("warehouse.deleteError", "Errore nell'eliminazione della riga"),
                    "",
                    "Error"
                );
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error deleting inventory row {RowId}", row.Id);
            Snackbar.Add(TranslationService.GetTranslation("warehouse.deleteError", "Errore nell'eliminazione della riga"), Severity.Error);
            AddOperationLog(
                TranslationService.GetTranslation("warehouse.deleteError", "Errore nell'eliminazione della riga"),
                ex.Message,
                "Error"
            );
        }
        finally
        {
            _isLoading = false;
        }
    }
    
    private async Task UndoLastAsync()
    {
        if (_currentDocument == null || _lastAddedRow == null)
            return;

        _isLoading = true;
        try
        {
            var updatedDocument = await InventoryService.DeleteInventoryDocumentRowAsync(_currentDocument.Id, _lastAddedRow.Id);

            if (updatedDocument != null)
            {
                _currentDocument = updatedDocument;
                
                AddOperationLog(
                    TranslationService.GetTranslation("warehouse.undoLast", "Annulla ultima"),
                    $"Riga annullata: {_lastAddedRow.ProductName} - Quantità: {_lastAddedRow.Quantity}",
                    "Success"
                );

                Snackbar.Add(
                    TranslationService.GetTranslation("warehouse.undoLastSuccess", "Ultima riga annullata con successo"), 
                    Severity.Success
                );
                
                _lastAddedRow = null;
                StateHasChanged();
            }
            else
            {
                Snackbar.Add(
                    TranslationService.GetTranslation("warehouse.undoLastError", "Errore nell'annullamento dell'ultima riga"), 
                    Severity.Error
                );
                AddOperationLog(
                    TranslationService.GetTranslation("warehouse.undoLastError", "Errore nell'annullamento dell'ultima riga"),
                    "",
                    "Error"
                );
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error undoing last inventory row {RowId}", _lastAddedRow.Id);
            Snackbar.Add(
                TranslationService.GetTranslation("warehouse.undoLastError", "Errore nell'annullamento dell'ultima riga"), 
                Severity.Error
            );
            AddOperationLog(
                TranslationService.GetTranslation("warehouse.undoLastError", "Errore nell'annullamento dell'ultima riga"),
                ex.Message,
                "Error"
            );
        }
        finally
        {
            _isLoading = false;
        }
    }
}
