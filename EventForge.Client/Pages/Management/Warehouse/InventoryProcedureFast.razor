@page "/warehouse/inventory-procedure-fast"
@using Microsoft.AspNetCore.Authorization
@using EventForge.DTOs.Common
@using EventForge.DTOs.Warehouse
@using EventForge.DTOs.Products
@using EventForge.Client.Shared.Components
@using EventForge.Client.Shared.Components.Warehouse
@attribute [Authorize(Roles = "SuperAdmin,Admin,Manager,Operator")]
@inject IProductService ProductService
@inject IInventoryService InventoryService
@inject IStorageLocationService StorageLocationService
@inject IWarehouseService WarehouseService
@inject ISnackbar Snackbar
@inject ITranslationService TranslationService
@inject ILogger<InventoryProcedureFast> Logger
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject IInventorySessionService InventorySessionService

<PageTitle>@TranslationService.GetTranslation("warehouse.inventoryProcedureFast", "Procedura Inventario Rapida")</PageTitle>

<link href="css/inventory-fast.css" rel="stylesheet" />

<MudContainer MaxWidth="MaxWidth.False" Class="mt-4 px-0" Style="width:100%; min-height:100vh; display:flex; flex-direction:column;">
    <MudGrid Class="mb-4">
        <MudItem xs="12" md="8">
            <MudText Typo="Typo.h4">
                <MudIcon Icon="@Icons.Material.Outlined.Inventory" Class="mr-2" Size="Size.Medium" />
                @TranslationService.GetTranslation("warehouse.inventoryProcedureFast", "Procedura Inventario Rapida")
            </MudText>
            <MudText Typo="Typo.body2" Color="Color.Secondary">
                @TranslationService.GetTranslation("warehouse.fastProcedureDescription", "Procedura ottimizzata per scansioni rapide sequenziali senza popup")
            </MudText>
        </MudItem>
        <MudItem xs="12" md="4">
            <MudStack Row="true" Justify="Justify.FlexEnd" Spacing="2">
                <MudButton StartIcon="@Icons.Material.Outlined.Inventory" 
                           Color="Color.Default" 
                           Variant="Variant.Outlined"
                           OnClick="@(() => NavigationManager.NavigateTo("/warehouse/inventory-procedure"))">
                    @TranslationService.GetTranslation("warehouse.classicProcedure", "Procedura Classica")
                </MudButton>
                <MudButton StartIcon="@Icons.Material.Outlined.List" 
                           Color="Color.Default" 
                           Variant="Variant.Outlined"
                           OnClick="@(() => NavigationManager.NavigateTo("/warehouse/inventory-list"))">
                    @TranslationService.GetTranslation("warehouse.viewInventory", "Visualizza Inventario")
                </MudButton>
            </MudStack>
        </MudItem>
    </MudGrid>

    @if (_isLoading)
    {
        <MudProgressLinear Indeterminate="true" Class="mb-4" />
    }

    <!-- Inventory Header Component (session banner, stats, confirmations) -->
    <FastInventoryHeader 
        CurrentDocument="@_currentDocument"
        SessionStartTime="@_sessionStartTime"
        PositiveAdjustmentsCount="@GetPositiveAdjustmentsCount()"
        NegativeAdjustmentsCount="@GetNegativeAdjustmentsCount()"
        SessionDuration="@GetSessionDuration()"
        ShowFinalizeConfirmation="@_showFinalizeConfirmation"
        ShowCancelConfirmation="@_showCancelConfirmation"
        OnExport="@ExportInventoryDocument"
        OnRequestFinalize="@FinalizeInventory"
        OnConfirmFinalize="@ConfirmFinalizeAsync"
        OnCancelFinalize="@(() => _showFinalizeConfirmation = false)"
        OnRequestCancel="@CancelInventorySession"
        OnConfirmCancel="@ConfirmCancelAsync"
        OnCancelCancel="@(() => _showCancelConfirmation = false)" />

    <!-- Storage Facility Selection -->
    <MudPaper Elevation="2" Class="pa-4 mb-4">
        <MudText Typo="Typo.h6" Class="mb-3">
            <MudIcon Icon="@Icons.Material.Outlined.Warehouse" Class="mr-2" />
            @TranslationService.GetTranslation("warehouse.selectStorageFacility", "Seleziona Magazzino")
        </MudText>
        
        <MudGrid Spacing="3">
            <MudItem xs="12" md="8">
                <MudSelect T="Guid?"
                           @bind-Value="_selectedStorageFacilityId"
                           Label="@TranslationService.GetTranslation("warehouse.storageFacility", "Magazzino")"
                           Variant="Variant.Outlined"
                           Required="true"
                           Disabled="@(_currentDocument != null)"
                           Adornment="Adornment.Start"
                           AdornmentIcon="@Icons.Material.Outlined.Business">
                    @if (_storageFacilities != null)
                    {
                        @foreach (var facility in _storageFacilities)
                        {
                            <MudSelectItem T="Guid?" Value="@((Guid?)facility.Id)">@facility.Name - @facility.Code</MudSelectItem>
                        }
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12" md="4">
                @if (_currentDocument == null)
                {
                    <MudButton StartIcon="@Icons.Material.Outlined.PlayArrow" 
                               Color="Color.Primary" 
                               Variant="Variant.Filled"
                               FullWidth="true"
                               OnClick="@StartInventorySession"
                               Disabled="@(!_selectedStorageFacilityId.HasValue)">
                        @TranslationService.GetTranslation("warehouse.startSession", "Avvia Sessione")
                    </MudButton>
                }
                else
                {
                    <MudChip T="string" Color="Color.Success" Icon="@Icons.Material.Filled.CheckCircle" Size="Size.Large">
                        @TranslationService.GetTranslation("warehouse.sessionActive", "Sessione Attiva")
                    </MudChip>
                }
            </MudItem>
        </MudGrid>
    </MudPaper>

    <!-- Scanner and Product Entry Section - Responsive Layout -->
    @if (_currentDocument != null)
    {
        <MudGrid Spacing="3">
            <!-- Scanner Component -->
            <MudItem xs="12" lg="6">
                <FastScanner @ref="_scannerComponent"
                             BarcodeValue="@_scannedBarcode"
                             BarcodeValueChanged="@(v => _scannedBarcode = v)"
                             FastConfirmEnabledValue="@_fastConfirmEnabled"
                             FastConfirmEnabledValueChanged="@(v => _fastConfirmEnabled = v)"
                             OnBarcodeScanned="@HandleBarcodeScanned"
                             OnSearch="@(code => SearchBarcode())" />
            </MudItem>

            <!-- Product Entry or Not Found Panel -->
            <MudItem xs="12" lg="6">
                @if (_showAssignPanel)
                {
                    <FastNotFoundPanel 
                        ScannedBarcode="@_assignPanelBarcode"
                        SelectedProduct="@_assignSelectedProduct"
                        SelectedProductChanged="@(p => _assignSelectedProduct = p)"
                        CodeType="@_assignCodeType"
                        CodeTypeChanged="@(ct => _assignCodeType = ct)"
                        Code="@_assignCode"
                        CodeChanged="@(c => _assignCode = c)"
                        AlternativeDescription="@_assignAlternativeDescription"
                        AlternativeDescriptionChanged="@(ad => _assignAlternativeDescription = ad)"
                        IsLoading="@_isLoading"
                        OnSearchProducts="@SearchProductsForAssignment"
                        OnAssign="@AssignBarcodeToProductAsync"
                        OnSkip="@SkipAssignment"
                        OnOpenProducts="@OpenProductManagement" />
                }
                else if (_currentProduct != null)
                {
                    <FastProductEntryInline @ref="_productEntryComponent"
                        CurrentProduct="@_currentProduct"
                        SelectedLocation="@_selectedLocation"
                        SelectedLocationChanged="@(l => _selectedLocation = l)"
                        SelectedLocationId="@_selectedLocationId"
                        SelectedLocationIdChanged="@(id => _selectedLocationId = id)"
                        QuantityValue="@_quantity"
                        QuantityValueChanged="@(q => _quantity = q)"
                        NotesValue="@_notes"
                        NotesValueChanged="@(n => _notes = n)"
                        LastAddedRow="@_lastAddedRow"
                        OnSearchLocations="@SearchLocations"
                        OnConfirm="@ConfirmAndNext"
                        OnUndo="@UndoLastAsync" />
                }
            </MudItem>
        </MudGrid>

        <!-- Inventory Table Component -->
        <FastInventoryTable 
            Rows="@_currentDocument?.Rows"
            TotalItems="@(_currentDocument?.TotalItems ?? 0)"
            ShowOnlyAdjustmentsValue="@_showOnlyAdjustments"
            ShowOnlyAdjustmentsValueChanged="@(v => _showOnlyAdjustments = v)"
            EditingRowId="@_editingRowId"
            EditQuantityValue="@_editQuantity"
            EditQuantityValueChanged="@(q => _editQuantity = q)"
            ConfirmDeleteRowId="@_confirmDeleteRowId"
            OnBeginEdit="@BeginEditRow"
            OnSaveEdit="@SaveEditRowAsync"
            OnCancelEdit="@CancelEdit"
            OnRequestDelete="@StartDeleteConfirm"
            OnConfirmDelete="@ConfirmDeleteAsync"
            OnCancelDelete="@CancelDelete" />
    }
    else
    {
        <MudAlert Severity="Severity.Normal" Variant="Variant.Outlined" Class="mt-4">
            <MudText Typo="Typo.body1">
                @TranslationService.GetTranslation("warehouse.noSessionActive", "Nessuna sessione di inventario attiva. Seleziona un magazzino e avvia una nuova sessione per iniziare.")
            </MudText>
        </MudAlert>
    }
</MudContainer>

@code {
    // Component references
    private FastScanner? _scannerComponent;
    private FastProductEntryInline? _productEntryComponent;
    
    // State fields
    private bool _isLoading = false;
    private string _scannedBarcode = string.Empty;
    private ProductDto? _currentProduct;
    private List<StorageLocationDto> _locations = new();
    private List<StorageFacilityDto> _storageFacilities = new();
    private Guid? _selectedLocationId;
    private StorageLocationDto? _selectedLocation;
    private Guid? _selectedStorageFacilityId;
    private decimal _quantity = 1;
    private string _notes = string.Empty;
    private InventoryDocumentDto? _currentDocument = null;
    private DateTime _sessionStartTime = DateTime.UtcNow;
    private bool _showOnlyAdjustments = false;
    
    // Fast confirm toggle
    private bool _fastConfirmEnabled = true;
    
    // Undo last row tracking
    private InventoryDocumentRowDto? _lastAddedRow = null;
    
    // Location search constants
    private const int MaxLocationSearchResults = 20;
    
    // Inline product assignment panel state
    private bool _showAssignPanel = false;
    private string _assignPanelBarcode = string.Empty;
    private ProductDto? _assignSelectedProduct;
    private string _assignCodeType = "Barcode";
    private string _assignCode = string.Empty;
    private string? _assignAlternativeDescription;
    private List<ProductDto> _allProducts = new();
    
    // Inline row edit state
    private Guid? _editingRowId;
    private decimal _editQuantity;
    
    // Inline delete confirmation state
    private Guid? _confirmDeleteRowId;
    
    // Inline finalize/cancel confirmation state
    private bool _showFinalizeConfirmation = false;
    private bool _showCancelConfirmation = false;

    private int GetPositiveAdjustmentsCount()
    {
        if (_currentDocument?.Rows == null) return 0;
        return _currentDocument.Rows.Count(r => r.AdjustmentQuantity.HasValue && r.AdjustmentQuantity > 0);
    }

    private int GetNegativeAdjustmentsCount()
    {
        if (_currentDocument?.Rows == null) return 0;
        return _currentDocument.Rows.Count(r => r.AdjustmentQuantity.HasValue && r.AdjustmentQuantity < 0);
    }

    private string GetSessionDuration()
    {
        if (_currentDocument == null) return "00:00";
        
        var duration = DateTime.UtcNow - _sessionStartTime;
        return $"{(int)duration.TotalMinutes:D2}:{duration.Seconds:D2}";
    }

    private async Task ExportInventoryDocument()
    {
        if (_currentDocument == null) return;

        try
        {
            var csv = new System.Text.StringBuilder();
            csv.AppendLine("Codice Prodotto,Nome Prodotto,Ubicazione,Quantità Contata,Aggiustamento,Note,Data/Ora");
            
            foreach (var row in _currentDocument.Rows)
            {
                csv.AppendLine($"\"{row.ProductCode}\",\"{row.ProductName}\",\"{row.LocationName}\",{row.Quantity},{row.AdjustmentQuantity ?? 0},\"{row.Notes ?? ""}\",\"{row.CreatedAt.ToLocalTime():dd/MM/yyyy HH:mm:ss}\"");
            }

            var fileName = $"Inventario_{_currentDocument.Number}_{DateTime.Now:yyyyMMdd_HHmmss}.csv";
            await JSRuntime.InvokeVoidAsync("downloadCsv", fileName, csv.ToString());

            Snackbar.Add(TranslationService.GetTranslation("warehouse.exportSuccess", "Documento esportato con successo"), Severity.Success);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error exporting inventory document");
            Snackbar.Add(TranslationService.GetTranslation("warehouse.exportError", "Errore durante l'esportazione"), Severity.Error);
        }
    }

    private async Task RestoreInventorySessionAsync()
    {
        try
        {
            InventoryDocumentDto? document = null;
            Guid? warehouseId = null;
            DateTime? sessionStartTime = null;
            string restorationSource = "localStorage";

            var sessionState = await InventorySessionService.LoadSessionAsync();
            if (sessionState != null)
            {
                document = await InventoryService.GetInventoryDocumentAsync(sessionState.DocumentId);
                
                if (document != null && document.Status == "Open")
                {
                    warehouseId = sessionState.WarehouseId;
                    sessionStartTime = sessionState.SessionStartTime;
                }
                else
                {
                    await InventorySessionService.ClearSessionAsync();
                    document = null;
                    Logger.LogInformation("Inventory session in localStorage is invalid");
                }
            }

            if (document == null)
            {
                document = await InventoryService.GetMostRecentOpenInventoryDocumentAsync();
                if (document != null)
                {
                    warehouseId = document.WarehouseId;
                    sessionStartTime = document.CreatedAt;
                    restorationSource = "server";
                    
                    await InventorySessionService.SaveSessionAsync(new InventorySessionState
                    {
                        DocumentId = document.Id,
                        DocumentNumber = document.Number,
                        WarehouseId = warehouseId,
                        SessionStartTime = sessionStartTime ?? DateTime.UtcNow
                    });
                    
                    Logger.LogInformation("Inventory session restored from most recent open document: {DocumentId}", document.Id);
                }
            }

            if (document != null)
            {
                _currentDocument = document;
                _selectedStorageFacilityId = warehouseId;
                _sessionStartTime = sessionStartTime ?? DateTime.UtcNow;
                
                Snackbar.Add(TranslationService.GetTranslation("warehouse.sessionRestored", "Sessione di inventario ripristinata"), Severity.Info);
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error restoring inventory session");
            try
            {
                if (await InventorySessionService.HasActiveSessionAsync())
                {
                    await InventorySessionService.ClearSessionAsync();
                }
            }
            catch (Exception clearEx)
            {
                Logger.LogError(clearEx, "Error clearing invalid session");
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await Task.WhenAll(LoadStorageFacilities(), LoadLocations(), LoadProducts());
        await RestoreInventorySessionAsync();
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && _scannerComponent != null && _currentDocument != null)
        {
            await _scannerComponent.FocusAsync();
        }
    }

    private async Task LoadStorageFacilities()
    {
        _isLoading = true;
        try
        {
            var result = await WarehouseService.GetStorageFacilitiesAsync(1, 100);
            if (result?.Items != null)
            {
                _storageFacilities = result.Items.ToList();
                if (_storageFacilities.Count == 1)
                {
                    _selectedStorageFacilityId = _storageFacilities[0].Id;
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading storage facilities");
            Snackbar.Add(TranslationService.GetTranslation("warehouse.loadFacilitiesError", "Errore nel caricamento dei magazzini"), Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task LoadLocations()
    {
        _isLoading = true;
        try
        {
            var result = await StorageLocationService.GetStorageLocationsAsync(1, 100);
            if (result?.Items != null)
            {
                _locations = result.Items.ToList();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading storage locations");
            Snackbar.Add(TranslationService.GetTranslation("warehouse.loadLocationsError", "Errore nel caricamento ubicazioni"), Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task LoadProducts()
    {
        _isLoading = true;
        try
        {
            // Load more products for better autocomplete experience (up to 1000)
            var result = await ProductService.GetProductsAsync(1, 1000);
            if (result != null)
            {
                _allProducts = result.Items.ToList();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading products");
            Snackbar.Add(TranslationService.GetTranslation("products.loadError", "Errore nel caricamento prodotti"), Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task StartInventorySession()
    {
        if (!_selectedStorageFacilityId.HasValue) return;

        _isLoading = true;
        try
        {
            var createDto = new CreateInventoryDocumentDto
            {
                WarehouseId = _selectedStorageFacilityId,
                InventoryDate = DateTime.UtcNow,
                Notes = $"Inventario del {DateTime.Now:dd/MM/yyyy HH:mm}"
            };

            _currentDocument = await InventoryService.StartInventoryDocumentAsync(createDto);

            if (_currentDocument != null)
            {
                _sessionStartTime = DateTime.UtcNow;
                
                await InventorySessionService.SaveSessionAsync(new InventorySessionState
                {
                    DocumentId = _currentDocument.Id,
                    DocumentNumber = _currentDocument.Number,
                    WarehouseId = _selectedStorageFacilityId,
                    SessionStartTime = _sessionStartTime
                });

                Snackbar.Add(TranslationService.GetTranslation("warehouse.sessionStarted", "Sessione di inventario avviata"), Severity.Success);
                
                if (_scannerComponent != null)
                {
                    await InvokeAsync(async () => await _scannerComponent.FocusAsync());
                }
            }
            else
            {
                Snackbar.Add(TranslationService.GetTranslation("warehouse.sessionStartError", "Errore nell'avvio della sessione"), Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error starting inventory session");
            Snackbar.Add(TranslationService.GetTranslation("warehouse.sessionStartError", "Errore nell'avvio della sessione"), Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task HandleBarcodeScanned(string barcode)
    {
        _scannedBarcode = barcode;
        await SearchBarcode();
    }

    private async Task SearchBarcode()
    {
        if (string.IsNullOrWhiteSpace(_scannedBarcode)) return;

        _isLoading = true;
        try
        {
            var foundProduct = await ProductService.GetProductByCodeAsync(_scannedBarcode);

            if (foundProduct != null)
            {
                if (_currentProduct != null && _currentProduct.Id == foundProduct.Id && _selectedLocationId.HasValue)
                {
                    _quantity += 1;
                    
                    if (_fastConfirmEnabled)
                    {
                        await ConfirmAndNext();
                        return;
                    }
                    else
                    {
                        StateHasChanged();
                        if (_productEntryComponent != null)
                        {
                            await Task.Delay(100);
                            await _productEntryComponent.FocusQuantityAsync();
                        }
                        return;
                    }
                }
                
                _currentProduct = foundProduct;
                Snackbar.Add(TranslationService.GetTranslation("warehouse.productFound", "Prodotto trovato: {0}", _currentProduct.Name), Severity.Success);

                if (_locations?.Count == 1)
                {
                    _selectedLocationId = _locations[0].Id;
                    _selectedLocation = _locations[0];
                    StateHasChanged();
                    if (_productEntryComponent != null)
                    {
                        await Task.Delay(100);
                        await _productEntryComponent.FocusQuantityAsync();
                    }
                }
                else if (_productEntryComponent != null)
                {
                    StateHasChanged();
                    await Task.Delay(100);
                    await _productEntryComponent.FocusLocationAsync();
                }
                else
                {
                    StateHasChanged();
                }
            }
            else
            {
                _currentProduct = null;
                ShowAssignPanel(_scannedBarcode);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error searching product by barcode {Barcode}", _scannedBarcode);
            Snackbar.Add(TranslationService.GetTranslation("warehouse.searchError", "Errore nella ricerca"), Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }

    private void ShowAssignPanel(string barcode)
    {
        _assignPanelBarcode = barcode;
        _assignCode = barcode;
        _assignCodeType = "Barcode";
        _assignAlternativeDescription = null;
        _assignSelectedProduct = null;
        _showAssignPanel = true;
        StateHasChanged();
    }

    private void SkipAssignment()
    {
        Snackbar.Add(TranslationService.GetTranslation("warehouse.productSkipped", "Prodotto saltato: {0}", _assignPanelBarcode), Severity.Info);
        _showAssignPanel = false;
    }

    private void OpenProductManagement()
    {
        NavigationManager.NavigateTo("/product-management/products");
    }

    private Task<IEnumerable<ProductDto>> SearchProductsForAssignment(string value, CancellationToken token)
    {
        if (string.IsNullOrWhiteSpace(value))
            return Task.FromResult(_allProducts.Take(10));

        return Task.FromResult(_allProducts
            .Where(p => p.Name.Contains(value, StringComparison.OrdinalIgnoreCase) ||
                       p.Code.Contains(value, StringComparison.OrdinalIgnoreCase) ||
                       (!string.IsNullOrEmpty(p.ShortDescription) && p.ShortDescription.Contains(value, StringComparison.OrdinalIgnoreCase)) ||
                       (!string.IsNullOrEmpty(p.Description) && p.Description.Contains(value, StringComparison.OrdinalIgnoreCase)))
            .Take(20)
            .ToList() as IEnumerable<ProductDto>);
    }

    private async Task AssignBarcodeToProductAsync((Guid productId, string codeType, string code, string? altDesc) args)
    {
        _isLoading = true;
        try
        {
            var createCodeDto = new CreateProductCodeDto
            {
                ProductId = args.productId,
                CodeType = args.codeType,
                Code = args.code,
                AlternativeDescription = args.altDesc,
                Status = ProductCodeStatus.Active
            };

            var result = await ProductService.CreateProductCodeAsync(createCodeDto);

            if (result != null)
            {
                var productName = _assignSelectedProduct?.Name ?? "Product";
                Snackbar.Add(TranslationService.GetTranslation("products.barcodeAssignedSuccess", "Codice a barre assegnato con successo a {0}", productName), Severity.Success);

                _currentProduct = _assignSelectedProduct;
                _showAssignPanel = false;

                if (_locations?.Count == 1)
                {
                    _selectedLocationId = _locations[0].Id;
                    _selectedLocation = _locations[0];
                    StateHasChanged();
                    if (_productEntryComponent != null)
                    {
                        await Task.Delay(100);
                        await _productEntryComponent.FocusQuantityAsync();
                    }
                }
                else if (_productEntryComponent != null)
                {
                    StateHasChanged();
                    await Task.Delay(100);
                    await _productEntryComponent.FocusLocationAsync();
                }
                else
                {
                    StateHasChanged();
                }
            }
            else
            {
                Snackbar.Add(TranslationService.GetTranslation("products.assignError", "Errore nell'assegnazione del codice"), Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error assigning barcode to product");
            Snackbar.Add(TranslationService.GetTranslation("products.assignError", "Errore nell'assegnazione del codice"), Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task AddInventoryRow()
    {
        if (_currentDocument == null || _currentProduct == null || !_selectedLocationId.HasValue || _quantity < 0) return;

        _isLoading = true;
        try
        {
            var location = _locations.FirstOrDefault(l => l.Id == _selectedLocationId.Value);
            var locationName = location?.Code ?? "N/A";

            // Check if there's already a row with the same product and location
            var existingRow = _currentDocument.Rows?
                .FirstOrDefault(r => r.ProductId == _currentProduct.Id && r.LocationId == _selectedLocationId.Value);

            InventoryDocumentDto? updatedDocument = null;

            if (existingRow != null)
            {
                // Update existing row by summing quantities
                var newQuantity = existingRow.Quantity + _quantity;
                
                // Determine notes for the updated row
                string? combinedNotes;
                if (string.IsNullOrEmpty(_notes))
                {
                    combinedNotes = existingRow.Notes;
                }
                else if (string.IsNullOrEmpty(existingRow.Notes))
                {
                    combinedNotes = _notes;
                }
                else
                {
                    combinedNotes = $"{existingRow.Notes}; {_notes}";
                }
                
                var updateDto = new UpdateInventoryDocumentRowDto 
                { 
                    Quantity = newQuantity, 
                    Notes = combinedNotes
                };
                
                updatedDocument = await InventoryService.UpdateInventoryDocumentRowAsync(_currentDocument.Id, existingRow.Id, updateDto);
                
                if (updatedDocument != null)
                {
                    Snackbar.Add(TranslationService.GetTranslation("warehouse.quantityUpdated", "Quantità aggiornata nel documento"), Severity.Success);
                }
            }
            else
            {
                // Add new row
                var rowDto = new AddInventoryDocumentRowDto
                {
                    ProductId = _currentProduct.Id,
                    LocationId = _selectedLocationId.Value,
                    Quantity = _quantity,
                    Notes = _notes
                };

                updatedDocument = await InventoryService.AddInventoryDocumentRowAsync(_currentDocument.Id, rowDto);
                
                if (updatedDocument != null)
                {
                    Snackbar.Add(TranslationService.GetTranslation("warehouse.itemAdded", "Articolo aggiunto al documento"), Severity.Success);
                }
            }

            if (updatedDocument != null)
            {
                _currentDocument = updatedDocument;
                
                _lastAddedRow = _currentDocument.Rows?
                    .Where(r => r.ProductId == _currentProduct.Id && r.LocationId == _selectedLocationId.Value)
                    .OrderByDescending(r => r.CreatedAt)
                    .FirstOrDefault();
                
                ClearProductForm();
                StateHasChanged();
            }
            else
            {
                Snackbar.Add(TranslationService.GetTranslation("warehouse.addItemError", "Errore nell'aggiunta dell'articolo"), Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error adding inventory row");
            Snackbar.Add(TranslationService.GetTranslation("warehouse.addItemError", "Errore nell'aggiunta dell'articolo"), Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }

    private void ClearProductForm()
    {
        _scannedBarcode = string.Empty;
        _currentProduct = null;
        _selectedLocationId = null;
        _selectedLocation = null;
        _quantity = 1;
        _notes = string.Empty;
        
        if (_scannerComponent != null)
        {
            _scannerComponent.ClearBarcode();
            InvokeAsync(async () => await _scannerComponent.FocusAsync());
        }
    }
    
    private Task<IEnumerable<StorageLocationDto>> SearchLocations(string value, CancellationToken token)
    {
        if (string.IsNullOrWhiteSpace(value))
            return Task.FromResult(_locations.Take(MaxLocationSearchResults));
        
        var results = _locations
            .Where(l => l.Code.Contains(value, StringComparison.OrdinalIgnoreCase) ||
                       (l.Description?.Contains(value, StringComparison.OrdinalIgnoreCase) ?? false))
            .Take(MaxLocationSearchResults);
        
        return Task.FromResult(results);
    }

    private async Task ConfirmAndNext()
    {
        if (_currentProduct == null || !_selectedLocationId.HasValue || _quantity < 0) return;
        await AddInventoryRow();
    }

    private void FinalizeInventory()
    {
        if (_currentDocument == null) return;
        _showFinalizeConfirmation = true;
        StateHasChanged();
    }

    private async Task ConfirmFinalizeAsync()
    {
        if (_currentDocument == null) return;

        _showFinalizeConfirmation = false;
        _isLoading = true;
        try
        {
            var finalizedDocument = await InventoryService.FinalizeInventoryDocumentAsync(_currentDocument.Id);

            if (finalizedDocument != null)
            {
                Snackbar.Add(TranslationService.GetTranslation("warehouse.inventoryFinalized", "Inventario finalizzato con successo"), Severity.Success);
                await InventorySessionService.ClearSessionAsync();
                _currentDocument = null;
                ClearProductForm();
            }
            else
            {
                Snackbar.Add(TranslationService.GetTranslation("warehouse.finalizeError", "Errore nella finalizzazione"), Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error finalizing inventory");
            Snackbar.Add(TranslationService.GetTranslation("warehouse.finalizeError", "Errore nella finalizzazione"), Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }

    private void CancelInventorySession()
    {
        if (_currentDocument == null) return;
        _showCancelConfirmation = true;
        StateHasChanged();
    }

    private async Task ConfirmCancelAsync()
    {
        if (_currentDocument == null) return;

        _showCancelConfirmation = false;
        await InventorySessionService.ClearSessionAsync();
        _currentDocument = null;
        ClearProductForm();
        Snackbar.Add(TranslationService.GetTranslation("warehouse.sessionCanceled", "Sessione annullata"), Severity.Info);
    }

    private void BeginEditRow(Guid rowId)
    {
        var row = _currentDocument?.Rows?.FirstOrDefault(r => r.Id == rowId);
        if (row == null) return;
        
        _editingRowId = row.Id;
        _editQuantity = row.Quantity;
        StateHasChanged();
    }

    private async Task SaveEditRowAsync(Guid rowId)
    {
        if (_currentDocument == null || _editingRowId == null) return;

        var row = _currentDocument.Rows?.FirstOrDefault(r => r.Id == rowId);
        if (row == null) return;

        _isLoading = true;
        try
        {
            var updateDto = new UpdateInventoryDocumentRowDto { Quantity = _editQuantity };
            var updatedDocument = await InventoryService.UpdateInventoryDocumentRowAsync(_currentDocument.Id, row.Id, updateDto);

            if (updatedDocument != null)
            {
                _currentDocument = updatedDocument;
                Snackbar.Add(TranslationService.GetTranslation("warehouse.rowUpdated", "Riga aggiornata con successo"), Severity.Success);
                _editingRowId = null;
                StateHasChanged();
            }
            else
            {
                Snackbar.Add(TranslationService.GetTranslation("warehouse.updateError", "Errore nell'aggiornamento della riga"), Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error updating inventory row {RowId}", rowId);
            Snackbar.Add(TranslationService.GetTranslation("warehouse.updateError", "Errore nell'aggiornamento della riga"), Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }

    private void CancelEdit()
    {
        _editingRowId = null;
        _editQuantity = 0;
        StateHasChanged();
    }

    private void StartDeleteConfirm(Guid rowId)
    {
        _confirmDeleteRowId = rowId;
        StateHasChanged();
    }

    private async Task ConfirmDeleteAsync(Guid rowId)
    {
        if (_currentDocument == null) return;

        var row = _currentDocument.Rows?.FirstOrDefault(r => r.Id == rowId);
        if (row == null) return;

        _isLoading = true;
        try
        {
            var updatedDocument = await InventoryService.DeleteInventoryDocumentRowAsync(_currentDocument.Id, row.Id);

            if (updatedDocument != null)
            {
                _currentDocument = updatedDocument;
                if (_lastAddedRow?.Id == row.Id) _lastAddedRow = null;
                Snackbar.Add(TranslationService.GetTranslation("warehouse.rowDeleted", "Riga eliminata con successo"), Severity.Success);
                _confirmDeleteRowId = null;
                StateHasChanged();
            }
            else
            {
                Snackbar.Add(TranslationService.GetTranslation("warehouse.deleteError", "Errore nell'eliminazione della riga"), Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error deleting inventory row {RowId}", rowId);
            Snackbar.Add(TranslationService.GetTranslation("warehouse.deleteError", "Errore nell'eliminazione della riga"), Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }

    private void CancelDelete()
    {
        _confirmDeleteRowId = null;
        StateHasChanged();
    }
    
    private async Task UndoLastAsync()
    {
        if (_currentDocument == null || _lastAddedRow == null) return;

        _isLoading = true;
        try
        {
            var updatedDocument = await InventoryService.DeleteInventoryDocumentRowAsync(_currentDocument.Id, _lastAddedRow.Id);

            if (updatedDocument != null)
            {
                _currentDocument = updatedDocument;
                Snackbar.Add(TranslationService.GetTranslation("warehouse.undoLastSuccess", "Ultima riga annullata con successo"), Severity.Success);
                _lastAddedRow = null;
                StateHasChanged();
            }
            else
            {
                Snackbar.Add(TranslationService.GetTranslation("warehouse.undoLastError", "Errore nell'annullamento dell'ultima riga"), Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error undoing last inventory row {RowId}", _lastAddedRow.Id);
            Snackbar.Add(TranslationService.GetTranslation("warehouse.undoLastError", "Errore nell'annullamento dell'ultima riga"), Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }
}
