@page "/warehouse/inventory-list"
@using Microsoft.AspNetCore.Authorization
@using EventForge.DTOs.Common
@using EventForge.DTOs.Warehouse
@using EventForge.Client.Shared.Components
@using EventForge.Client.Services
@attribute [Authorize(Roles = "SuperAdmin,Admin,Manager,Operator")]
@inject IInventoryService InventoryService
@inject ISnackbar Snackbar
@inject ITranslationService TranslationService
@inject ILogger<InventoryList> Logger
@inject NavigationManager NavigationManager
@inject IDialogService DialogService

<PageTitle>@TranslationService.GetTranslation("warehouse.inventoryDocuments", "Documenti di Inventario")</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudGrid Class="mb-4">
        <MudItem xs="12" md="8">
            <MudText Typo="Typo.h4">
                <MudIcon Icon="@Icons.Material.Outlined.Inventory2" Class="mr-2" Size="Size.Medium" />
                @TranslationService.GetTranslation("warehouse.inventoryDocuments", "Documenti di Inventario")
            </MudText>
        </MudItem>
        <MudItem xs="12" md="4">
            <MudStack Row="true" Justify="Justify.FlexEnd" Spacing="2">
                <MudButton StartIcon="@Icons.Material.Outlined.Add" 
                           Color="Color.Primary" 
                           Variant="Variant.Filled"
                           OnClick="@(() => NavigationManager.NavigateTo("/warehouse/inventory-procedure"))">
                    @TranslationService.GetTranslation("warehouse.newInventory", "Nuova Procedura")
                </MudButton>
                <MudButton StartIcon="@Icons.Material.Outlined.Refresh" 
                           Color="Color.Default" 
                           Variant="Variant.Outlined"
                           OnClick="@LoadInventoryDocuments">
                    @TranslationService.GetTranslation("common.refresh", "Aggiorna")
                </MudButton>
            </MudStack>
        </MudItem>
    </MudGrid>

    @if (_isLoading)
    {
        <MudProgressLinear Indeterminate="true" Class="mb-4" />
    }

    <MudCard Elevation="2">
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h6">
                    <MudIcon Icon="@Icons.Material.Outlined.Inventory2" Class="mr-2" />
                    @TranslationService.GetTranslation("warehouse.documentsList", "Lista Documenti")
                </MudText>
            </CardHeaderContent>
            <CardHeaderActions>
                <ActionButtonGroup Mode="ActionButtonGroupMode.Toolbar"
                                   ShowRefresh="true"
                                   ShowExport="true"
                                   ShowCreate="true"
                                   CreateIcon="@Icons.Material.Outlined.Add"
                                   CreateTooltip="@TranslationService.GetTranslation("warehouse.newInventory", "Nuova Procedura")"
                                   IsDisabled="_isLoading"
                                   OnRefresh="@LoadInventoryDocuments"
                                   OnExport="@ExportDocuments"
                                   OnCreate="@CreateNewInventory" />
            </CardHeaderActions>
        </MudCardHeader>
        <MudCardContent>
        <!-- Filter Section -->
        <MudGrid Class="mb-4" Style="background-color: var(--mud-palette-background-grey); padding: 16px; border-radius: 4px;">
            <MudItem xs="12" md="3">
                <MudSelect T="string" 
                           Label="@TranslationService.GetTranslation("common.status", "Stato")" 
                           @bind-Value="_filterStatus" 
                           Clearable="true"
                           OnClearButtonClick="@(() => { _filterStatus = null; _ = LoadInventoryDocuments(); })">
                    <MudSelectItem Value="@("Draft")">@TranslationService.GetTranslation("document.status.draft", "Bozza")</MudSelectItem>
                    <MudSelectItem Value="@("Closed")">@TranslationService.GetTranslation("document.status.closed", "Chiuso")</MudSelectItem>
                </MudSelect>
            </MudItem>
            <MudItem xs="12" md="3">
                <MudDatePicker Label="@TranslationService.GetTranslation("common.fromDate", "Da data")" 
                              @bind-Date="_filterFromDate" 
                              Clearable="true" />
            </MudItem>
            <MudItem xs="12" md="3">
                <MudDatePicker Label="@TranslationService.GetTranslation("common.toDate", "A data")" 
                              @bind-Date="_filterToDate" 
                              Clearable="true" />
            </MudItem>
            <MudItem xs="12" md="3">
                <MudButton StartIcon="@Icons.Material.Outlined.FilterAlt" 
                           Color="Color.Primary" 
                           Variant="Variant.Outlined"
                           FullWidth="true"
                           OnClick="@LoadInventoryDocuments"
                           Class="mt-3">
                    @TranslationService.GetTranslation("common.filter", "Filtra")
                </MudButton>
            </MudItem>
        </MudGrid>

        <!-- Statistics -->
        <MudGrid Class="mb-4">
            <MudItem xs="12" md="12">
                <MudText Typo="Typo.h6">
                    @TranslationService.GetTranslation("warehouse.totalDocuments", "Totale Documenti: {0}", _totalCount)
                </MudText>
            </MudItem>
        </MudGrid>

        <!-- Documents Table -->
        <MudTable Items="_inventoryDocuments" Hover="true" Dense="true" Loading="_isLoading" Striped="true">
            <HeaderContent>
                <MudTh>@TranslationService.GetTranslation("document.number", "Numero")</MudTh>
                <MudTh>@TranslationService.GetTranslation("document.date", "Data")</MudTh>
                <MudTh>@TranslationService.GetTranslation("warehouse.warehouse", "Magazzino")</MudTh>
                <MudTh>@TranslationService.GetTranslation("document.status", "Stato")</MudTh>
                <MudTh>@TranslationService.GetTranslation("document.totalItems", "Articoli")</MudTh>
                <MudTh>@TranslationService.GetTranslation("common.createdBy", "Creato Da")</MudTh>
                <MudTh>@TranslationService.GetTranslation("common.createdAt", "Data Creazione")</MudTh>
                <MudTh Class="text-center">@TranslationService.GetTranslation("common.actions", "Azioni")</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Number">
                    <MudText Typo="Typo.body2" Style="font-weight: 600;">@context.Number</MudText>
                    @if (!string.IsNullOrEmpty(context.Series))
                    {
                        <MudText Typo="Typo.caption" Color="Color.Secondary">@context.Series</MudText>
                    }
                </MudTd>
                <MudTd DataLabel="Date">@context.InventoryDate.ToLocalTime().ToString("dd/MM/yyyy")</MudTd>
                <MudTd DataLabel="Warehouse">@(context.WarehouseName ?? "-")</MudTd>
                <MudTd DataLabel="Status">
                    @if (context.Status == "Draft")
                    {
                        <MudChip T="string" Color="Color.Warning" Size="Size.Small" Icon="@Icons.Material.Outlined.Edit">@TranslationService.GetTranslation("document.status.draft", "Bozza")</MudChip>
                    }
                    else if (context.Status == "Closed")
                    {
                        <MudChip T="string" Color="Color.Success" Size="Size.Small" Icon="@Icons.Material.Outlined.CheckCircle">@TranslationService.GetTranslation("document.status.closed", "Chiuso")</MudChip>
                    }
                    else
                    {
                        <MudChip T="string" Color="Color.Default" Size="Size.Small">@context.Status</MudChip>
                    }
                </MudTd>
                <MudTd DataLabel="TotalItems">
                    <MudText Typo="Typo.body2">@context.TotalItems</MudText>
                </MudTd>
                <MudTd DataLabel="CreatedBy">@(context.CreatedBy ?? "-")</MudTd>
                <MudTd DataLabel="CreatedAt">@context.CreatedAt.ToLocalTime().ToString("dd/MM/yyyy HH:mm")</MudTd>
                <MudTd DataLabel="Actions" Class="text-center">
                    <ActionButtonGroup EntityName="@TranslationService.GetTranslation("warehouse.inventoryDocument", "Documento Inventario")"
                                      ItemDisplayName="@context.Number"
                                      ShowView="true"
                                      ShowEdit="false"
                                      ShowAuditLog="false"
                                      ShowToggleStatus="false"
                                      ShowDelete="false"
                                      OnView="@(() => ViewDocumentDetails(context))">
                        <AdditionalActions>
                            @if (context.Status == "Draft")
                            {
                                <MudTooltip Text="@TranslationService.GetTranslation("warehouse.finalizeDocument", "Finalizza Documento")">
                                    <MudIconButton Icon="@Icons.Material.Outlined.CheckCircle"
                                                   Color="Color.Success"
                                                   Size="Size.Small"
                                                   OnClick="@(() => FinalizeDocument(context))"
                                                   aria-label="@TranslationService.GetTranslation("warehouse.finalizeDocument", "Finalizza Documento")" />
                                </MudTooltip>
                            }
                        </AdditionalActions>
                    </ActionButtonGroup>
                </MudTd>
            </RowTemplate>
            <NoRecordsContent>
                <MudText Align="Align.Center" Class="pa-4">
                    <MudIcon Icon="@Icons.Material.Outlined.Inventory2" Size="Size.Large" Color="Color.Secondary" Class="mb-2" />
                    <br />
                    @TranslationService.GetTranslation("warehouse.noInventoryDocuments", "Nessun documento di inventario trovato")
                </MudText>
            </NoRecordsContent>
        </MudTable>

        <!-- Pagination -->
        @if (_totalCount > 0)
        {
            <MudPagination 
                Class="mt-4" 
                Count="@((int)((_totalCount + _pageSize - 1) / _pageSize))" 
                Selected="@_currentPage" 
                SelectedChanged="@OnPageChanged" 
                ShowFirstButton="true" 
                ShowLastButton="true" />
        }
        </MudCardContent>
    </MudCard>
</MudContainer>

@code {
    private bool _isLoading = false;
    private List<InventoryDocumentDto> _inventoryDocuments = new();
    private int _currentPage = 1;
    private int _pageSize = 20;
    private long _totalCount = 0;

    // Filters
    private string? _filterStatus = null;
    private DateTime? _filterFromDate = null;
    private DateTime? _filterToDate = null;

    protected override async Task OnInitializedAsync()
    {
        await LoadInventoryDocuments();
    }

    private async Task LoadInventoryDocuments()
    {
        _isLoading = true;
        try
        {
            var result = await InventoryService.GetInventoryDocumentsAsync(
                _currentPage, 
                _pageSize,
                _filterStatus,
                _filterFromDate,
                _filterToDate);
                
            if (result != null)
            {
                _inventoryDocuments = result.Items.ToList();
                _totalCount = result.TotalCount;
            }
            else
            {
                Snackbar.Add(TranslationService.GetTranslation("warehouse.loadInventoryError", "Errore nel caricamento inventario"), Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading inventory documents");
            Snackbar.Add(TranslationService.GetTranslation("warehouse.loadInventoryError", "Errore nel caricamento inventario"), Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task OnPageChanged(int page)
    {
        _currentPage = page;
        await LoadInventoryDocuments();
    }

    private async Task ViewDocumentDetails(InventoryDocumentDto document)
    {
        var parameters = new DialogParameters
        {
            { "Document", document },
            { "OnFinalize", EventCallback.Factory.Create<InventoryDocumentDto>(this, OnDocumentFinalized) }
        };

        var options = new DialogOptions 
        { 
            MaxWidth = MaxWidth.Large,
            FullWidth = true,
            CloseButton = true
        };

        await DialogService.ShowAsync<InventoryDocumentDetailsDialog>(
            TranslationService.GetTranslation("warehouse.documentDetails", "Dettagli Documento"),
            parameters,
            options);
    }

    private async Task FinalizeDocument(InventoryDocumentDto document)
    {
        var confirmTitle = TranslationService.GetTranslation("common.confirm", "Conferma");
        var confirmMessage = TranslationService.GetTranslation("warehouse.confirmFinalizeDocument", 
            "Sei sicuro di voler finalizzare il documento '{0}'? Una volta finalizzato, il documento non potrà più essere modificato e gli aggiustamenti di stock verranno applicati.", 
            document.Number);

        var confirm = await DialogService.ShowMessageBox(
            confirmTitle,
            confirmMessage,
            yesText: TranslationService.GetTranslation("common.confirm", "Conferma"),
            cancelText: TranslationService.GetTranslation("common.cancel", "Annulla"));

        if (confirm == true)
        {
            try
            {
                _isLoading = true;
                var result = await InventoryService.FinalizeInventoryDocumentAsync(document.Id);
                
                if (result != null)
                {
                    Snackbar.Add(
                        TranslationService.GetTranslation("warehouse.documentFinalized", "Documento finalizzato con successo!"), 
                        Severity.Success);
                    
                    // Reload the list to reflect the change
                    await LoadInventoryDocuments();
                }
                else
                {
                    Snackbar.Add(
                        TranslationService.GetTranslation("warehouse.finalizeDocumentError", "Errore nella finalizzazione del documento"), 
                        Severity.Error);
                }
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error finalizing inventory document {DocumentId}", document.Id);
                Snackbar.Add(
                    TranslationService.GetTranslation("warehouse.finalizeDocumentError", "Errore nella finalizzazione del documento: {0}", ex.Message), 
                    Severity.Error);
            }
            finally
            {
                _isLoading = false;
            }
        }
    }

    private void CreateNewInventory()
    {
        NavigationManager.NavigateTo("/warehouse/inventory-procedure");
    }

    private async Task ExportDocuments()
    {
        try
        {
            Snackbar.Add(
                TranslationService.GetTranslation("common.exportNotImplemented", "Funzione di esportazione non ancora implementata"), 
                Severity.Info);
            await Task.CompletedTask;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error exporting inventory documents");
            Snackbar.Add(
                TranslationService.GetTranslation("common.exportError", "Errore nell'esportazione"), 
                Severity.Error);
        }
    }

    private async Task OnDocumentFinalized(InventoryDocumentDto document)
    {
        // Reload the list when a document is finalized from the details dialog
        await LoadInventoryDocuments();
    }
}
