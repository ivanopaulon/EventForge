@page "/business/suppliers"
@using Microsoft.AspNetCore.Authorization
@using EventForge.DTOs.Business
@using EventForge.Client.Shared.Components
@attribute [Authorize]
@inject IAuthService AuthService
@inject IBusinessPartyService BusinessPartyService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject ITranslationService TranslationService
@inject ILogger<SupplierManagement> Logger

<PageTitle>@TranslationService.GetTranslation("supplier.management", "Gestione Fornitori")</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4" Style="height:100vh; display:flex; flex-direction:column;">
    <!-- Page loading overlay -->
    <PageLoadingOverlay IsVisible="_isLoading" 
                         Message="@TranslationService.GetTranslation("messages.loadingPage", "Caricamento pagina...")" />

    <MudPaper Elevation="1" Class="pa-3 mb-4" Style="min-height:0;">
        <MudText Typo="Typo.h4">
            <MudIcon Icon="@Icons.Material.Outlined.LocalShipping" Class="mr-2" />
            @TranslationService.GetTranslation("supplier.management", "Gestione Fornitori")
        </MudText>
    </MudPaper>

    <MudPaper Elevation="1" Class="pa-4 flex-grow-1 d-flex flex-column" Style="min-height:0;">
        <MudTextField @bind-Value="_searchTerm"
                      Placeholder="@TranslationService.GetTranslation("supplier.searchPlaceholder", "Cerca fornitori...")"
                      Variant="Variant.Outlined"
                      Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Outlined.Search" />
        <div Style="overflow:auto; min-height:0; flex:1;">
            <MudTable Items="@_filteredSuppliers" 
                  Loading="_isLoadingSuppliers || _isLoading" 
                  Hover="true" 
                  Striped="true" 
                  Class="mt-3">
            <HeaderContent>
                <MudTh>@TranslationService.GetTranslation("field.name", "Nome")</MudTh>
                <MudTh>@TranslationService.GetTranslation("field.code", "Codice")</MudTh>
                <MudTh>@TranslationService.GetTranslation("field.contacts", "Contatti")</MudTh>
                <MudTh>@TranslationService.GetTranslation("common.actions", "Azioni")</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>@context.Name</MudTd>
                <MudTd>-</MudTd>
                <MudTd>
                    <MudChip T="string" Size="Size.Small" Icon="@Icons.Material.Outlined.Phone">@context.ContactCount</MudChip>
                </MudTd>
                <MudTd>
                    <MudButton Size="Size.Small" Variant="Variant.Text" OnClick="@(() => EditSupplier(context))">
                        @TranslationService.GetTranslation("common.edit", "Modifica")
                    </MudButton>
                </MudTd>
            </RowTemplate>
        </MudTable>
        </div>
    </MudPaper>
</MudContainer>

@code {
    private bool _isLoading = true;
    private bool _isLoadingSuppliers = false;
    private string _searchTerm = string.Empty;
    private List<BusinessPartyDto> _suppliers = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadSuppliersAsync();
        _isLoading = false;
    }

    private async Task LoadSuppliersAsync()
    {
        try
        {
            _isLoadingSuppliers = true;
            // Get suppliers (Supplier type)
            var suppliers = await BusinessPartyService.GetBusinessPartiesByTypeAsync(EventForge.DTOs.Common.BusinessPartyType.Supplier);
            
            // Get both types (Both)
            var both = await BusinessPartyService.GetBusinessPartiesByTypeAsync(EventForge.DTOs.Common.BusinessPartyType.Both);
            
            // Combine and sort
            _suppliers = suppliers.Concat(both).OrderBy(s => s.Name).ToList();
        }
        catch (Exception ex)
        {
            Snackbar.Add(TranslationService.GetTranslation("supplier.loadingError", "Errore nel caricamento dei fornitori: {0}", ex.Message), Severity.Error);
            Logger.LogError(ex, "Error loading suppliers");
        }
        finally
        {
            _isLoadingSuppliers = false;
            StateHasChanged();
        }
    }

    /// <summary>
    /// Computed property for filtered suppliers based on search criteria.
    /// </summary>
    private IEnumerable<BusinessPartyDto> _filteredSuppliers => 
        _suppliers.Where(s => 
            // Search filter: check name, VAT number, or tax code
            (string.IsNullOrEmpty(_searchTerm) || 
             s.Name.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase) ||
             (s.VatNumber != null && s.VatNumber.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase)) ||
             (s.TaxCode != null && s.TaxCode.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase))));

    private async Task EditSupplier(BusinessPartyDto supplier)
    {
        Snackbar.Add(TranslationService.GetTranslation("common.notImplemented", "Funzionalit√† non ancora implementata"), Severity.Info);
    }
}
