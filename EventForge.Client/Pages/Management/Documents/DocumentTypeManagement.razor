@page "/documents/types"
@using Microsoft.AspNetCore.Authorization
@using EventForge.DTOs.Documents
@using EventForge.DTOs.Common
@using EventForge.Client.Shared.Components
@attribute [Authorize]
@inject IAuthService AuthService
@inject IDocumentTypeService DocumentTypeService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject ITranslationService TranslationService
@inject ILogger<DocumentTypeManagement> Logger

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <PageLoadingOverlay IsVisible="_isLoading || _isLoadingDocumentTypes"
                        Message="@(_isLoading ? TranslationService.GetTranslation("messages.loadingPage", "Caricamento pagina...") : TranslationService.GetTranslation("common.loading", "Caricamento..."))" />

    @if (_isLoading)
    {
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
    }
    else
    {
        <MudPaper Elevation="2" Class="pa-2 pa-sm-3 pa-md-4 mb-4">
            <div class="d-flex justify-space-between align-center mb-4">
                <div>
                    <MudText Typo="Typo.h4">
                        <MudIcon Icon="@Icons.Material.Outlined.Category" Class="mr-2" />
                        @TranslationService.GetTranslation("documentType.management", "Gestione Tipi Documento")
                    </MudText>
                    <MudText Typo="Typo.body2" Class="mud-text-secondary mt-2">
                        @TranslationService.GetTranslation("documentType.managementDescription", "Gestisci i tipi di documento utilizzati nel sistema")
                    </MudText>
                </div>
            </div>

            <!-- Filters Section -->
            <MudPaper Elevation="0" Class="pa-3 mb-4" Style="background-color: var(--mud-palette-background-grey);">
                <div class="d-flex gap-3 align-center flex-wrap">
                    <MudTextField @bind-Value="_searchTerm"
                                  @bind-Value:after="OnSearchChanged"
                                  Class="ef-input"
                                  Label="@TranslationService.GetTranslation("documentType.search", "Cerca tipi documento")"
                                  Placeholder="@TranslationService.GetTranslation("documentType.searchPlaceholder", "Inserisci nome o codice...")"
                                  Variant="Variant.Outlined"
                                  Adornment="Adornment.End"
                                  AdornmentIcon="@Icons.Material.Outlined.Search"
                                  Clearable="true"
                                  Style="flex: 2;" />
                    <MudSwitch @bind-Value="_showOnlyFiscal"
                               @bind-Value:after="OnFilterChanged"
                               Label="@TranslationService.GetTranslation("documentType.onlyFiscal", "Solo fiscali")"
                               Color="Color.Primary" />
                    <MudSwitch @bind-Value="_showOnlyStockIncrease"
                               @bind-Value:after="OnFilterChanged"
                               Label="@TranslationService.GetTranslation("documentType.onlyStockIncrease", "Solo aumento stock")"
                               Color="Color.Success" />
                </div>
            </MudPaper>

            <!-- Document Types Data Table -->
            <MudPaper Elevation="1" Class="border-rounded">
                <MudCardHeader Class="pa-2">
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">
                            <MudIcon Icon="@Icons.Material.Outlined.List" Class="mr-2" />
                            @TranslationService.GetTranslation("documentType.list", "Lista Tipi Documento")
                            <MudText Typo="Typo.body2" Class="mud-text-secondary ml-2">
                                (@_filteredDocumentTypes.Count() @TranslationService.GetTranslation("common.itemsFound", "elementi trovati"))
                            </MudText>
                        </MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        <ActionButtonGroup Mode="ActionButtonGroupMode.Toolbar"
                                           ShowRefresh="true"
                                           ShowExport="false" 
                                           ShowCreate="true"
                                           ShowAuditLog="false"
                                           CreateIcon="@Icons.Material.Outlined.Add"
                                           CreateTooltip="@TranslationService.GetTranslation("documentType.createNew", "Crea nuovo tipo documento")"
                                           IsDisabled="_isLoadingDocumentTypes"
                                           OnRefresh="@LoadDocumentTypesAsync"
                                           OnCreate="@CreateDocumentType" />
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardContent Class="pa-1">
                    @if (_isLoadingDocumentTypes)
                    {
                        <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="mt-4" />
                    }
                    else
                    {
                        <MudTable T="DocumentTypeDto" 
                                  Items="_filteredDocumentTypes" 
                                  Hover="true" 
                                  Striped="true"
                                  Loading="_isLoadingDocumentTypes"
                                  LoadingProgressColor="Color.Info"
                                  SortLabel="@TranslationService.GetTranslation("tooltip.sortColumn", "Ordina colonna")"
                                  AllowUnsorted="false"
                                  FixedHeader="true"
                                  Height="60vh">
                            <HeaderContent>
                                <MudTh><MudTableSortLabel SortBy="new Func<DocumentTypeDto, object>(x => x.Code)">@TranslationService.GetTranslation("field.code", "Codice")</MudTableSortLabel></MudTh>
                                <MudTh><MudTableSortLabel SortBy="new Func<DocumentTypeDto, object>(x => x.Name)">@TranslationService.GetTranslation("field.name", "Nome")</MudTableSortLabel></MudTh>
                                <MudTh>@TranslationService.GetTranslation("field.isFiscal", "Fiscale")</MudTh>
                                <MudTh>@TranslationService.GetTranslation("field.isStockIncrease", "Aumento Stock")</MudTh>
                                <MudTh>@TranslationService.GetTranslation("field.requiredPartyType", "Tipo Controparte")</MudTh>
                                <MudTh>@TranslationService.GetTranslation("field.defaultWarehouse", "Magazzino Predefinito")</MudTh>
                                <MudTh><MudTableSortLabel SortBy="new Func<DocumentTypeDto, object>(x => x.CreatedAt)">@TranslationService.GetTranslation("field.createdAt", "Creato il")</MudTableSortLabel></MudTh>
                                <MudTh Style="text-align: right;">@TranslationService.GetTranslation("field.actions", "Azioni")</MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd DataLabel="@TranslationService.GetTranslation("field.code", "Codice")">
                                    <MudChip T="string" Size="Size.Small" Color="Color.Primary">@context.Code</MudChip>
                                </MudTd>
                                <MudTd DataLabel="@TranslationService.GetTranslation("field.name", "Nome")">
                                    <strong>@context.Name</strong>
                                </MudTd>
                                <MudTd DataLabel="@TranslationService.GetTranslation("field.isFiscal", "Fiscale")">
                                    @if (context.IsFiscal)
                                    {
                                        <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success" Size="Size.Small" />
                                    }
                                    else
                                    {
                                        <MudIcon Icon="@Icons.Material.Filled.Cancel" Color="Color.Default" Size="Size.Small" />
                                    }
                                </MudTd>
                                <MudTd DataLabel="@TranslationService.GetTranslation("field.isStockIncrease", "Aumento Stock")">
                                    @if (context.IsStockIncrease)
                                    {
                                        <MudIcon Icon="@Icons.Material.Filled.TrendingUp" Color="Color.Success" Size="Size.Small" />
                                    }
                                    else
                                    {
                                        <MudIcon Icon="@Icons.Material.Filled.TrendingDown" Color="Color.Error" Size="Size.Small" />
                                    }
                                </MudTd>
                                <MudTd DataLabel="@TranslationService.GetTranslation("field.requiredPartyType", "Tipo Controparte")">
                                    @GetBusinessPartyTypeText(context.RequiredPartyType)
                                </MudTd>
                                <MudTd DataLabel="@TranslationService.GetTranslation("field.defaultWarehouse", "Magazzino Predefinito")">
                                    @(context.DefaultWarehouseName ?? "-")
                                </MudTd>
                                <MudTd DataLabel="@TranslationService.GetTranslation("field.createdAt", "Creato il")">
                                    @context.CreatedAt.ToString("dd/MM/yyyy")
                                </MudTd>
                                <MudTd DataLabel="@TranslationService.GetTranslation("field.actions", "Azioni")" Style="text-align: right;">
                                    <ActionButtonGroup EntityName="@context.Name"
                                                       ItemDisplayName="@context.Name"
                                                       ShowView="false"
                                                       ShowEdit="true"
                                                       ShowAuditLog="true"
                                                       ShowDelete="true"
                                                       OnEdit="@(() => EditDocumentType(context.Id))"
                                                       OnAuditLog="@(() => ViewDocumentTypeAuditLog(context))"
                                                       OnDelete="@(() => DeleteDocumentType(context))" />
                                </MudTd>
                            </RowTemplate>
                            <NoRecordsContent>
                                <div class="pa-4 text-center">
                                    <MudIcon Icon="@Icons.Material.Outlined.SearchOff" Size="Size.Large" Class="mb-2" />
                                    <MudText Typo="Typo.body1">
                                        @TranslationService.GetTranslation("documentType.noDocumentTypesFound", "Nessun tipo documento trovato")
                                    </MudText>
                                    @if (!string.IsNullOrWhiteSpace(_searchTerm) || _showOnlyFiscal || _showOnlyStockIncrease)
                                    {
                                        <MudButton Variant="Variant.Text"
                                                   Color="Color.Primary"
                                                   OnClick="ClearFilters"
                                                   Class="mt-2">
                                            @TranslationService.GetTranslation("action.clearFilters", "Cancella filtri")
                                        </MudButton>
                                    }
                                </div>
                            </NoRecordsContent>
                        </MudTable>
                    }
                </MudCardContent>
            </MudPaper>
        </MudPaper>
    }
</MudContainer>

<!-- Audit History Drawer -->
<AuditHistoryDrawer @bind-IsOpen="_auditDrawerOpen"
                    EntityType="DocumentType"
                    EntityId="@_selectedDocumentTypeForAudit?.Id"
                    EntityName="@_selectedDocumentTypeForAudit?.Name" />

@code {
    private IEnumerable<DocumentTypeDto> _documentTypes = new List<DocumentTypeDto>();
    private IEnumerable<DocumentTypeDto> _filteredDocumentTypes = new List<DocumentTypeDto>();
    private bool _isLoading = true;
    private bool _isLoadingDocumentTypes = false;
    private bool _auditDrawerOpen = false;
    private string _searchTerm = string.Empty;
    private bool _showOnlyFiscal = false;
    private bool _showOnlyStockIncrease = false;
    private DocumentTypeDto? _selectedDocumentTypeForAudit;

    protected override async Task OnInitializedAsync()
    {
        await LoadDocumentTypesAsync();
        _isLoading = false;
    }

    private async Task LoadDocumentTypesAsync()
    {
        try
        {
            _isLoadingDocumentTypes = true;
            StateHasChanged();

            var result = await DocumentTypeService.GetAllDocumentTypesAsync();
            _documentTypes = result ?? new List<DocumentTypeDto>();
            ApplyFilters();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading document types");
            Snackbar.Add(
                $"{TranslationService.GetTranslation("documentType.loadError", "Errore nel caricamento dei tipi documento")}: {ex.Message}",
                Severity.Error);
        }
        finally
        {
            _isLoadingDocumentTypes = false;
            StateHasChanged();
        }
    }

    private void ApplyFilters()
    {
        _filteredDocumentTypes = _documentTypes;

        if (!string.IsNullOrWhiteSpace(_searchTerm))
        {
            var searchLower = _searchTerm.ToLower();
            _filteredDocumentTypes = _filteredDocumentTypes.Where(dt =>
                (dt.Name?.ToLower().Contains(searchLower) ?? false) ||
                (dt.Code?.ToLower().Contains(searchLower) ?? false) ||
                (dt.Notes?.ToLower().Contains(searchLower) ?? false));
        }

        if (_showOnlyFiscal)
        {
            _filteredDocumentTypes = _filteredDocumentTypes.Where(dt => dt.IsFiscal);
        }

        if (_showOnlyStockIncrease)
        {
            _filteredDocumentTypes = _filteredDocumentTypes.Where(dt => dt.IsStockIncrease);
        }
    }

    private void OnSearchChanged()
    {
        ApplyFilters();
        StateHasChanged();
    }

    private void OnFilterChanged()
    {
        ApplyFilters();
        StateHasChanged();
    }

    private void ClearFilters()
    {
        _searchTerm = string.Empty;
        _showOnlyFiscal = false;
        _showOnlyStockIncrease = false;
        ApplyFilters();
        StateHasChanged();
    }

    private void CreateDocumentType()
    {
        NavigationManager.NavigateTo("/documents/types/new");
    }

    private void EditDocumentType(Guid id)
    {
        NavigationManager.NavigateTo($"/documents/types/{id}");
    }

    private async Task DeleteDocumentType(DocumentTypeDto documentType)
    {
        var confirmed = await DialogService.ShowMessageBox(
            TranslationService.GetTranslation("action.confirm", "Conferma"),
            TranslationService.GetTranslation("documentType.confirmDelete", $"Sei sicuro di voler eliminare il tipo documento '{documentType.Name}'?"),
            yesText: TranslationService.GetTranslation("action.delete", "Elimina"),
            cancelText: TranslationService.GetTranslation("action.cancel", "Annulla"));

        if (confirmed == true)
        {
            try
            {
                await DocumentTypeService.DeleteDocumentTypeAsync(documentType.Id);
                Snackbar.Add(
                    TranslationService.GetTranslation("documentType.deleteSuccess", "Tipo documento eliminato con successo"),
                    Severity.Success);
                await LoadDocumentTypesAsync();
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error deleting document type {DocumentTypeId}", documentType.Id);
                Snackbar.Add(
                    TranslationService.GetTranslation("documentType.deleteError", "Errore nell'eliminazione del tipo documento"),
                    Severity.Error);
            }
        }
    }
    
    private async Task ViewDocumentTypeAuditLog(DocumentTypeDto documentType)
    {
        _selectedDocumentTypeForAudit = documentType;
        _auditDrawerOpen = true;
        await Task.CompletedTask;
    }

    private string GetBusinessPartyTypeText(BusinessPartyType type)
    {
        return type switch
        {
            BusinessPartyType.Customer => TranslationService.GetTranslation("businessPartyType.customer", "Cliente"),
            BusinessPartyType.Supplier => TranslationService.GetTranslation("businessPartyType.supplier", "Fornitore"),
            BusinessPartyType.Both => TranslationService.GetTranslation("businessPartyType.both", "Entrambi"),
            _ => "-"
        };
    }
}
