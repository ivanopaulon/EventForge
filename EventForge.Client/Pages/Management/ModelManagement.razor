@page "/product-management/models"
@using Microsoft.AspNetCore.Authorization
@using EventForge.DTOs.Products
@using EventForge.DTOs.Common
@using EventForge.Client.Shared.Components
@attribute [Authorize]
@inject IAuthService AuthService
@inject IModelService ModelService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject ITranslationService TranslationService
@inject ILogger<ModelManagement> Logger

<MudContainer MaxWidth="MaxWidth.False" Class="mt-4">
    @if (_isLoading)
    {
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
    }
    else
    {
        <MudPaper Elevation="2" Class="pa-4 mb-4">
            <div class="d-flex justify-space-between align-center mb-4">
                <div>
                    <MudText Typo="Typo.h4">
                        <MudIcon Icon="@Icons.Material.Outlined.Category" Class="mr-2" />
                        @TranslationService.GetTranslation("model.management", "Gestione Modelli")
                    </MudText>
                    <MudText Typo="Typo.body2" Class="mud-text-secondary mt-2">
                        @TranslationService.GetTranslation("model.managementDescription", "Gestisci i modelli dei prodotti")
                    </MudText>
                </div>
            </div>

            <MudPaper Elevation="0" Class="pa-3 mb-4" Style="background-color: var(--mud-palette-background-grey);">
                <div class="d-flex gap-4 align-center flex-wrap">
                    <MudTextField @bind-Value="_searchTerm"
                                  @bind-Value:after="OnSearchChanged"
                                  Label="@TranslationService.GetTranslation("model.search", "Cerca modelli")"
                                  Placeholder="@TranslationService.GetTranslation("model.searchPlaceholder", "Inserisci nome...")"
                                  Variant="Variant.Outlined"
                                  Adornment="Adornment.End"
                                  AdornmentIcon="@Icons.Material.Outlined.Search"
                                  Clearable="true"
                                  Style="flex: 2;" />
                </div>
            </MudPaper>

            <MudPaper Elevation="1" Class="border-rounded">
                <MudCardHeader Class="pa-2">
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">
                            <MudIcon Icon="@Icons.Material.Outlined.List" Class="mr-2" />
                            @TranslationService.GetTranslation("model.list", "Lista Modelli")
                            <MudText Typo="Typo.body2" Class="mud-text-secondary ml-2">
                                (@_filteredModels.Count() @TranslationService.GetTranslation("common.itemsFound", "elementi trovati"))
                            </MudText>
                        </MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        <ActionButtonGroup Mode="ActionButtonGroupMode.Toolbar"
                                           ShowRefresh="true"
                                           ShowExport="false" 
                                           ShowCreate="true"
                                           ShowAuditLog="false"
                                           CreateIcon="@Icons.Material.Outlined.Add"
                                           CreateTooltip="@TranslationService.GetTranslation("model.createNew", "Crea nuovo modello")"
                                           IsDisabled="_isLoadingModels"
                                           OnRefresh="@LoadModelsAsync"
                                           OnCreate="@OpenCreateModelDrawer" />
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardContent Class="pa-1">
                    @if (_isLoadingModels)
                    {
                        <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="mt-4" />
                    }
                    else
                    {
                        <MudTable T="ModelDto" 
                                  Items="_filteredModels" 
                                  Hover="true" 
                                  Striped="true"
                                  Loading="_isLoadingModels"
                                  LoadingProgressColor="Color.Info"
                                  SortLabel="@TranslationService.GetTranslation("tooltip.sortColumn", "Ordina colonna")"
                                  AllowUnsorted="false"
                                  FixedHeader="true"
                                  Height="60vh">
                            <HeaderContent>
                                <MudTh><MudTableSortLabel SortBy="new Func<ModelDto, object>(x => x.Name)">@TranslationService.GetTranslation("field.name", "Nome")</MudTableSortLabel></MudTh>
                                <MudTh><MudTableSortLabel SortBy="new Func<ModelDto, object>(x => x.BrandName ?? "")">@TranslationService.GetTranslation("field.brand", "Marchio")</MudTableSortLabel></MudTh>
                                <MudTh>@TranslationService.GetTranslation("field.description", "Descrizione")</MudTh>
                                <MudTh>@TranslationService.GetTranslation("field.mpn", "MPN")</MudTh>
                                <MudTh><MudTableSortLabel SortBy="new Func<ModelDto, object>(x => x.CreatedAt)">@TranslationService.GetTranslation("field.createdAt", "Creato il")</MudTableSortLabel></MudTh>
                                <MudTh Style="text-align: right;">@TranslationService.GetTranslation("field.actions", "Azioni")</MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd DataLabel="@TranslationService.GetTranslation("field.name", "Nome")">
                                    <strong>@context.Name</strong>
                                </MudTd>
                                <MudTd DataLabel="@TranslationService.GetTranslation("field.brand", "Marchio")">
                                    @(context.BrandName ?? "-")
                                </MudTd>
                                <MudTd DataLabel="@TranslationService.GetTranslation("field.description", "Descrizione")">
                                    @if (!string.IsNullOrWhiteSpace(context.Description))
                                    {
                                        <span>@(context.Description.Length > 50 ? context.Description.Substring(0, 50) + "..." : context.Description)</span>
                                    }
                                    else
                                    {
                                        <span class="mud-text-secondary">-</span>
                                    }
                                </MudTd>
                                <MudTd DataLabel="@TranslationService.GetTranslation("field.mpn", "MPN")">
                                    @(context.ManufacturerPartNumber ?? "-")
                                </MudTd>
                                <MudTd DataLabel="@TranslationService.GetTranslation("field.createdAt", "Creato il")">
                                    @context.CreatedAt.ToString("dd/MM/yyyy")
                                </MudTd>
                                <MudTd DataLabel="@TranslationService.GetTranslation("field.actions", "Azioni")" Style="text-align: right;">
                                    <ActionButtonGroup EntityName="@context.Name"
                                                       ItemDisplayName="@context.Name"
                                                       ShowView="true"
                                                       ShowEdit="true"
                                                       ShowDelete="true"
                                                       OnView="@(() => ViewModel(context.Id))"
                                                       OnEdit="@(() => EditModel(context.Id))"
                                                       OnDelete="@(() => DeleteModel(context))" />
                                </MudTd>
                            </RowTemplate>
                            <NoRecordsContent>
                                <div class="pa-4 text-center">
                                    <MudIcon Icon="@Icons.Material.Outlined.SearchOff" Size="Size.Large" Class="mb-2" />
                                    <MudText Typo="Typo.body1">
                                        @TranslationService.GetTranslation("model.noModelsFound", "Nessun modello trovato")
                                    </MudText>
                                    @if (!string.IsNullOrWhiteSpace(_searchTerm))
                                    {
                                        <MudButton Variant="Variant.Text"
                                                   Color="Color.Primary"
                                                   OnClick="ClearFilters"
                                                   Class="mt-2">
                                            @TranslationService.GetTranslation("action.clearFilters", "Cancella filtri")
                                        </MudButton>
                                    }
                                </div>
                            </NoRecordsContent>
                        </MudTable>
                    }
                </MudCardContent>
            </MudPaper>
        </MudPaper>
    }
</MudContainer>

<ModelDrawer @ref="_modelDrawer" OnEntitySaved="HandleModelSaved" />

@code {
    private ModelDrawer _modelDrawer = default!;
    private IEnumerable<ModelDto> _models = new List<ModelDto>();
    private IEnumerable<ModelDto> _filteredModels = new List<ModelDto>();
    private bool _isLoading = true;
    private bool _isLoadingModels = false;
    private string _searchTerm = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadModelsAsync();
        _isLoading = false;
    }

    private async Task LoadModelsAsync()
    {
        try
        {
            _isLoadingModels = true;
            StateHasChanged();

            var result = await ModelService.GetModelsAsync(page: 1, pageSize: 1000);
            _models = result.Items ?? new List<ModelDto>();
            ApplyFilters();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading models");
            Snackbar.Add(
                TranslationService.GetTranslation("model.loadError", "Errore nel caricamento dei modelli"),
                Severity.Error);
        }
        finally
        {
            _isLoadingModels = false;
            StateHasChanged();
        }
    }

    private void ApplyFilters()
    {
        _filteredModels = _models;

        if (!string.IsNullOrWhiteSpace(_searchTerm))
        {
            var searchLower = _searchTerm.ToLower();
            _filteredModels = _filteredModels.Where(m =>
                (m.Name?.ToLower().Contains(searchLower) ?? false) ||
                (m.BrandName?.ToLower().Contains(searchLower) ?? false) ||
                (m.Description?.ToLower().Contains(searchLower) ?? false) ||
                (m.ManufacturerPartNumber?.ToLower().Contains(searchLower) ?? false));
        }
    }

    private void OnSearchChanged()
    {
        ApplyFilters();
        StateHasChanged();
    }

    private void ClearFilters()
    {
        _searchTerm = string.Empty;
        ApplyFilters();
        StateHasChanged();
    }

    private void OpenCreateModelDrawer()
    {
        _modelDrawer.OpenForCreate();
    }

    private void ViewModel(Guid id)
    {
        _modelDrawer.OpenForView(id);
    }

    private void EditModel(Guid id)
    {
        _modelDrawer.OpenForEdit(id);
    }

    private async Task DeleteModel(ModelDto model)
    {
        var confirmed = await DialogService.ShowMessageBox(
            TranslationService.GetTranslation("action.confirm", "Conferma"),
            TranslationService.GetTranslation("model.confirmDelete", $"Sei sicuro di voler eliminare il modello '{model.Name}'?"),
            yesText: TranslationService.GetTranslation("action.delete", "Elimina"),
            cancelText: TranslationService.GetTranslation("action.cancel", "Annulla"));

        if (confirmed == true)
        {
            try
            {
                await ModelService.DeleteModelAsync(model.Id);
                Snackbar.Add(
                    TranslationService.GetTranslation("model.deleteSuccess", "Modello eliminato con successo"),
                    Severity.Success);
                await LoadModelsAsync();
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error deleting model {ModelId}", model.Id);
                Snackbar.Add(
                    TranslationService.GetTranslation("model.deleteError", "Errore nell'eliminazione del modello"),
                    Severity.Error);
            }
        }
    }

    private async Task HandleModelSaved()
    {
        await LoadModelsAsync();
    }
}
