@page "/management/classification-nodes"
@using Microsoft.AspNetCore.Authorization
@using EventForge.DTOs.Common
@using EventForge.Client.Shared.Components
@attribute [Authorize]
@inject IAuthService AuthService
@inject IEntityManagementService EntityManagementService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject ITranslationService TranslationService
@inject ILogger<ClassificationNodeManagement> Logger

<style>
    .matched-node { background-color: rgba(255,235,59,0.15); border-radius:4px; padding:2px 6px; display:inline-block; }
    .match-badge { font-size:0.8rem; margin-left:8px; vertical-align:middle; }
</style>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <PageLoadingOverlay IsVisible="_isLoading || _isLoadingNodes"
                         Message="@(_isLoading ? TranslationService.GetTranslation("messages.loadingPage", "Caricamento pagina...") : TranslationService.GetTranslation("common.loading", "Caricamento..."))" />

    @if (_isLoading)
    {
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
    }
    else
    {
        <MudPaper Elevation="2" Class="pa-2 pa-sm-3 pa-md-4 mb-4">
            <div class="d-flex justify-space-between align-center mb-4">
                <div>
                    <MudText Typo="Typo.h4">
                        <MudIcon Icon="@Icons.Material.Outlined.AccountTree" Class="mr-2" />
                        @TranslationService.GetTranslation("classificationNode.management", "Gestione Nodi di Classificazione")
                    </MudText>
                    <MudText Typo="Typo.body2" Class="mud-text-secondary mt-2">
                        @TranslationService.GetTranslation("classificationNode.managementDescription", "Gestisci la struttura gerarchica dei nodi di classificazione prodotto")
                    </MudText>
                </div>
            </div>

            <MudPaper Elevation="0" Class="pa-3 mb-4" Style="background-color: var(--mud-palette-background-grey);">
                <div class="d-flex gap-3 align-center flex-wrap">
                    <MudTextField @bind-Value="_searchTerm" @bind-Value:after="OnSearchChanged"
                                  Label="@TranslationService.GetTranslation("classificationNode.search","Cerca nodi")"
                                  Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Outlined.Search"
                                  Clearable="true" Style="flex:2;" />
                    <MudSelect T="ProductClassificationType?" @bind-Value="_typeFilter" @bind-Value:after="OnTypeFilterChanged" Variant="Variant.Outlined" Style="flex:1;">
                        <MudSelectItem T="ProductClassificationType?" Value="@((ProductClassificationType?)null)">@TranslationService.GetTranslation("common.selectAll","Tutti")</MudSelectItem>
                        <MudSelectItem T="ProductClassificationType?" Value="@ProductClassificationType.Category">@TranslationService.GetTranslation("classificationType.category","Categoria")</MudSelectItem>
                        <MudSelectItem T="ProductClassificationType?" Value="@ProductClassificationType.Family">@TranslationService.GetTranslation("classificationType.family","Famiglia")</MudSelectItem>
                        <MudSelectItem T="ProductClassificationType?" Value="@ProductClassificationType.MerchandiseGroup">@TranslationService.GetTranslation("classificationType.merchandiseGroup","Gruppo Merceologico")</MudSelectItem>
                    </MudSelect>
                    <MudSelect T="ProductClassificationNodeStatus?" @bind-Value="_statusFilter" @bind-Value:after="OnStatusFilterChanged" Variant="Variant.Outlined" Style="flex:1;">
                        <MudSelectItem T="ProductClassificationNodeStatus?" Value="@((ProductClassificationNodeStatus?)null)">@TranslationService.GetTranslation("common.selectAll","Tutti")</MudSelectItem>
                        <MudSelectItem T="ProductClassificationNodeStatus?" Value="@ProductClassificationNodeStatus.Active">@TranslationService.GetTranslation("status.active","Attivo")</MudSelectItem>
                        <MudSelectItem T="ProductClassificationNodeStatus?" Value="@ProductClassificationNodeStatus.Inactive">@TranslationService.GetTranslation("status.inactive","Inattivo")</MudSelectItem>
                        <MudSelectItem T="ProductClassificationNodeStatus?" Value="@ProductClassificationNodeStatus.Pending">@TranslationService.GetTranslation("status.pending","In attesa")</MudSelectItem>
                    </MudSelect>
                </div>
            </MudPaper>

            <MudPaper Elevation="1" Class="border-rounded">
                <div class="pa-2">
                    <MudText Typo="Typo.h6" Class="mb-2">
                        <MudIcon Icon="@Icons.Material.Outlined.List" Class="mr-2" />
                        @TranslationService.GetTranslation("classificationNode.list","Lista Nodi")
                        <MudText Typo="Typo.body2" Class="mud-text-secondary ml-2">(@_filteredNodes.Count @TranslationService.GetTranslation("classificationNode.itemsFound","elementi trovati"))</MudText>
                    </MudText>
                    
                    <div class="d-flex justify-space-between align-center">
                        <MudButtonGroup Class="mr-2">
                            <MudIconButton Icon="@(_viewMode == ViewMode.Tree ? Icons.Material.Outlined.List : Icons.Material.Outlined.AccountTree)"
                                           OnClick="@ToggleViewMode" Size="Size.Small" />
                            <MudIconButton Icon="@Icons.Material.Outlined.ExpandMore" OnClick="@ExpandAll" Size="Size.Small" />
                            <MudIconButton Icon="@Icons.Material.Outlined.ExpandLess" OnClick="@CollapseAll" Size="Size.Small" />
                        </MudButtonGroup>
                        
                        <ManagementTableToolbar ShowSelectionBadge="true"
                                                SelectedCount="@_selectedNodes.Count"
                                                ShowRefresh="true"
                                                ShowCreate="true"
                                                ShowDelete="true"
                                                CreateLabel="classificationNode.create"
                                                CreateTooltip="classificationNode.createNew"
                                                IsDisabled="_isLoadingNodes"
                                                OnRefresh="@LoadNodesAsync"
                                                OnCreate="@OpenCreatePage"
                                                OnDelete="@DeleteSelectedNodes" />
                    </div>
                </div>

                <MudCardContent Class="pa-1">
                    @if (_isLoadingNodes)
                    {
                        <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="mt-4" />
                    }
                    else if (_viewMode == ViewMode.Tree)
                    {
                        <div class="pa-4">
                            @if (TreeItems?.Any() == true)
                            {
                                <MudTreeView Items="@TreeItems" T="ClassificationNodeTreeItem" Hover="true">
                                    <ItemTemplate Context="it">
                                        @if (it is ClassificationNodeTreeItem nodeItem)
                                        {
                                            <MudTreeViewItem Items="@nodeItem.Children" Icon="@nodeItem.Icon" Expanded="@nodeItem.Expanded">
                                                <BodyContent>
                                                    <div class="d-flex justify-space-between align-center" style="width:100%">
                                                        <div class="d-flex align-center gap-2">
                                                            <MudIcon Icon="@nodeItem.Icon" Size="Size.Small" Class="mr-2" />
                                                            <MudText Typo="Typo.body2" Class="@(nodeItem.IsMatch ? "matched-node" : "")">@nodeItem.Text</MudText>
                                                        </div>
                                                        <div class="d-flex gap-1">
                                                            <MudIconButton Icon="@Icons.Material.Outlined.Add" Size="Size.Small" Color="Color.Success"
                                                                           OnClick="@(() => OpenCreateChildPage(nodeItem.Node))" Title="@TranslationService.GetTranslation("classificationNode.addChild","Aggiungi nodo figlio")" />
                                                            <ActionButtonGroup EntityName="@nodeItem.Text" ItemDisplayName="@nodeItem.Text"
                                                                              ShowView="false" ShowEdit="true" ShowAuditLog="true" ShowToggleStatus="true" ShowDelete="true"
                                                                              IsActive="@(nodeItem.Node?.IsActive ?? false)"
                                                                              OnEdit="@(() => EditNode(nodeItem.Node))"
                                                                              OnAuditLog="@(() => ViewNodeAuditLog(nodeItem.Node))"
                                                                              OnToggleStatus="@(() => ToggleNodeStatus(nodeItem.Node))"
                                                                              OnDelete="@(() => DeleteNode(nodeItem.Node))" />
                                                        </div>
                                                    </div>
                                                </BodyContent>
                                            </MudTreeViewItem>
                                        }
                                    </ItemTemplate>
                                </MudTreeView>
                            }
                            else
                            {
                                <div class="text-center pa-2 pa-sm-3 pa-md-4">
                                    <MudIcon Icon="@Icons.Material.Outlined.AccountTree" Size="Size.Medium" Class="mb-4 mud-text-secondary" />
                                    <MudText Typo="Typo.h6" Class="mb-2">@(_nodes.Any() ? TranslationService.GetTranslation("classificationNode.noMatchFilters","Nessun nodo corrisponde ai filtri applicati") : TranslationService.GetTranslation("classificationNode.noFound","Nessun nodo trovato"))</MudText>
                                    @if (_nodes.Any())
                                    {
                                        <MudButton Variant="Variant.Text" Color="Color.Primary" StartIcon="@Icons.Material.Outlined.Clear" OnClick="@ClearFilters">@TranslationService.GetTranslation("classificationNode.clearFilters","Cancella filtri")</MudButton>
                                    }
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <MudTable T="ClassificationNodeDto" Items="_filteredNodes" MultiSelection="true" @bind-SelectedItems="_selectedNodes" Hover="true" Striped="true" Loading="_isLoadingNodes" LoadingProgressColor="Color.Info" Breakpoint="Breakpoint.Sm">
                            <HeaderContent>
                                <MudTh><MudTableSortLabel SortBy="@(new Func<ClassificationNodeDto, object>(x => x.Name))">@TranslationService.GetTranslation("field.name","Nome")</MudTableSortLabel></MudTh>
                                <MudTh><MudTableSortLabel SortBy="@(new Func<ClassificationNodeDto, object>(x => x.Code ?? ""))">@TranslationService.GetTranslation("field.code","Codice")</MudTableSortLabel></MudTh>
                                <MudTh><MudTableSortLabel SortBy="@(new Func<ClassificationNodeDto, object>(x => x.Type))">@TranslationService.GetTranslation("field.type","Tipo")</MudTableSortLabel></MudTh>
                                <MudTh><MudTableSortLabel SortBy="@(new Func<ClassificationNodeDto, object>(x => x.Status))">@TranslationService.GetTranslation("field.status","Stato")</MudTableSortLabel></MudTh>
                                <MudTh Class="text-center" Style="min-width:120px;">@TranslationService.GetTranslation("common.actions","Azioni")</MudTh>
                            </HeaderContent>

                            <RowTemplate>
                                <MudTd>
                                    <div class="d-flex align-center">
                                        <MudIcon Icon="@GetNodeIcon(context)" Size="Size.Small" Class="mr-2" />
                                        <MudText Typo="Typo.body2">@context.Name</MudText>
                                    </div>
                                </MudTd>
                                <MudTd><MudText Typo="Typo.body2">@(context.Code ?? "-")</MudText></MudTd>
                                <MudTd><MudChip T="string" Size="Size.Small" Color="@GetTypeColor(context.Type)">@GetTypeDisplayName(context.Type)</MudChip></MudTd>
                                <MudTd><MudChip T="string" Size="Size.Small" Color="@GetStatusColor(context.Status)">@GetStatusDisplayName(context.Status)</MudChip></MudTd>
                                <MudTd Class="text-center">
                                    <ActionButtonGroup EntityName="@context.Name" ItemDisplayName="@context.Name" ShowView="false" ShowEdit="true" ShowAuditLog="true" ShowToggleStatus="true" ShowDelete="true" IsActive="@context.IsActive"
                                                      OnEdit="@(() => EditNode(context))"
                                                      OnAuditLog="@(() => ViewNodeAuditLog(context))"
                                                      OnToggleStatus="@(() => ToggleNodeStatus(context))"
                                                      OnDelete="@(() => DeleteNode(context))" />
                                </MudTd>
                            </RowTemplate>
                        </MudTable>
                    }
                </MudCardContent>
            </MudPaper>
        </MudPaper>
    }
</MudContainer>

<!-- Audit History Drawer (unico drawer autorizzato da policy) -->
<AuditHistoryDrawer @bind-IsOpen="_auditDrawerOpen"
                    EntityType="ClassificationNode"
                    EntityId="@_selectedNodeForAudit?.Id"
                    EntityName="@_selectedNodeForAudit?.Name" />

@code {
    private enum ViewMode { Tree, Table }

    private bool _isLoading = true;
    private bool _isLoadingNodes = false;
    private bool _auditDrawerOpen = false;
    private ViewMode _viewMode = ViewMode.Tree;

    private ClassificationNodeDto? _selectedNodeForAudit;

    private string _searchTerm = string.Empty;
    private ProductClassificationType? _typeFilter;
    private ProductClassificationNodeStatus? _statusFilter;

    private List<ClassificationNodeDto> _nodes = new();
    private List<ClassificationNodeDto> _filteredNodesCache = new();
    private HashSet<ClassificationNodeDto> _selectedNodes = new();
    private ILookup<Guid?, ClassificationNodeDto> _childrenLookup = Enumerable.Empty<ClassificationNodeDto>().ToLookup(n => (Guid?)null);
    private IReadOnlyList<ClassificationNodeDto> _filteredNodes => _filteredNodesCache;

    private IReadOnlyCollection<ClassificationNodeTreeItem> TreeItems { get; set; } = new List<ClassificationNodeTreeItem>();

    private CancellationTokenSource? _searchCts;

    public class ClassificationNodeTreeItem : TreeItemData<ClassificationNodeTreeItem>
    {
        public Guid Id { get; set; }
        public ClassificationNodeDto Node { get; set; }
        public new List<ClassificationNodeTreeItem> Children { get; set; } = new();
        public bool IsMatch { get; set; }
        public new bool Expanded { get; set; }

        public ClassificationNodeTreeItem(ClassificationNodeDto node)
        {
            Id = node.Id;
            Node = node;
            Text = node.Name;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (!await AuthService.IsAuthenticatedAsync())
            {
                NavigationManager.NavigateTo("/login");
                return;
            }
            await LoadNodesAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading classification nodes page");
            Snackbar.Add(TranslationService.GetTranslation("classificationNode.loadingPageError", "Errore nel caricamento della pagina: {0}", ex.Message), Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task LoadNodesAsync()
    {
        _isLoadingNodes = true;
        StateHasChanged();
        try
        {
            var allNodes = (await EntityManagementService.GetClassificationNodesAsync())?.ToList();
            if (allNodes != null && allNodes.Any())
            {
                var byId = allNodes.ToDictionary(n => n.Id);
                foreach (var n in allNodes)
                    n.ParentName = n.ParentId.HasValue && byId.TryGetValue(n.ParentId.Value, out var p) ? p.Name : null;

                _nodes = allNodes.OrderBy(n => n.Level).ThenBy(n => n.Order).ThenBy(n => n.Name ?? string.Empty).ToList();
                RecomputeFilteredNodes();
                return;
            }

            var all = new List<ClassificationNodeDto>();
            IEnumerable<ClassificationNodeDto> roots;
            try
            {
                roots = (await EntityManagementService.GetRootClassificationNodesAsync())?.ToList() ?? Enumerable.Empty<ClassificationNodeDto>();
            }
            catch (Exception exRoot)
            {
                Logger.LogWarning(exRoot, "Failed to load root classification nodes; falling back to paged load");
                var paged = await EntityManagementService.GetClassificationNodesAsync();
                _nodes = (paged ?? Enumerable.Empty<ClassificationNodeDto>()).OrderBy(n => n.Level).ThenBy(n => n.Order).ThenBy(n => n.Name ?? string.Empty).ToList();
                RecomputeFilteredNodes();
                return;
            }

            async Task LoadChildrenRecursive(ClassificationNodeDto parent)
            {
                all.Add(parent);
                IEnumerable<ClassificationNodeDto> children;
                try
                {
                    children = (await EntityManagementService.GetChildrenClassificationNodesAsync(parent.Id))?.ToList() ?? Enumerable.Empty<ClassificationNodeDto>();
                }
                catch (Exception exChild)
                {
                    Logger.LogWarning(exChild, "Failed to load children for node {NodeId}", parent.Id);
                    children = Enumerable.Empty<ClassificationNodeDto>();
                }

                foreach (var c in children)
                {
                    c.ParentName = parent.Name;
                    await LoadChildrenRecursive(c);
                }
            }

            foreach (var r in roots)
            {
                r.ParentName = null;
                await LoadChildrenRecursive(r);
            }

            _nodes = all.OrderBy(n => n.Level).ThenBy(n => n.Order).ThenBy(n => n.Name ?? string.Empty).ToList();
            RecomputeFilteredNodes();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading classification nodes");
            Snackbar.Add(TranslationService.GetTranslation("classificationNode.loadingError", "Errore nel caricamento dei nodi: {0}", ex.Message), Severity.Error);
            _nodes = new List<ClassificationNodeDto>();
            RecomputeFilteredNodes();
        }
        finally
        {
            _isLoadingNodes = false;
            StateHasChanged();
        }
    }

    private void RecomputeFilteredNodes()
    {
        var matches = _nodes.Where(n =>
            (string.IsNullOrEmpty(_searchTerm) ||
                (n.Name != null && n.Name.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase)) ||
                (n.Code != null && n.Code.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase)) ||
                (n.Description != null && n.Description.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase))) &&
            (_typeFilter == null || n.Type == _typeFilter.Value) &&
            (_statusFilter == null || n.Status == _statusFilter.Value)).ToList();

        var nodesById = _nodes.ToDictionary(n => n.Id);
        _childrenLookup = _nodes.ToLookup(n => n.ParentId);

        var finalSet = new HashSet<Guid>(matches.Select(m => m.Id));
        foreach (var m in matches)
        {
            var currentParent = m.ParentId;
            while (currentParent.HasValue && nodesById.TryGetValue(currentParent.Value, out var parentNode))
            {
                if (!finalSet.Add(parentNode.Id)) break;
                currentParent = parentNode.ParentId;
            }
        }

        var queue = new Queue<Guid>(matches.Select(m => m.Id));
        while (queue.Count > 0)
        {
            var id = queue.Dequeue();
            foreach (var child in _childrenLookup[(Guid?)id])
            {
                if (finalSet.Add(child.Id)) queue.Enqueue(child.Id);
            }
        }

        var finalNodes = _nodes.Where(n => finalSet.Contains(n.Id)).OrderBy(n => n.Level).ThenBy(n => n.Order).ThenBy(n => n.Name).ToList();
        _filteredNodesCache = finalNodes;

        var matchesIds = new HashSet<Guid>(matches.Select(m => m.Id));
        var itemLookup = finalNodes.ToDictionary(n => n.Id, n => new ClassificationNodeTreeItem(n));
        foreach (var id in matchesIds) if (itemLookup.TryGetValue(id, out var it)) it.IsMatch = true;
        foreach (var m in matches)
        {
            var currentParent = m.ParentId;
            while (currentParent.HasValue)
            {
                if (itemLookup.TryGetValue(currentParent.Value, out var parentItem))
                {
                    parentItem.Expanded = true;
                    currentParent = parentItem.Node.ParentId;
                }
                else break;
            }
        }

        foreach (var kv in itemLookup) kv.Value.Icon = GetNodeIcon(kv.Value.Node);

        var roots = new List<ClassificationNodeTreeItem>();
        foreach (var item in itemLookup.Values)
        {
            var pid = item.Node.ParentId;
            if (pid.HasValue && itemLookup.TryGetValue(pid.Value, out var parent)) parent.Children.Add(item);
            else roots.Add(item);
        }

        TreeItems = roots;
    }

    private void ToggleViewMode() => _viewMode = _viewMode == ViewMode.Tree ? ViewMode.Table : ViewMode.Tree;

    private void ExpandAll() { void Recurse(List<ClassificationNodeTreeItem> items) { foreach (var it in items) { it.Expanded = true; if (it.Children?.Any() == true) Recurse(it.Children); } } Recurse(TreeItems.ToList()); StateHasChanged(); }
    private void CollapseAll() { void Recurse(List<ClassificationNodeTreeItem> items) { foreach (var it in items) { it.Expanded = false; if (it.Children?.Any() == true) Recurse(it.Children); } } Recurse(TreeItems.ToList()); StateHasChanged(); }

    private async Task ClearFilters() { _searchTerm = string.Empty; _typeFilter = null; _statusFilter = null; RecomputeFilteredNodes(); StateHasChanged(); await Task.CompletedTask; }

    private async Task OnSearchChanged()
    {
        _searchCts?.Cancel();
        _searchCts?.Dispose();
        _searchCts = new CancellationTokenSource();
        try { await Task.Delay(300, _searchCts.Token); RecomputeFilteredNodes(); StateHasChanged(); } catch (TaskCanceledException) { }
    }

    private Task OnTypeFilterChanged() { RecomputeFilteredNodes(); StateHasChanged(); return Task.CompletedTask; }
    private Task OnStatusFilterChanged() { RecomputeFilteredNodes(); StateHasChanged(); return Task.CompletedTask; }

    private Task OpenCreatePage() { NavigationManager.NavigateTo("/management/classification-nodes/new"); return Task.CompletedTask; }
    private Task OpenCreateChildPage(ClassificationNodeDto? parent) { NavigationManager.NavigateTo(parent == null ? "/management/classification-nodes/new" : $"/management/classification-nodes/new/{parent.Id}"); return Task.CompletedTask; }
    private Task EditNode(ClassificationNodeDto? node) { if (node == null) return Task.CompletedTask; NavigationManager.NavigateTo($"/management/classification-nodes/{node.Id}"); return Task.CompletedTask; }

    private async Task DeleteNode(ClassificationNodeDto node)
    {
        var confirmTitle = TranslationService.GetTranslation("common.confirm","Conferma");
        var confirmMessage = TranslationService.GetTranslation("classificationNode.confirmDelete","Sei sicuro di voler eliminare il nodo '{0}'? Questa azione eliminerà anche tutti i nodi figli. Questa azione non può essere annullata.", node.Name);

        var confirm = await DialogService.ShowMessageBox(confirmTitle, confirmMessage, yesText: TranslationService.GetTranslation("common.delete","Elimina"), cancelText: TranslationService.GetTranslation("common.cancel","Annulla"));
        if (confirm != true) return;

        try
        {
            await EntityManagementService.DeleteClassificationNodeAsync(node.Id);
            _childrenLookup = _nodes.ToLookup(n => n.ParentId);
            RemoveNodeAndDescendants(node.Id);
            RecomputeFilteredNodes();
            Snackbar.Add(TranslationService.GetTranslation("classificationNode.deleted","Nodo eliminato con successo!"), Severity.Success);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error deleting classification node {NodeId}", node.Id);
            Snackbar.Add(TranslationService.GetTranslation("classificationNode.deleteError","Errore nell'eliminazione del nodo: {0}", ex.Message), Severity.Error);
        }
    }

    private void RemoveNodeAndDescendants(Guid nodeId)
    {
        var toRemove = new Stack<Guid>(); toRemove.Push(nodeId);
        while (toRemove.Count > 0)
        {
            var current = toRemove.Pop();
            foreach (var child in _childrenLookup[(Guid?)current]) toRemove.Push(child.Id);
            var existing = _nodes.FirstOrDefault(n => n.Id == current);
            if (existing != null) _nodes.Remove(existing);
        }
    }

    private string GetNodeIcon(ClassificationNodeDto node) => node.Type switch
    {
        ProductClassificationType.Category => Icons.Material.Outlined.Category,
        ProductClassificationType.Family => Icons.Material.Outlined.GroupWork,
        ProductClassificationType.MerchandiseGroup => Icons.Material.Outlined.LocalOffer,
        _ => Icons.Material.Outlined.Circle
    };

    private Color GetTypeColor(ProductClassificationType type) => type switch
    {
        ProductClassificationType.Category => Color.Primary,
        ProductClassificationType.Family => Color.Secondary,
        ProductClassificationType.MerchandiseGroup => Color.Info,
        _ => Color.Default
    };

    private string GetTypeDisplayName(ProductClassificationType type) => type switch
    {
        ProductClassificationType.Category => TranslationService.GetTranslation("classificationType.category","Categoria"),
        ProductClassificationType.Family => TranslationService.GetTranslation("classificationType.family","Famiglia"),
        ProductClassificationType.MerchandiseGroup => TranslationService.GetTranslation("classificationType.merchandiseGroup","Gruppo Merceologico"),
        _ => type.ToString()
    };

    private Color GetStatusColor(ProductClassificationNodeStatus status) => status switch
    {
        ProductClassificationNodeStatus.Active => Color.Success,
        ProductClassificationNodeStatus.Inactive => Color.Default,
        ProductClassificationNodeStatus.Pending => Color.Warning,
        _ => Color.Default
    };

    private string GetStatusDisplayName(ProductClassificationNodeStatus status) => status switch
    {
        ProductClassificationNodeStatus.Active => TranslationService.GetTranslation("status.active","Attivo"),
        ProductClassificationNodeStatus.Inactive => TranslationService.GetTranslation("status.inactive","Inattivo"),
        ProductClassificationNodeStatus.Pending => TranslationService.GetTranslation("status.pending","In attesa"),
        _ => status.ToString()
    };

    private Task ViewNodeAuditLog(ClassificationNodeDto node) { _selectedNodeForAudit = node; _auditDrawerOpen = true; return Task.CompletedTask; }

    private async Task ToggleNodeStatus(ClassificationNodeDto node)
    {
        var actionText = node.IsActive ? TranslationService.GetTranslation("common.deactivate","disattivare") : TranslationService.GetTranslation("common.activate","attivare");
        var confirmTitle = TranslationService.GetTranslation("common.confirm","Conferma");
        var confirmMessage = TranslationService.GetTranslationFormatted("classificationNode.confirmStatusChange","Sei sicuro di voler {0} il nodo '{1}'?", actionText, node.Name);

        var confirm = await DialogService.ShowMessageBox(confirmTitle, confirmMessage, yesText: TranslationService.GetTranslation("common.confirm","Conferma"), cancelText: TranslationService.GetTranslation("common.cancel","Annulla"));
        if (confirm != true) return;

        try
        {
            node.IsActive = !node.IsActive;
            var statusMessage = node.IsActive ? TranslationService.GetTranslation("classificationNode.activated","Nodo attivato con successo!") : TranslationService.GetTranslation("classificationNode.deactivated","Nodo disattivato con successo!");
            Snackbar.Add(statusMessage, Severity.Success);
            RecomputeFilteredNodes();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error toggling classification node status {NodeId}", node.Id);
            node.IsActive = !node.IsActive;
            Snackbar.Add(TranslationService.GetTranslation("classificationNode.statusChangeError","Errore nel cambio di stato: {0}", ex.Message), Severity.Error);
            RecomputeFilteredNodes();
            StateHasChanged();
        }
    }

    /// <summary>
    /// Deletes all selected classification nodes.
    /// </summary>
    private async Task DeleteSelectedNodes()
    {
        if (_selectedNodes.Count == 0)
            return;

        var confirmTitle = TranslationService.GetTranslation("common.confirm", "Conferma");
        var confirmMessage = TranslationService.GetTranslationFormatted("classificationNode.confirmDeleteMultiple", 
            "Sei sicuro di voler eliminare {0} nodi selezionati? Questa azione non può essere annullata.", 
            _selectedNodes.Count);

        var confirm = await DialogService.ShowMessageBox(
            confirmTitle,
            confirmMessage,
            yesText: TranslationService.GetTranslation("common.delete", "Elimina"),
            cancelText: TranslationService.GetTranslation("common.cancel", "Annulla"));

        if (confirm == true)
        {
            try
            {
                var deletedCount = 0;
                var failedCount = 0;
                
                foreach (var node in _selectedNodes.ToList())
                {
                    try
                    {
                        await EntityManagementService.DeleteClassificationNodeAsync(node.Id);
                        _nodes.RemoveAll(n => n.Id == node.Id);
                        deletedCount++;
                    }
                    catch (Exception ex)
                    {
                        failedCount++;
                        Logger.LogError(ex, "Error deleting classification node {NodeId}", node.Id);
                    }
                }
                
                _selectedNodes.Clear();
                
                if (failedCount == 0)
                {
                    Snackbar.Add(TranslationService.GetTranslationFormatted("classificationNode.deletedMultiple", 
                        "{0} nodi eliminati con successo!", deletedCount), Severity.Success);
                }
                else
                {
                    Snackbar.Add(TranslationService.GetTranslationFormatted("classificationNode.deletedMultiplePartial", 
                        "{0} nodi eliminati, {1} falliti", deletedCount, failedCount), Severity.Warning);
                }
                
                RecomputeFilteredNodes();
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Snackbar.Add(TranslationService.GetTranslationFormatted("classificationNode.deleteError", 
                    "Errore nell'eliminazione dei nodi: {0}", ex.Message), Severity.Error);
                Logger.LogError(ex, "Error deleting selected classification nodes");
            }
        }
    }
}
