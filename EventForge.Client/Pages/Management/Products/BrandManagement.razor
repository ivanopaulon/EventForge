@page "/product-management/brands"
@using Microsoft.AspNetCore.Authorization
@using EventForge.DTOs.Products
@using EventForge.DTOs.Common
@using EventForge.Client.Shared.Components
@attribute [Authorize]
@inject IAuthService AuthService
@inject IBrandService BrandService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject ITranslationService TranslationService
@inject ILogger<BrandManagement> Logger

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <PageLoadingOverlay IsVisible="_isLoading || _isLoadingBrands"
                        Message="@(_isLoading ? TranslationService.GetTranslation("messages.loadingPage", "Caricamento pagina...") : TranslationService.GetTranslation("common.loading", "Caricamento..."))" />

    @if (!_isLoading)
    {
        <MudPaper Elevation="2" Class="pa-2 pa-sm-3 pa-md-4 mb-4">
            <div class="d-flex justify-space-between align-center mb-4">
                <div>
                    <MudText Typo="Typo.h4">
                        <MudIcon Icon="@Icons.Material.Outlined.Sell" Class="mr-2" />
                        @TranslationService.GetTranslation("brand.management", "Gestione Marchi")
                    </MudText>
                    <MudText Typo="Typo.body2" Class="mud-text-secondary mt-2">
                        @TranslationService.GetTranslation("brand.managementDescription", "Gestisci i marchi dei prodotti")
                    </MudText>
                </div>
            </div>

            <!-- Filters Section -->
            <MudPaper Elevation="0" Class="pa-3 mb-4" Style="background-color: var(--mud-palette-background-grey);">
                <div class="d-flex gap-3 align-center flex-wrap">
                    <MudTextField @bind-Value="_searchTerm"
                                  @bind-Value:after="OnSearchChanged"
                                  Label="@TranslationService.GetTranslation("brand.search", "Cerca marchi")"
                                  Placeholder="@TranslationService.GetTranslation("brand.searchPlaceholder", "Inserisci nome...")"
                                  Variant="Variant.Outlined"
                                  Adornment="Adornment.End"
                                  AdornmentIcon="@Icons.Material.Outlined.Search"
                                  Clearable="true"
                                  Style="flex: 2;" />
                </div>
            </MudPaper>

            <!-- Brands Data Table -->
            <MudPaper Elevation="1" Class="border-rounded">
                <div class="pa-2">
                    <MudText Typo="Typo.h6" Class="mb-2">
                        <MudIcon Icon="@Icons.Material.Outlined.List" Class="mr-2" />
                        @TranslationService.GetTranslation("brand.list", "Lista Marchi")
                        <MudText Typo="Typo.body2" Class="mud-text-secondary ml-2">
                            (@_filteredBrands.Count() @TranslationService.GetTranslation("common.itemsFound", "elementi trovati"))
                        </MudText>
                    </MudText>
                    
                    <ManagementTableToolbar ShowSelectionBadge="true"
                                            SelectedCount="@_selectedBrands.Count"
                                            ShowRefresh="true"
                                            ShowCreate="true"
                                            ShowDelete="true"
                                            CreateLabel="brand.create"
                                            CreateTooltip="brand.createNew"
                                            IsDisabled="_isLoadingBrands"
                                            OnRefresh="@LoadBrandsAsync"
                                            OnCreate="@CreateBrand"
                                            OnDelete="@DeleteSelectedBrands" />
                </div>
                <MudCardContent Class="pa-1">
                    @if (_isLoadingBrands)
                    {
                        <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="mt-4" />
                    }
                    else
                    {
                        <MudTable T="BrandDto" 
                                  Items="_filteredBrands"
                                  MultiSelection="true"
                                  @bind-SelectedItems="_selectedBrands"
                                  Hover="true" 
                                  Striped="true"
                                  Loading="_isLoadingBrands"
                                  LoadingProgressColor="Color.Info"
                                  SortLabel="@TranslationService.GetTranslation("tooltip.sortColumn", "Ordina colonna")"
                                  AllowUnsorted="false"
                                  FixedHeader="true"
                                  Height="60vh">
                            <HeaderContent>
                                <MudTh><MudTableSortLabel SortBy="new Func<BrandDto, object>(x => x.Name)">@TranslationService.GetTranslation("field.name", "Nome")</MudTableSortLabel></MudTh>
                                <MudTh>@TranslationService.GetTranslation("field.description", "Descrizione")</MudTh>
                                <MudTh>@TranslationService.GetTranslation("field.country", "Paese")</MudTh>
                                <MudTh>@TranslationService.GetTranslation("field.website", "Sito Web")</MudTh>
                                <MudTh><MudTableSortLabel SortBy="new Func<BrandDto, object>(x => x.CreatedAt)">@TranslationService.GetTranslation("field.createdAt", "Creato il")</MudTableSortLabel></MudTh>
                                <MudTh Style="text-align: right;">@TranslationService.GetTranslation("field.actions", "Azioni")</MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd DataLabel="@TranslationService.GetTranslation("field.name", "Nome")">
                                    <strong>@context.Name</strong>
                                </MudTd>
                                <MudTd DataLabel="@TranslationService.GetTranslation("field.description", "Descrizione")">
                                    @if (!string.IsNullOrWhiteSpace(context.Description))
                                    {
                                        <span>@(context.Description.Length > 50 ? context.Description.Substring(0, 50) + "..." : context.Description)</span>
                                    }
                                    else
                                    {
                                        <span class="mud-text-secondary">-</span>
                                    }
                                </MudTd>
                                <MudTd DataLabel="@TranslationService.GetTranslation("field.country", "Paese")">
                                    @(context.Country ?? "-")
                                </MudTd>
                                <MudTd DataLabel="@TranslationService.GetTranslation("field.website", "Sito Web")">
                                    @if (!string.IsNullOrWhiteSpace(context.Website))
                                    {
                                        <MudLink Href="@context.Website" Target="_blank">@TranslationService.GetTranslation("action.visit", "Visita")</MudLink>
                                    }
                                    else
                                    {
                                        <span class="mud-text-secondary">-</span>
                                    }
                                </MudTd>
                                <MudTd DataLabel="@TranslationService.GetTranslation("field.createdAt", "Creato il")">
                                    @context.CreatedAt.ToString("dd/MM/yyyy")
                                </MudTd>
                                <MudTd DataLabel="@TranslationService.GetTranslation("field.actions", "Azioni")" Style="text-align: right;">
                                    <ActionButtonGroup EntityName="@context.Name"
                                                       ItemDisplayName="@context.Name"
                                                       ShowView="false"
                                                       ShowEdit="true"
                                                       ShowAuditLog="true"
                                                       ShowDelete="true"
                                                       OnEdit="@(() => EditBrand(context.Id))"
                                                       OnAuditLog="@(() => ViewBrandAuditLog(context))"
                                                       OnDelete="@(() => DeleteBrand(context))" />
                                </MudTd>
                            </RowTemplate>
                            <NoRecordsContent>
                                <div class="pa-4 text-center">
                                    <MudIcon Icon="@Icons.Material.Outlined.SearchOff" Size="Size.Large" Class="mb-2" />
                                    <MudText Typo="Typo.body1">
                                        @TranslationService.GetTranslation("brand.noBrandsFound", "Nessun marchio trovato")
                                    </MudText>
                                    @if (!string.IsNullOrWhiteSpace(_searchTerm))
                                    {
                                        <MudButton Variant="Variant.Text"
                                                   Color="Color.Primary"
                                                   OnClick="ClearFilters"
                                                   Class="mt-2">
                                            @TranslationService.GetTranslation("action.clearFilters", "Cancella filtri")
                                        </MudButton>
                                    }
                                </div>
                            </NoRecordsContent>
                        </MudTable>
                    }
                </MudCardContent>
            </MudPaper>
        </MudPaper>
    }
</MudContainer>

<!-- Audit History Dialog -->
<AuditHistoryDialog @bind-IsOpen="_auditDialogOpen"
                    EntityType="Brand"
                    EntityId="@_selectedBrandForAudit?.Id"
                    EntityName="@_selectedBrandForAudit?.Name" />

@code {
    private IEnumerable<BrandDto> _brands = new List<BrandDto>();
    private IEnumerable<BrandDto> _filteredBrands = new List<BrandDto>();
    private HashSet<BrandDto> _selectedBrands = new();
    private bool _isLoading = true;
    private bool _isLoadingBrands = false;
    private bool _auditDialogOpen = false;
    private string _searchTerm = string.Empty;
    private BrandDto? _selectedBrandForAudit;

    protected override async Task OnInitializedAsync()
    {
        await LoadBrandsAsync();
        _isLoading = false;
    }

    private async Task LoadBrandsAsync()
    {
        try
        {
            _isLoadingBrands = true;
            StateHasChanged();

            // Use a reasonable pageSize (the API may reject very large pageSize values)
            var result = await BrandService.GetBrandsAsync(page: 1, pageSize: 100);
            _brands = result.Items ?? new List<BrandDto>();
            ApplyFilters();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading brands");
            // Show more informative message to the user to help debugging
            Snackbar.Add(
                $"{TranslationService.GetTranslation("brand.loadError", "Errore nel caricamento dei marchi")}: {ex.Message}",
                Severity.Error);
        }
        finally
        {
            _isLoadingBrands = false;
            StateHasChanged();
        }
    }

    private void ApplyFilters()
    {
        _filteredBrands = _brands;

        if (!string.IsNullOrWhiteSpace(_searchTerm))
        {
            var searchLower = _searchTerm.ToLower();
            _filteredBrands = _filteredBrands.Where(b =>
                (b.Name?.ToLower().Contains(searchLower) ?? false) ||
                (b.Description?.ToLower().Contains(searchLower) ?? false) ||
                (b.Country?.ToLower().Contains(searchLower) ?? false));
        }
    }

    private void OnSearchChanged()
    {
        ApplyFilters();
        StateHasChanged();
    }

    private void ClearFilters()
    {
        _searchTerm = string.Empty;
        ApplyFilters();
        StateHasChanged();
    }

    private void CreateBrand()
    {
        NavigationManager.NavigateTo("/product-management/brands/new");
    }

    private void EditBrand(Guid id)
    {
        NavigationManager.NavigateTo($"/product-management/brands/{id}");
    }

    private async Task DeleteBrand(BrandDto brand)
    {
        var confirmed = await DialogService.ShowMessageBox(
            TranslationService.GetTranslation("action.confirm", "Conferma"),
            TranslationService.GetTranslation("brand.confirmDelete", $"Sei sicuro di voler eliminare il marchio '{brand.Name}'?"),
            yesText: TranslationService.GetTranslation("action.delete", "Elimina"),
            cancelText: TranslationService.GetTranslation("action.cancel", "Annulla"));

        if (confirmed == true)
        {
            try
            {
                await BrandService.DeleteBrandAsync(brand.Id);
                Snackbar.Add(
                    TranslationService.GetTranslation("brand.deleteSuccess", "Marchio eliminato con successo"),
                    Severity.Success);
                await LoadBrandsAsync();
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error deleting brand {BrandId}", brand.Id);
                Snackbar.Add(
                    TranslationService.GetTranslation("brand.deleteError", "Errore nell'eliminazione del marchio"),
                    Severity.Error);
            }
        }
    }
    
    /// <summary>
    /// Opens the audit log drawer for a brand.
    /// </summary>
    private async Task ViewBrandAuditLog(BrandDto brand)
    {
        _selectedBrandForAudit = brand;
        _auditDialogOpen = true;
        await Task.CompletedTask;
    }

    /// <summary>
    /// Deletes all selected brands.
    /// </summary>
    private async Task DeleteSelectedBrands()
    {
        if (_selectedBrands.Count == 0)
            return;

        var confirmTitle = TranslationService.GetTranslation("common.confirm", "Conferma");
        var confirmMessage = TranslationService.GetTranslationFormatted("brand.confirmDeleteMultiple", 
            "Sei sicuro di voler eliminare {0} marchi selezionati? Questa azione non può essere annullata.", 
            _selectedBrands.Count);

        var confirm = await DialogService.ShowMessageBox(
            confirmTitle,
            confirmMessage,
            yesText: TranslationService.GetTranslation("common.delete", "Elimina"),
            cancelText: TranslationService.GetTranslation("common.cancel", "Annulla"));

        if (confirm == true)
        {
            try
            {
                var deletedCount = 0;
                var failedCount = 0;
                
                foreach (var brand in _selectedBrands.ToList())
                {
                    try
                    {
                        await BrandService.DeleteBrandAsync(brand.Id);
                        deletedCount++;
                    }
                    catch (Exception ex)
                    {
                        failedCount++;
                        Logger.LogError(ex, "Error deleting brand {BrandId}", brand.Id);
                    }
                }
                
                _selectedBrands.Clear();
                
                if (failedCount == 0)
                {
                    Snackbar.Add(TranslationService.GetTranslationFormatted("brand.deletedMultiple", 
                        "{0} marchi eliminati con successo!", deletedCount), Severity.Success);
                }
                else
                {
                    Snackbar.Add(TranslationService.GetTranslationFormatted("brand.deletedMultiplePartial", 
                        "{0} marchi eliminati, {1} falliti", deletedCount, failedCount), Severity.Warning);
                }
                
                await LoadBrandsAsync();
            }
            catch (Exception ex)
            {
                Snackbar.Add(TranslationService.GetTranslationFormatted("brand.deleteError", 
                    "Errore nell'eliminazione dei marchi: {0}", ex.Message), Severity.Error);
                Logger.LogError(ex, "Error deleting selected brands");
            }
        }
    }
}
