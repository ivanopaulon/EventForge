@page "/product-management/products"
@using Microsoft.AspNetCore.Authorization
@using EventForge.DTOs.Products
@using EventForge.DTOs.Common
@using EventForge.Client.Shared.Components
@attribute [Authorize]
@inject IAuthService AuthService
@inject IProductService ProductService
@inject IStockService StockService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject ITranslationService TranslationService
@inject ILogger<ProductManagement> Logger

<MudContainer MaxWidth="MaxWidth.False" Class="mt-4 px-0" Style="width:100%; min-height:100vh; display:flex; flex-direction:column;">
    <PageLoadingOverlay IsVisible="_isLoading || _isLoadingProducts || _isLoadingStocks"
                         Message="@(_isLoading ? TranslationService.GetTranslation("messages.loadingPage", "Caricamento pagina...") : TranslationService.GetTranslation("common.loading", "Caricamento..."))" />

    <MudPaper Elevation="2" Class="pa-2 pa-sm-3 pa-md-4 mb-4 mx-0 d-flex flex-column">
        <div class="d-flex justify-space-between align-center mb-4">
            <div>
                <MudText Typo="Typo.h4">
                    <MudIcon Icon="@Icons.Material.Outlined.Inventory2" Class="mr-2" />
                    @TranslationService.GetTranslation("product.management", "Gestione Prodotti")
                </MudText>
                <MudText Typo="Typo.body2" Class="mud-text-secondary mt-2">
                    @TranslationService.GetTranslation("product.managementDescription", "Gestisci i prodotti e i loro fornitori")
                </MudText>
            </div>
        </div>

        <!-- Filters Section -->
        <MudPaper Elevation="0" Class="pa-3 mb-4 mx-0">
            <div class="d-flex gap-3 align-center flex-wrap">
                <MudTextField @bind-Value="_searchTerm"
                              @bind-Value:after="OnSearchChanged"
                              Label="@TranslationService.GetTranslation("product.search", "Cerca prodotti")"
                              Placeholder="@TranslationService.GetTranslation("product.searchPlaceholder", "Inserisci nome o codice...")"
                              Variant="Variant.Outlined"
                              Adornment="Adornment.End"
                              AdornmentIcon="@Icons.Material.Outlined.Search"
                              Clearable="true"
                              Style="flex:2;" />
            </div>
        </MudPaper>

        <!-- Products Data Table -->
        <MudPaper Elevation="1" Class="border-rounded mx-0 flex-grow-1 d-flex flex-column" Style="min-height:0;">
            <div class="pa-2">
                <MudText Typo="Typo.h6" Class="mb-2">
                    <MudIcon Icon="@Icons.Material.Outlined.List" Class="mr-2" />
                    @TranslationService.GetTranslation("product.list", "Lista Prodotti")
                    <MudText Typo="Typo.body2" Class="mud-text-secondary ml-2">
                        (@_filteredProducts.Count() @TranslationService.GetTranslation("common.itemsFound", "elementi trovati"))
                    </MudText>
                </MudText>
                
                <ManagementTableToolbar ShowSelectionBadge="true"
                                        SelectedCount="@_selectedProducts.Count"
                                        ShowRefresh="true"
                                        ShowCreate="true"
                                        ShowDelete="true"
                                        CreateLabel="product.create"
                                        CreateTooltip="product.createNew"
                                        IsDisabled="_isLoadingProducts"
                                        OnRefresh="@LoadProductsAsync"
                                        OnCreate="@CreateProduct"
                                        OnDelete="@DeleteSelectedProducts" />
            </div>

            <MudCardContent Class="pa-1 flex-grow-1" Style="min-height:0;">
                @if (_isLoadingProducts)
                {
                    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="mt-4" />
                }
                else
                {
                    <!-- Dynamic height calculation for responsive behavior -->
                    <MudTable T="ProductDto" 
                              Items="_filteredProducts"
                              MultiSelection="true"
                              @bind-SelectedItems="_selectedProducts"
                              Hover="true" 
                              Striped="true"
                              Loading="_isLoadingProducts"
                              LoadingProgressColor="Color.Info"
                              SortLabel="@TranslationService.GetTranslation("tooltip.sortColumn", "Ordina colonna")"
                              AllowUnsorted="false"
                              FixedHeader="true"
                              Height="calc(100vh - 280px)">
                        <HeaderContent>
                            <MudTh><MudTableSortLabel SortBy="new Func<ProductDto, object>(x => x.Code)">@TranslationService.GetTranslation("field.code", "Codice")</MudTableSortLabel></MudTh>
                            <MudTh><MudTableSortLabel SortBy="new Func<ProductDto, object>(x => x.Name)">@TranslationService.GetTranslation("field.name", "Nome")</MudTableSortLabel></MudTh>
                            <MudTh>@TranslationService.GetTranslation("field.description", "Descrizione")</MudTh>
                            <MudTh><MudTableSortLabel SortBy="new Func<ProductDto, object>(x => x.DefaultPrice ??0)">@TranslationService.GetTranslation("field.price", "Prezzo")</MudTableSortLabel></MudTh>
                            <MudTh><MudTableSortLabel SortBy="new Func<ProductDto, object>(x => GetAvailableQuantityForSort(x.Id))">@TranslationService.GetTranslation("warehouse.available", "Giacenza")</MudTableSortLabel></MudTh>
                            <MudTh Style="text-align: right;">@TranslationService.GetTranslation("field.actions", "Azioni")</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="@TranslationService.GetTranslation("field.code", "Codice")" Style="width:12%;">@context.Code</MudTd>
                            <MudTd DataLabel="@TranslationService.GetTranslation("field.name", "Nome")" Style="width:28%;">
                                <MudText Typo="Typo.body2" Class="text-truncate" Style="max-width:320px;">@context.Name</MudText>
                            </MudTd>
                            <MudTd DataLabel="@TranslationService.GetTranslation("field.description", "Descrizione")" Style="width:30%;">
                                <MudText Typo="Typo.body2" Class="text-truncate" Style="max-width:420px;">@(string.IsNullOrWhiteSpace(context.ShortDescription) ? "-" : context.ShortDescription)</MudText>
                            </MudTd>
                            <MudTd DataLabel="@TranslationService.GetTranslation("field.price", "Prezzo")" Style="text-align: right; width:10%;">
                                @if (context.DefaultPrice.HasValue)
                                {
                                    <MudText Typo="Typo.body2" Style="font-weight:600;">@context.DefaultPrice.Value.ToString("C2")</MudText>
                                }
                            </MudTd>
                            <MudTd DataLabel="@TranslationService.GetTranslation("warehouse.available", "Giacenza")" Style="text-align: right; width:10%;">
                                @if (_isLoadingStocks)
                                {
                                    <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                                }
                                else
                                {
                                    @if (_productAvailableQuantities.TryGetValue(context.Id, out var avail))
                                    {
                                        <MudText Typo="Typo.body2" Style="font-weight:600;">@avail.ToString("N2")</MudText>
                                    }
                                    else
                                    {
                                        <span>-</span>
                                    }
                                }
                            </MudTd>
                            <MudTd DataLabel="@TranslationService.GetTranslation("common.actions", "Azioni")" Style="text-align: right; width:10%;">
                                <ActionButtonGroup EntityName="@TranslationService.GetTranslation("entity.product", "Prodotto")"
                                                   ItemDisplayName="@context.Name"
                                                   ShowView="false"
                                                   ShowEdit="true"
                                                   ShowAuditLog="true"
                                                   ShowToggleStatus="true"
                                                   ShowDelete="true"
                                                   IsActive="@(context.Status != ProductStatus.Deleted)"
                                                   OnEdit="@(() => EditProduct(context.Id))"
                                                   OnAuditLog="@(() => ViewProductAuditLog(context))"
                                                   OnToggleStatus="@(() => ToggleProductStatus(context))"
                                                   OnDelete="@(() => DeleteProduct(context))" />
                            </MudTd>
                        </RowTemplate>
                        <NoRecordsContent>
                            <MudText>@TranslationService.GetTranslation("messages.noProducts", "Nessun prodotto trovato")</MudText>
                        </NoRecordsContent>
                        <LoadingContent>
                            <MudText>@TranslationService.GetTranslation("common.loading", "Caricamento...")</MudText>
                        </LoadingContent>
                    </MudTable>
                }
            </MudCardContent>
        </MudPaper>
    </MudPaper>

    <AuditHistoryDrawer @bind-IsOpen="_auditDrawerOpen"
                        EntityType="Product"
                        EntityId="@_selectedProductForAudit?.Id"
                        EntityName="@_selectedProductForAudit?.Name" />
</MudContainer>

@code {
    private bool _isLoading = true;
    private bool _isLoadingProducts = false;
    private bool _isLoadingStocks = false;
    private string _searchTerm = string.Empty;
    
    // Selection management
    private HashSet<ProductDto> _selectedProducts = new();
    
    private IEnumerable<ProductDto> _products = new List<ProductDto>();
    private IEnumerable<ProductDto> _filteredProducts = new List<ProductDto>();

    // Stores available quantity (sum across locations) per product
    private readonly Dictionary<Guid, decimal> _productAvailableQuantities = new();

    // Audit drawer state
    private bool _auditDrawerOpen = false;
    private ProductDto? _selectedProductForAudit;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _isLoading = true;
            await LoadProductsAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error initializing ProductManagement page");
            Snackbar.Add(TranslationService.GetTranslation("messages.initializationError", "Errore durante l'inizializzazione"), Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task LoadProductsAsync()
    {
        _isLoadingProducts = true;
        try
        {
            var result = await ProductService.GetProductsAsync(1, 100);
            if (result != null)
            {
                _products = result.Items;
                ApplyFilters();

                // Load stock levels for the loaded products
                await LoadStockForProductsAsync(_products.Select(p => p.Id).ToList());
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading products");
            Snackbar.Add(TranslationService.GetTranslation("messages.loadFailed", "Errore durante il caricamento"), Severity.Error);
        }
        finally
        {
            _isLoadingProducts = false;
        }
    }

    private async Task LoadStockForProductsAsync(List<Guid> productIds)
    {
        if (productIds == null || !productIds.Any())
            return;

        _isLoadingStocks = true;
        try
        {
            _productAvailableQuantities.Clear();

            // Batch process in chunks to avoid overwhelming the server
            const int batchSize = 10;
            for (int i = 0; i < productIds.Count; i += batchSize)
            {
                var batch = productIds.Skip(i).Take(batchSize).ToList();
                var tasks = batch.Select(id => LoadStockForSingleProductAsync(id));
                await Task.WhenAll(tasks);
                
                // Update UI after each batch for progressive loading
                StateHasChanged();
            }
        }
        finally
        {
            _isLoadingStocks = false;
            StateHasChanged();
        }
    }

    private async Task<(Guid ProductId, decimal Available)> LoadStockForSingleProductAsync(Guid productId)
    {
        try
        {
            var stocks = await StockService.GetStockByProductIdAsync(productId);
            var totalAvailable = stocks?.Sum(s => s.AvailableQuantity) ?? 0m;
            _productAvailableQuantities[productId] = totalAvailable;
            return (productId, totalAvailable);
        }
        catch (Exception ex)
        {
            Logger.LogDebug(ex, "Failed loading stock for product {ProductId}", productId);
            _productAvailableQuantities[productId] = 0m;
            return (productId, 0m);
        }
    }

    private void OnSearchChanged()
    {
        ApplyFilters();
    }

    private void ApplyFilters()
    {
        var filtered = _products.AsEnumerable();

        if (!string.IsNullOrWhiteSpace(_searchTerm))
        {
            filtered = filtered.Where(p =>
                p.Name.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase) ||
                p.Code.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase) ||
                (p.ShortDescription?.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase) ?? false));
        }

        _filteredProducts = filtered.ToList();
    }

    private void CreateProduct()
    {
        NavigationManager.NavigateTo("/product-management/products/new");
    }

    private void EditProduct(Guid productId)
    {
        NavigationManager.NavigateTo($"/product-management/products/{productId}");
    }

    private async Task ViewProductAuditLog(ProductDto product)
    {
        _selectedProductForAudit = product;
        _auditDrawerOpen = true;
        await Task.CompletedTask;
    }

    private async Task DeleteProduct(ProductDto product)
    {
        var confirmed = await DialogService.ShowMessageBox(
            TranslationService.GetTranslation("action.confirm", "Conferma"),
            TranslationService.GetTranslationFormatted("product.confirmDelete", "Sei sicuro di voler eliminare il prodotto '{0}'?", product.Name),
            yesText: TranslationService.GetTranslation("action.delete", "Elimina"),
            cancelText: TranslationService.GetTranslation("action.cancel", "Annulla"));

        if (confirmed == true)
        {
            try
            {
                var success = await ProductService.DeleteProductAsync(product.Id);
                if (success)
                {
                    Snackbar.Add(TranslationService.GetTranslation("product.deleteSuccess", "Prodotto eliminato con successo"), Severity.Success);
                    await LoadProductsAsync();
                }
                else
                {
                    Snackbar.Add(TranslationService.GetTranslation("product.deleteError", "Errore nell'eliminazione del prodotto"), Severity.Error);
                }
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error deleting product {ProductId}", product.Id);
                Snackbar.Add(TranslationService.GetTranslation("product.deleteError", "Errore nell'eliminazione del prodotto"), Severity.Error);
            }
        }
    }

    private async Task ToggleProductStatus(ProductDto product)
    {
        // Treat Deleted as not active
        var isActive = product.Status != ProductStatus.Deleted;
        var actionText = isActive
            ? TranslationService.GetTranslation("common.deactivate", "disattivare")
            : TranslationService.GetTranslation("common.activate", "attivare");

        var confirmTitle = TranslationService.GetTranslation("common.confirm", "Conferma");
        var confirmMessage = TranslationService.GetTranslationFormatted(
            "product.confirmStatusChange",
            "Sei sicuro di voler {0} il prodotto '{1}'?",
            actionText, product.Name);

        var confirm = await DialogService.ShowMessageBox(
            confirmTitle,
            confirmMessage,
            yesText: TranslationService.GetTranslation("common.confirm", "Conferma"),
            cancelText: TranslationService.GetTranslation("common.cancel", "Annulla"));

        if (confirm != true)
            return;

        try
        {
            var newStatus = isActive ? ProductStatus.Deleted : ProductStatus.Active;

            var updateDto = new UpdateProductDto
            {
                Name = product.Name ?? string.Empty,
                ShortDescription = product.ShortDescription ?? string.Empty,
                Description = product.Description ?? string.Empty,
                ImageUrl = product.ImageUrl ?? string.Empty,
                ImageDocumentId = product.ImageDocumentId,
                Status = newStatus,
                IsVatIncluded = product.IsVatIncluded,
                DefaultPrice = product.DefaultPrice,
                VatRateId = product.VatRateId,
                UnitOfMeasureId = product.UnitOfMeasureId,
                CategoryNodeId = product.CategoryNodeId,
                FamilyNodeId = product.FamilyNodeId,
                GroupNodeId = product.GroupNodeId,
                StationId = product.StationId,
                BrandId = product.BrandId,
                ModelId = product.ModelId,
                PreferredSupplierId = product.PreferredSupplierId,
                ReorderPoint = product.ReorderPoint,
                SafetyStock = product.SafetyStock,
                TargetStockLevel = product.TargetStockLevel,
                AverageDailyDemand = product.AverageDailyDemand
            };

            var updated = await ProductService.UpdateProductAsync(product.Id, updateDto);
            if (updated != null)
            {
                Snackbar.Add(
                    newStatus == ProductStatus.Active
                        ? TranslationService.GetTranslation("product.activated", "Prodotto attivato con successo!")
                        : TranslationService.GetTranslation("product.deactivated", "Prodotto disattivato con successo!"),
                    Severity.Success);

                await LoadProductsAsync();
            }
            else
            {
                Snackbar.Add(TranslationService.GetTranslation("product.statusChangeError", "Errore nel cambio di stato del prodotto"), Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error toggling status for product {ProductId}", product.Id);
            Snackbar.Add(TranslationService.GetTranslation("product.statusChangeError", "Errore nel cambio di stato del prodotto"), Severity.Error);
        }
    }

    // Helper used for sorting header; fallback0 when unknown
    private object GetAvailableQuantityForSort(Guid productId)
        => _productAvailableQuantities.TryGetValue(productId, out var v) ? v :0m;

    /// <summary>
    /// Deletes all selected products.
    /// </summary>
    private async Task DeleteSelectedProducts()
    {
        if (_selectedProducts.Count == 0)
            return;

        var confirmTitle = TranslationService.GetTranslation("common.confirm", "Conferma");
        var confirmMessage = TranslationService.GetTranslationFormatted("product.confirmDeleteMultiple", 
            "Sei sicuro di voler eliminare {0} prodotti selezionati? Questa azione non può essere annullata.", 
            _selectedProducts.Count);

        var confirm = await DialogService.ShowMessageBox(
            confirmTitle,
            confirmMessage,
            yesText: TranslationService.GetTranslation("common.delete", "Elimina"),
            cancelText: TranslationService.GetTranslation("common.cancel", "Annulla"));

        if (confirm == true)
        {
            try
            {
                var deletedCount = 0;
                var failedCount = 0;
                
                foreach (var product in _selectedProducts.ToList())
                {
                    try
                    {
                        await ProductService.DeleteProductAsync(product.Id);
                        deletedCount++;
                    }
                    catch (Exception ex)
                    {
                        failedCount++;
                        Logger.LogError(ex, "Error deleting product {ProductId}", product.Id);
                    }
                }
                
                _selectedProducts.Clear();
                
                if (failedCount == 0)
                {
                    Snackbar.Add(TranslationService.GetTranslationFormatted("product.deletedMultiple", 
                        "{0} prodotti eliminati con successo!", deletedCount), Severity.Success);
                }
                else
                {
                    Snackbar.Add(TranslationService.GetTranslationFormatted("product.deletedMultiplePartial", 
                        "{0} prodotti eliminati, {1} falliti", deletedCount, failedCount), Severity.Warning);
                }
                
                await LoadProductsAsync();
            }
            catch (Exception ex)
            {
                Snackbar.Add(TranslationService.GetTranslation("product.deleteError", 
                    "Errore nell'eliminazione dei prodotti: {0}", ex.Message), Severity.Error);
                Logger.LogError(ex, "Error deleting selected products");
            }
        }
    }
}
