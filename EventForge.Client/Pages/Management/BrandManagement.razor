@page "/product-management/brands"
@using Microsoft.AspNetCore.Authorization
@using EventForge.DTOs.Common
@using EventForge.DTOs.Products
@using EventForge.Client.Shared.Components
@attribute [Authorize(Roles = "SuperAdmin,Admin,Manager")]
@inject IBrandService BrandService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject ITranslationService TranslationService
@inject ILogger<BrandManagement> Logger

<PageTitle>@TranslationService.GetTranslation("brands.management", "Gestione Marche")</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4" Style="height:100vh; display:flex; flex-direction:column;">
    <PageLoadingOverlay IsVisible="_isLoading" Message="@TranslationService.GetTranslation("messages.loadingPage", "Caricamento pagina...")" />

    <MudPaper Elevation="1" Class="pa-3 mb-4" Style="min-height:0;">
        <div class="d-flex justify-space-between align-center">
            <MudText Typo="Typo.h4">
                <MudIcon Icon="@Icons.Material.Outlined.Label" Class="mr-2" />
                @TranslationService.GetTranslation("brands.management", "Gestione Marche")
            </MudText>
            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Outlined.Add" Color="Color.Primary" OnClick="@OpenCreateBrand">
                @TranslationService.GetTranslation("common.create", "Crea")
            </MudButton>
        </div>
    </MudPaper>

    <MudPaper Elevation="1" Class="pa-4 flex-grow-1 d-flex flex-column" Style="min-height:0;">
        <MudTextField @bind-Value="_search" Placeholder="@TranslationService.GetTranslation("brands.searchPlaceholder", "Cerca marche...")" Variant="Variant.Outlined" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Outlined.Search" />
        <div Style="overflow:auto; min-height:0; flex:1;">
            <MudTable Items="@(_brandsPaged?.Items ?? Enumerable.Empty<BrandDto>())" Loading="_isLoading" Hover="true" Striped="true" Class="mt-3">
                <HeaderContent>
                    <MudTh>@TranslationService.GetTranslation("field.name", "Nome")</MudTh>
                    <MudTh>@TranslationService.GetTranslation("field.createdAt", "Creato il")</MudTh>
                    <MudTh>@TranslationService.GetTranslation("common.actions", "Azioni")</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>@context.Name</MudTd>
                    <MudTd>@context.CreatedAt.ToString("dd/MM/yyyy")</MudTd>
                    <MudTd>
                        <MudButton Size="Size.Small" Variant="Variant.Text" OnClick="@(() => EditBrand(context))">@TranslationService.GetTranslation("common.edit", "Modifica")</MudButton>
                    </MudTd>
                </RowTemplate>
            </MudTable>
        </div>
    </MudPaper>
</MudContainer>

@code {
    private bool _isLoading = true;
    private string _search = string.Empty;
    private PagedResult<BrandDto>? _brandsPaged;

    protected override async Task OnInitializedAsync()
    {
        await LoadBrands();
    }

    private async Task LoadBrands()
    {
        try
        {
            _isLoading = true;
            _brandsPaged = await BrandService.GetBrandsAsync(1,100);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading brands");
            Snackbar.Add(TranslationService.GetTranslation("common.errorLoading", "Errore nel caricamento"), Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }

    private void OpenCreateBrand()
    {
        Snackbar.Add(TranslationService.GetTranslation("common.notImplemented", "Funzionalità non ancora implementata"), Severity.Info);
    }

    private void EditBrand(BrandDto brand)
    {
        Snackbar.Add(TranslationService.GetTranslation("common.notImplemented", "Funzionalità non ancora implementata"), Severity.Info);
    }
}
