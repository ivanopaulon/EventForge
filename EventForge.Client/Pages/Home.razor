@page "/"
@using Microsoft.AspNetCore.Authorization
@attribute [AllowAnonymous]
@inject IHealthService HealthService
@inject NavigationManager NavigationManager

<PageTitle>EventForge - Home</PageTitle>

<!-- Improved responsive layout with proper grid system and accessibility -->
<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4 mt-sm-6 mt-md-8">
    <MudGrid Justify="Justify.Center" AlignItems="AlignItems.Center">
        <MudItem xs="12" sm="10" md="8" lg="6">
            <MudPaper Class="pa-4 pa-sm-6 pa-md-8" Elevation="4" role="main">
                <!-- Semantic header with proper heading hierarchy -->
                <header class="text-center mb-6">
                    <MudText Typo="Typo.h3" 
                             Component="h1" 
                             Align="Align.Center" 
                             Class="mb-4"
                             aria-label="EventForge Home Page">
                        <MudIcon Icon="@Icons.Material.Filled.Event" 
                                 Class="mr-2" 
                                 Size="Size.Large"
                                 aria-hidden="true" />
                        EventForge
                    </MudText>
                    <MudText Typo="Typo.body1" 
                             Align="Align.Center" 
                             Color="Color.Secondary">
                        Sistema di gestione eventi e monitoraggio
                    </MudText>
                </header>

                <!-- Health check section with improved accessibility -->
                <section aria-labelledby="health-section">
                    <MudText Typo="Typo.h5" 
                             Component="h2" 
                             id="health-section"
                             Class="mb-4 d-flex align-center">
                        <MudIcon Icon="Icons.Material.Filled.HealthAndSafety" 
                                 Class="mr-2" 
                                 Color="Color.Primary"
                                 aria-hidden="true" />
                        Stato del Sistema
                    </MudText>

                    <MudGrid Spacing="2">
                        <MudItem xs="12" sm="6">
                            <MudCard Elevation="2" Class="pa-4">
                                <MudCardContent>
                                    <MudText Typo="Typo.h6" Class="mb-2">Servizi</MudText>
                                    <MudChip T="string"
                                             Color="Color.Success" 
                                             Size="Size.Small"
                                             Icon="@Icons.Material.Filled.CheckCircle">
                                        Operativi
                                    </MudChip>
                                </MudCardContent>
                            </MudCard>
                        </MudItem>
                        <MudItem xs="12" sm="6">
                            <MudCard Elevation="2" Class="pa-4">
                                <MudCardContent>
                                    <MudText Typo="Typo.h6" Class="mb-2">Database</MudText>
                                    <MudChip T="string"
                                             Color="Color.Success" 
                                             Size="Size.Small"
                                             Icon="@Icons.Material.Filled.CheckCircle">
                                        Connesso
                                    </MudChip>
                                </MudCardContent>
                            </MudCard>
                        </MudItem>
                    </MudGrid>
                </section>

                <!-- Action buttons with responsive layout -->
                <MudGrid Class="mt-6" Justify="Justify.Center">
                    <MudItem xs="12" sm="6" md="4">
                        <MudButton Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   FullWidth="true"
                                   StartIcon="@Icons.Material.Filled.Login"
                                   OnClick="@(() => NavigationManager.NavigateTo("/login"))"
                                   aria-label="Accedi al sistema">
                            Accedi
                        </MudButton>
                    </MudItem>
                </MudGrid>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private HealthStatusDto? _healthStatus;
    private string? _errorMessage;
    private string _healthJson = string.Empty;

    protected override Task OnInitializedAsync()
    {
        // Load health status in background
        // _ = Task.Run(async () => await LoadHealthStatus());
        return Task.CompletedTask;
    }

    private async Task LoadHealthStatus()
    {
        try
        {
            // Set a shorter timeout for the health check to avoid hanging
            using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(5));
            _healthStatus = await HealthService.GetHealthAsync();
            
            if (_healthStatus != null)
            {
                // Pretty print JSON
                _healthJson = System.Text.Json.JsonSerializer.Serialize(_healthStatus, new System.Text.Json.JsonSerializerOptions 
                { 
                    WriteIndented = true 
                });
                Console.WriteLine("[Home] Health status loaded successfully");
            }
            else
            {
                _errorMessage = "Unable to connect to server or retrieve health status.";
                Console.WriteLine("[Home] Health status is null");
            }
        }
        catch (TaskCanceledException)
        {
            _errorMessage = "Health check request timed out (5 seconds). Server may be unavailable.";
            Console.WriteLine("[Home] Health check timed out");
        }
        catch (HttpRequestException ex)
        {
            _errorMessage = $"Network error: {ex.Message}";
            Console.WriteLine($"[Home] Network error: {ex.Message}");
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error: {ex.Message}";
        }
    }

    private Color GetStatusColor(string? status) => status?.ToLower() switch
    {
        "healthy" => Color.Success,
        "degraded" => Color.Warning,
        "unhealthy" or "error" => Color.Error,
        _ => Color.Default
    };
}