@page "/"
@using Microsoft.AspNetCore.Authorization
@attribute [AllowAnonymous]
@inject IHealthService HealthService
@inject NavigationManager NavigationManager

<PageTitle>EventForge - Home</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-8">
    <MudPaper Class="pa-8" Elevation="4">
        <!-- Updated header with trace.svg logo for consistent branding -->
        <MudText Typo="Typo.h4" Align="Align.Center">
            EventForge - Home
        </MudText>

        <MudText Typo="Typo.h5" Class="mb-4">
            <MudIcon Icon="Icons.Material.Filled.HealthAndSafety" Class="mr-2" />
            System Health Check
        </MudText>

    </MudPaper>
</MudContainer>

@code {
    // NOTE: I18N REMOVED - TranslationService dependency removed to create minimal home
    // All text content is now hardcoded in English to avoid rendering issues
    private bool _isLoading = false; // Changed to false to show content immediately
    private HealthStatusDto? _healthStatus;
    private string? _errorMessage;
    private string _healthJson = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        // Debug log to verify component is executing
        Console.WriteLine("[Home] OnInitializedAsync called");
        
        // Load health status in background
        // _ = Task.Run(async () => await LoadHealthStatus());
    }

    private async Task LoadHealthStatus()
    {
        Console.WriteLine("[Home] LoadHealthStatus started");
        _isLoading = true;
        StateHasChanged(); // Trigger re-render to show loading state
        
        try
        {
            // Set a shorter timeout for the health check to avoid hanging
            using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(5));
            _healthStatus = await HealthService.GetHealthAsync();
            
            if (_healthStatus != null)
            {
                // Pretty print JSON
                _healthJson = System.Text.Json.JsonSerializer.Serialize(_healthStatus, new System.Text.Json.JsonSerializerOptions 
                { 
                    WriteIndented = true 
                });
                Console.WriteLine("[Home] Health status loaded successfully");
            }
            else
            {
                _errorMessage = "Unable to connect to server or retrieve health status.";
                Console.WriteLine("[Home] Health status is null");
            }
        }
        catch (TaskCanceledException)
        {
            _errorMessage = "Health check request timed out (5 seconds). Server may be unavailable.";
            Console.WriteLine("[Home] Health check timed out");
        }
        catch (HttpRequestException ex)
        {
            _errorMessage = $"Network error: {ex.Message}";
            Console.WriteLine($"[Home] Network error: {ex.Message}");
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error: {ex.Message}";
            Console.WriteLine($"[Home] Error: {ex.Message}");
        }
        finally
        {
            _isLoading = false;
            StateHasChanged(); // Trigger re-render when done
            Console.WriteLine("[Home] LoadHealthStatus completed");
        }
    }

    private Color GetStatusColor(string? status) => status?.ToLower() switch
    {
        "healthy" => Color.Success,
        "degraded" => Color.Warning,
        "unhealthy" or "error" => Color.Error,
        _ => Color.Default
    };
}