@page "/loading-demo"
@using EventForge.Client.Services
@inject ILoadingDialogService LoadingDialogService
@inject ITranslationService TranslationService

<PageTitle>Loading Dialog Demo</PageTitle>

<div class="d-flex flex-column ga-4 pa-4">
    <MudText Typo="Typo.h4">Demo Componente Caricamento</MudText>
    <MudText Typo="Typo.body1">
        Questo demo mostra come utilizzare il nuovo componente di caricamento modale.
    </MudText>

    <MudStack Row="true" Spacing="4" Wrap="Wrap.Wrap">
        <MudButton Variant="Variant.Filled" 
                   Color="Color.Primary" 
                   StartIcon="Icons.Material.Filled.PlayArrow"
                   OnClick="@ShowBasicLoading">
            Caricamento Base
        </MudButton>

        <MudButton Variant="Variant.Filled" 
                   Color="Color.Secondary" 
                   StartIcon="Icons.Material.Filled.Timeline"
                   OnClick="@ShowProgressLoading">
            Caricamento con Progresso
        </MudButton>

        <MudButton Variant="Variant.Filled" 
                   Color="Color.Tertiary" 
                   StartIcon="Icons.Material.Filled.Update"
                   OnClick="@ShowMultiStepLoading">
            Caricamento Multi-Step
        </MudButton>

        <MudButton Variant="Variant.Outlined" 
                   Color="Color.Error" 
                   StartIcon="Icons.Material.Filled.Stop"
                   OnClick="@HideLoading">
            Ferma Caricamento
        </MudButton>
    </MudStack>

    <MudDivider />

    <MudText Typo="Typo.h6">Utilizzo del LoadingDialogService</MudText>
    <MudPaper Class="pa-4" Elevation="1">
        <MudText Typo="Typo.body2" Class="mb-2">
            <strong>Esempio di codice:</strong>
        </MudText>
        <MudPaper Class="pa-3" Elevation="0" Style="background-color: #f5f5f5;">
            <MudText Typo="Typo.body2" Style="font-family: monospace; white-space: pre-wrap;">@(@"@inject ILoadingDialogService LoadingDialogService

// Mostra caricamento semplice
await LoadingDialogService.ShowAsync(""Elaborazione..."", ""Caricamento dati"");

// Aggiorna operazione
await LoadingDialogService.UpdateOperationAsync(""Salvando modifiche..."");

// Aggiorna progresso (se abilitato)
await LoadingDialogService.UpdateProgressAsync(75);

// Nascondi caricamento
await LoadingDialogService.HideAsync();")</MudText>
        </MudPaper>
    </MudPaper>

    <MudText Typo="Typo.h6">Caratteristiche</MudText>
    <MudList T="string" Dense="true">
        <MudListItem T="string" Icon="@Icons.Material.Filled.CheckCircle" 
                     Text="Dialog modale configurabile" />
        <MudListItem T="string" Icon="@Icons.Material.Filled.CheckCircle" 
                     Text="Titolo e operazione personalizzabili" />
        <MudListItem T="string" Icon="@Icons.Material.Filled.CheckCircle" 
                     Text="Timer automatici per tempo totale e per task" />
        <MudListItem T="string" Icon="@Icons.Material.Filled.CheckCircle" 
                     Text="Supporto per logo aziendale personalizzato" />
        <MudListItem T="string" Icon="@Icons.Material.Filled.CheckCircle" 
                     Text="Animazione SVG pulsante personalizzabile" />
        <MudListItem T="string" Icon="@Icons.Material.Filled.CheckCircle" 
                     Text="Barra di progresso opzionale" />
        <MudListItem T="string" Icon="@Icons.Material.Filled.CheckCircle" 
                     Text="Supporto temi e modalità accessibilità" />
    </MudList>
</div>

@code {
    private async Task ShowBasicLoading()
    {
        await LoadingDialogService.ShowAsync(
            "Elaborazione Dati", 
            "Caricando informazioni dal server..."
        );
        
        // Simula un'operazione di 3 secondi
        await Task.Delay(3000);
        await LoadingDialogService.HideAsync();
    }

    private async Task ShowProgressLoading()
    {
        await LoadingDialogService.ShowAsync(
            "Download File", 
            "Iniziando download...", 
            showProgress: true
        );
        
        // Simula download con progresso
        for (int i = 0; i <= 100; i += 10)
        {
            await LoadingDialogService.UpdateProgressAsync(i);
            await LoadingDialogService.UpdateOperationAsync($"Scaricando... {i}%");
            await Task.Delay(300);
        }
        
        await LoadingDialogService.UpdateOperationAsync("Download completato!");
        await Task.Delay(1000);
        await LoadingDialogService.HideAsync();
    }

    private async Task ShowMultiStepLoading()
    {
        await LoadingDialogService.ShowAsync(
            "Processo Multi-Step", 
            "Fase 1: Validazione dati"
        );
        
        // Step 1
        await Task.Delay(2000);
        await LoadingDialogService.UpdateOperationAsync("Fase 2: Elaborazione");
        
        // Step 2
        await Task.Delay(2000);
        await LoadingDialogService.UpdateOperationAsync("Fase 3: Salvataggio");
        
        // Step 3
        await Task.Delay(2000);
        await LoadingDialogService.UpdateOperationAsync("Processo completato!");
        
        await Task.Delay(1000);
        await LoadingDialogService.HideAsync();
    }

    private async Task HideLoading()
    {
        await LoadingDialogService.HideAsync();
    }
}