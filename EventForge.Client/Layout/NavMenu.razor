@inject IAuthService AuthService
@implements IDisposable

<MudNavMenu>
    @if (_isAuthenticated)
    {
        @if (_isAdmin)
        {
            <MudNavLink Href="/admin" Icon="Icons.Material.Filled.AdminPanelSettings" Match="NavLinkMatch.All">
                Admin Dashboard
            </MudNavLink>
        }
    }
    else
    {
        <MudNavLink Href="/login" Icon="Icons.Material.Filled.Login" Match="NavLinkMatch.All">
            Login
        </MudNavLink>
    }
</MudNavMenu>

@code {
    private bool _isAuthenticated = false;
    private bool _isAdmin = false;

    protected override async Task OnInitializedAsync()
    {
        AuthService.OnAuthenticationStateChanged += OnAuthenticationStateChanged;
        await CheckAuthenticationState();
    }

    private async Task CheckAuthenticationState()
    {
        _isAuthenticated = await AuthService.IsAuthenticatedAsync();
        if (_isAuthenticated)
        {
            _isAdmin = await AuthService.IsInRoleAsync("Admin");
        }
        else
        {
            _isAdmin = false;
        }
        StateHasChanged();
    }

    private async void OnAuthenticationStateChanged()
    {
        await CheckAuthenticationState();
    }

    public void Dispose()
    {
        AuthService.OnAuthenticationStateChanged -= OnAuthenticationStateChanged;
    }
}
