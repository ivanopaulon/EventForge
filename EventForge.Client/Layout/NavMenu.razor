@using EventForge.DTOs.Notifications
@using EventForge.DTOs.Chat
@inject IAuthService AuthService
@inject INotificationService NotificationService
@inject IChatService ChatService
@inject SignalRService SignalRService
@inject ITranslationService TranslationService
@inject IHelpService HelpService
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@implements IDisposable

<MudNavMenu>
    @if (_isAuthenticated)
    {
        @if (_isSuperAdmin)
        {
            <MudNavGroup title="@TranslationService.GetTranslation("nav.superAdmin", "Super Amministrazione")" 
                         Icon="@Icons.Material.Outlined.AdminPanelSettings" 
                         Expanded="true">
                <MudNavLink Href="/superadmin/tenant-management" 
                            Icon="@Icons.Material.Outlined.Business" 
                            Match="NavLinkMatch.All">
                    @TranslationService.GetTranslation("nav.tenantManagement", "Gestione Tenant")
                </MudNavLink>
                <MudNavLink Href="/superadmin/user-management" 
                            Icon="@Icons.Material.Outlined.People" 
                            Match="NavLinkMatch.All">
                    @TranslationService.GetTranslation("nav.userManagement", "Gestione Utenti")
                </MudNavLink>
                <MudNavLink Href="/superadmin/event-management" 
                            Icon="@Icons.Material.Outlined.Event" 
                            Match="NavLinkMatch.All">
                    @TranslationService.GetTranslation("nav.eventManagement", "Gestione Eventi")
                </MudNavLink>
                <MudNavLink Href="/superadmin/event-category-management" 
                            Icon="@Icons.Material.Outlined.BookmarkBorder" 
                            Match="NavLinkMatch.All">
                    @TranslationService.GetTranslation("nav.eventCategoryManagement", "Gestione Categorie")
                </MudNavLink>
                <MudNavLink Href="/superadmin/event-type-management" 
                            Icon="@Icons.Material.Outlined.Category" 
                            Match="NavLinkMatch.All">
                    @TranslationService.GetTranslation("nav.eventTypeManagement", "Gestione Tipi Evento")
                </MudNavLink>
                <MudNavLink Href="/superadmin/tenant-switch" 
                            Icon="@Icons.Material.Outlined.SwapHoriz" 
                            Match="NavLinkMatch.All">
                    @TranslationService.GetTranslation("nav.tenantSwitch", "Switch Tenant")
                </MudNavLink>
                <MudNavLink Href="/superadmin/system-logs" 
                            Icon="@Icons.Material.Outlined.Article" 
                            Match="NavLinkMatch.All">
                    @TranslationService.GetTranslation("nav.systemLogs", "Log Sistema")
                </MudNavLink>
                <MudNavLink Href="/superadmin/client-log-management" 
                            Icon="@Icons.Material.Outlined.BugReport" 
                            Match="NavLinkMatch.All">
                    @TranslationService.GetTranslation("nav.clientLogManagement", "Log Client")
                </MudNavLink>
                <MudNavLink Href="/superadmin/audit-trail" 
                            Icon="@Icons.Material.Outlined.History" 
                            Match="NavLinkMatch.All">
                    @TranslationService.GetTranslation("nav.auditTrail", "Audit Trail")
                </MudNavLink>
                <MudNavLink Href="/superadmin/chat-moderation" 
                            Icon="@Icons.Material.Outlined.Forum" 
                            Match="NavLinkMatch.All">
                    @TranslationService.GetTranslation("nav.chatModeration", "Moderazione Chat")
                </MudNavLink>
                <MudNavLink Href="/superadmin/configuration" 
                            Icon="@Icons.Material.Outlined.Settings" 
                            Match="NavLinkMatch.All">
                    @TranslationService.GetTranslation("nav.configuration", "Configurazione")
                </MudNavLink>
                <MudNavLink Href="/superadmin/translation-management" 
                            Icon="@Icons.Material.Outlined.Translate" 
                            Match="NavLinkMatch.All">
                    @TranslationService.GetTranslation("nav.translationManagement", "Gestione Traduzioni")
                </MudNavLink>
            </MudNavGroup>
        }
        @if (_isAdmin || _isManager)
        {
            <MudNavGroup title="@TranslationService.GetTranslation("nav.administration", "Amministrazione")" 
                         Icon="@Icons.Material.Outlined.Dashboard" 
                         Expanded="true">
                <MudNavLink Href="/admin" 
                            Icon="@Icons.Material.Outlined.Dashboard" 
                            Match="NavLinkMatch.All">
                    @TranslationService.GetTranslation("nav.adminDashboard", "Dashboard Admin")
                </MudNavLink>
                <!-- Gestione Eventi visible to SuperAdmin, Admin, Manager as per requirements -->
                @if (_canManageEvents)
                {
                    <MudNavLink Href="/admin/event-management" 
                                Icon="@Icons.Material.Outlined.Event" 
                                Match="NavLinkMatch.All">
                        @TranslationService.GetTranslation("nav.eventManagement", "Gestione Eventi")
                    </MudNavLink>
                }
            </MudNavGroup>
        }
        
        <!-- Communication section -->
        <MudNavGroup title="@TranslationService.GetTranslation("nav.communication", "Comunicazione")" 
                     Icon="@Icons.Material.Outlined.Forum" 
                     Expanded="false">
            <MudNavLink Href="/notifications" 
                        Icon="@Icons.Material.Outlined.Notifications" 
                        Match="NavLinkMatch.All">
                <div class="d-flex align-center justify-space-between w-100">
                    <span>@TranslationService.GetTranslation("nav.notifications", "Notifiche")</span>
                    <NotificationBadge Count="@_unreadNotificationCount" 
                                       ShowIcon="false"
                                       BadgeColor="Color.Error"
                                       BadgeSize="Size.Small" />
                </div>
            </MudNavLink>
            <MudNavLink Href="/chat" 
                        Icon="@Icons.Material.Outlined.Chat" 
                        Match="NavLinkMatch.All">
                <div class="d-flex align-center justify-space-between w-100">
                    <span>@TranslationService.GetTranslation("nav.chat", "Chat")</span>
                    <NotificationBadge Count="@_unreadMessageCount" 
                                       ShowIcon="false"
                                       BadgeColor="Color.Primary"
                                       BadgeSize="Size.Small" />
                </div>
            </MudNavLink>
        </MudNavGroup>
        
        <!-- Common user links -->
        <MudNavLink Href="/profile" Icon="@Icons.Material.Outlined.Person" Match="NavLinkMatch.All">
            @TranslationService.GetTranslation("nav.profile", "Profilo")
        </MudNavLink>

        <!-- Help Section -->
        <MudDivider Class="my-4" />
        <MudNavGroup title="@TranslationService.GetTranslation("nav.help", "Aiuto e Supporto")" 
                     Icon="@Icons.Material.Outlined.Help" 
                     Expanded="false">
            <MudNavLink Icon="@Icons.Material.Outlined.QuestionMark" 
                        OnClick="@ShowGeneralHelp">
                @TranslationService.GetTranslation("nav.helpCenter", "Centro Aiuto")
            </MudNavLink>
            <MudNavLink Icon="@Icons.Material.Outlined.Tour" 
                        OnClick="@ShowInteractiveTour">
                @TranslationService.GetTranslation("nav.interactiveTour", "Tour Interattivo")
            </MudNavLink>
            <MudNavLink Icon="@Icons.Material.Outlined.School" 
                        OnClick="@ShowOnboarding">
                @TranslationService.GetTranslation("nav.tutorialCenter", "Centro Tutorial")
            </MudNavLink>
        </MudNavGroup>
    }
    else
    {
        <MudNavLink Href="/login" Icon="@Icons.Material.Outlined.Login" Match="NavLinkMatch.All">
            @TranslationService.GetTranslation("nav.login", "Accedi")
        </MudNavLink>
    }
</MudNavMenu>

@code {
    private bool _isAuthenticated = false;
    private bool _isAdmin = false;
    private bool _isSuperAdmin = false;
    private bool _isManager = false;
    private bool _canManageEvents = false;
    private int _unreadNotificationCount = 0;
    private int _unreadMessageCount = 0;

    protected override async Task OnInitializedAsync()
    {
        AuthService.OnAuthenticationStateChanged += OnAuthenticationStateChanged;
        TranslationService.LanguageChanged += OnLanguageChanged;
        
        // Subscribe to real-time updates
        NotificationService.NotificationReceived += OnNotificationReceived;
        NotificationService.NotificationRead += OnNotificationRead;
        ChatService.MessageReceived += OnMessageReceived;
        ChatService.MessageRead += OnMessageRead;
        
        await CheckAuthenticationState();
    }

    private async Task CheckAuthenticationState()
    {
        _isAuthenticated = await AuthService.IsAuthenticatedAsync();
        if (_isAuthenticated)
        {
            // Check for all role types
            _isSuperAdmin = await AuthService.IsSuperAdminAsync();
            _isAdmin = await AuthService.IsInRoleAsync("Admin");
            _isManager = await AuthService.IsInRoleAsync("Manager");
            
            // "Gestione Eventi" visible to SuperAdmin, Admin, Manager as per requirements
            _canManageEvents = _isSuperAdmin || _isAdmin || _isManager;
            
            // Load notification and message counts
            await LoadCommunicationCountsAsync();
        }
        else
        {
            _isAdmin = false;
            _isSuperAdmin = false;
            _isManager = false;
            _canManageEvents = false;
            _unreadNotificationCount = 0;
            _unreadMessageCount = 0;
        }
        StateHasChanged();
    }

    private async void OnAuthenticationStateChanged()
    {
        await CheckAuthenticationState();
    }

    private void OnLanguageChanged(object? sender, string newLanguage)
    {
        // Refresh the component when language changes to update navigation labels
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        AuthService.OnAuthenticationStateChanged -= OnAuthenticationStateChanged;
        TranslationService.LanguageChanged -= OnLanguageChanged;
        
        // Unsubscribe from real-time updates
        NotificationService.NotificationReceived -= OnNotificationReceived;
        NotificationService.NotificationRead -= OnNotificationRead;
        ChatService.MessageReceived -= OnMessageReceived;
        ChatService.MessageRead -= OnMessageRead;
    }

    /// <summary>
    /// Load unread notification and message counts for navigation badges
    /// </summary>
    private async Task LoadCommunicationCountsAsync()
    {
        try
        {
            // Start SignalR connections if not already started
            if (!SignalRService.IsNotificationConnected)
            {
                await SignalRService.StartNotificationConnectionAsync();
            }
            if (!SignalRService.IsChatConnected)
            {
                await SignalRService.StartChatConnectionAsync();
            }

            // Get notification stats to calculate unread count
            var notificationStats = await NotificationService.GetNotificationStatsAsync();
            _unreadNotificationCount = notificationStats.UnreadCount;

            // Get chat stats to calculate unread messages
            // Note: ChatStatsDto doesn't have unread count, so we'll rely on real-time updates for now
            var chatStats = await ChatService.GetChatStatsAsync();
            // _unreadMessageCount will be updated via real-time events
            
            StateHasChanged();
        }
        catch (Exception ex)
        {
            // Log error but don't show to user as this is background loading
            Console.WriteLine($"[NavMenu] Error loading communication counts: {ex.Message}");
            _unreadNotificationCount = 0;
            _unreadMessageCount = 0;
        }
    }

    #region Real-time Event Handlers

    private void OnNotificationReceived(NotificationResponseDto notification)
    {
        _unreadNotificationCount++;
        InvokeAsync(StateHasChanged);
    }

    private void OnNotificationRead(Guid notificationId)
    {
        _unreadNotificationCount = Math.Max(0, _unreadNotificationCount - 1);
        InvokeAsync(StateHasChanged);
    }

    private void OnMessageReceived(ChatMessageDto message)
    {
        _unreadMessageCount++;
        InvokeAsync(StateHasChanged);
    }

    private void OnMessageRead(Guid chatId, Guid messageId)
    {
        _unreadMessageCount = Math.Max(0, _unreadMessageCount - 1);
        InvokeAsync(StateHasChanged);
    }

    #endregion

    #region Help System Methods

    /// <summary>
    /// Shows general help dialog.
    /// </summary>
    private async Task ShowGeneralHelp()
    {
        try
        {
            var options = new DialogOptions 
            { 
                MaxWidth = MaxWidth.Medium, 
                FullWidth = true,
                CloseOnEscapeKey = true
            };

            var parameters = new DialogParameters
            {
                ["Title"] = TranslationService.GetTranslation("help.generalHelpTitle", "EventForge Help Center"),
                ["Content"] = TranslationService.GetTranslation("help.generalHelpContent", "Welcome to EventForge Help! Use this application to manage events, notifications, chat, and more. Each section has its own help system with detailed tutorials and walkthroughs.")
            };

            await DialogService.ShowAsync<MudMessageBox>(TranslationService.GetTranslation("help.helpCenter", "Help Center"), parameters, options);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error showing help: {ex.Message}", Severity.Warning);
        }
    }

    /// <summary>
    /// Shows interactive tour selector.
    /// </summary>
    private async Task ShowInteractiveTour()
    {
        try
        {
            var options = new DialogOptions 
            { 
                MaxWidth = MaxWidth.Medium, 
                FullWidth = true,
                CloseOnEscapeKey = true
            };

            var tourOptions = new List<string>
            {
                TranslationService.GetTranslation("tour.notifications", "Notifications Tour"),
                TranslationService.GetTranslation("tour.chat", "Chat Tour"),
                TranslationService.GetTranslation("tour.superadmin", "SuperAdmin Tour")
            };

            // For now, show a simple message. This could be expanded to a custom component
            var message = TranslationService.GetTranslation("tour.selectMessage", "Visit the specific sections (Notifications, Chat, SuperAdmin) and click 'Take a Tour' to start an interactive walkthrough of that feature.");
            
            await DialogService.ShowMessageBox(
                TranslationService.GetTranslation("nav.interactiveTour", "Interactive Tour"),
                message,
                TranslationService.GetTranslation("common.ok", "OK"),
                options: options
            );
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error showing tour options: {ex.Message}", Severity.Warning);
        }
    }

    /// <summary>
    /// Shows onboarding options.
    /// </summary>
    private async Task ShowOnboarding()
    {
        try
        {
            var options = new DialogOptions 
            { 
                MaxWidth = MaxWidth.Medium, 
                FullWidth = true,
                CloseOnEscapeKey = true
            };

            var message = TranslationService.GetTranslation("onboarding.centerMessage", "Tutorial Center: Access step-by-step guides for each feature. You can reset your progress and replay tutorials at any time. Visit Notifications, Chat, or SuperAdmin sections and click 'Quick Start' to begin.");
            
            await DialogService.ShowMessageBox(
                TranslationService.GetTranslation("nav.tutorialCenter", "Tutorial Center"),
                message,
                TranslationService.GetTranslation("common.ok", "OK"),
                options: options
            );
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error showing tutorial center: {ex.Message}", Severity.Warning);
        }
    }

    #endregion
}
