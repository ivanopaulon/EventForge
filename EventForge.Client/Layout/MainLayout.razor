@inherits LayoutComponentBase
@using EventForge.Client.Constants
@inject IAuthService AuthService
@inject IThemeService ThemeService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject ITranslationService TranslationService
@implements IDisposable

<MudThemeProvider @ref="_mudThemeProvider" Theme="_currentTheme" />

<MudLayout>
    <!-- Improved AppBar with accessibility enhancements and dynamic title -->
    <MudAppBar Elevation="1" role="banner">
        <MudIconButton Icon="Icons.Material.Filled.Menu" 
                       Color="Color.Inherit" 
                       Edge="Edge.Start" 
                       OnClick="@(() => _drawerOpen = !_drawerOpen)"
                       aria-label="@TranslationService.GetTranslation("navigation.openMenu", "Open navigation menu")"
                       aria-expanded="@_drawerOpen"
                       aria-controls="navigation-drawer" />
        
        <!-- Logo and brand with improved accessibility -->
        <div class="d-flex align-center" role="img" aria-label="EventForge Logo">
            <MudImage Src="trace.svg" 
                      Alt="EventForge Logo" 
                      Height="32" 
                      Width="32" 
                      Class="mr-2" />
            <MudText Typo="Typo.h6" 
                     Class="d-none d-sm-block"
                     aria-hidden="true">
                EventForge
            </MudText>
        </div>
        
        <!-- Dynamic Page Title -->
        <MudText Typo="Typo.h6" 
                 Class="ml-4 d-none d-md-block"
                 Color="Color.Inherit">
            @GetPageTitle()
        </MudText>
        
        <MudSpacer />
        
        @if (_isAuthenticated)
        {
            <!-- User Account Menu - no longer includes theme/language controls -->
            <nav class="d-flex align-center ga-2" role="navigation" aria-label="User controls">
                <UserAccountMenu OnLogout="@HandleLogout" />
            </nav>
        }
        else
        {
            <!-- Login button for unauthenticated users -->
            <MudButton Variant="Variant.Text" 
                       Color="Color.Inherit" 
                       StartIcon="Icons.Material.Filled.Login"
                       OnClick="@(() => NavigationManager.NavigateTo("/login"))"
                       aria-label="@TranslationService.GetTranslation("auth.loginDescription", "Login to system")">
                @TranslationService.GetTranslation("auth.login", "Login")
            </MudButton>
        }
    </MudAppBar>
    
    @if (_isAuthenticated)
    {
        <!-- Navigation drawer with accessibility improvements -->
        <MudDrawer @bind-Open="@_drawerOpen" 
                   ClipMode="DrawerClipMode.Always" 
                   Elevation="2"
                   id="navigation-drawer"
                   aria-label="@TranslationService.GetTranslation("navigation.mainMenu", "Main navigation menu")">
            <NavMenu />
        </MudDrawer>
    }
    
    <!-- Main content area with proper semantic structure -->
    <MudMainContent Class="mt-16 pa-2 pa-sm-4 main-content-with-footer" role="main">
        <!-- Skip link for accessibility -->
        <a href="#main-content" 
           class="sr-only sr-only-focusable position-absolute" 
           style="top: 1rem; left: 1rem; z-index: 9999;">
            @TranslationService.GetTranslation("accessibility.skipToContent", "Skip to main content")
        </a>
        
        <div id="main-content" tabindex="-1">
            @Body
            <CustomErrorBoundary OnError="HandleError">
            </CustomErrorBoundary>
        </div>
    </MudMainContent>
</MudLayout>

<!-- Health Footer - centralized for all layouts -->
<HealthFooter />

@code {
    private bool _drawerOpen = true;
    private bool _isAuthenticated = false;
    private MudThemeProvider? _mudThemeProvider;
    private MudTheme _currentTheme = new();

    protected override async Task OnInitializedAsync()
    {
        AuthService.OnAuthenticationStateChanged += OnAuthenticationStateChanged;
        ThemeService.OnThemeChanged += OnThemeChanged;
        TranslationService.LanguageChanged += OnLanguageChanged;
        NavigationManager.LocationChanged += OnLocationChanged;
        
        await ThemeService.InitializeAsync();
        await CheckAuthenticationState();
        
        UpdateTheme();
    }

    private void OnThemeChanged()
    {
        UpdateTheme();
        InvokeAsync(StateHasChanged);
    }

    private void OnLanguageChanged(object? sender, string newLanguage)
    {
        InvokeAsync(StateHasChanged);
    }

    private void UpdateTheme()
    {
        _currentTheme = new MudTheme()
        {
            PaletteLight = GetLightPalette(ThemeService.CurrentTheme),
            PaletteDark = GetDarkPalette(ThemeService.CurrentTheme)
        };
    }

    private string GetPageTitle()
    {
        var currentPath = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        var routePath = "/" + currentPath.Split('?')[0].Split('#')[0];

        return routePath.ToLower() switch
        {
            "/" => TranslationService.GetTranslation("navigation.home", "Home"),
            "/admin" => TranslationService.GetTranslation("navigation.admin", "Administration"),
            "/events" => TranslationService.GetTranslation("navigation.events", "Events"),
            "/notifications" => TranslationService.GetTranslation("navigation.notifications", "Notifications"),
            "/chat" => TranslationService.GetTranslation("navigation.chat", "Chat"),
            "/profile" => TranslationService.GetTranslation("navigation.profile", "Profile"),
            "/settings" => TranslationService.GetTranslation("navigation.settings", "Settings"),
            "/superadmin" => TranslationService.GetTranslation("navigation.superadmin", "Super Admin"),
            var path when path.StartsWith("/superadmin/") => TranslationService.GetTranslation("navigation.superadmin", "Super Admin"),
            var path when path.StartsWith("/admin/") => TranslationService.GetTranslation("navigation.admin", "Administration"),
            _ => TranslationService.GetTranslation("navigation.eventforge", "EventForge")
        };
    }

    private PaletteLight GetLightPalette(string themeKey)
    {
        // Light theme variants
        return themeKey switch
        {
            "dark" => new PaletteLight()
            {
                Black = "#1a1a2e",
                Background = "#1a1a2e",
                Surface = "#2d2d30",
                TextPrimary = "#e0e0e0",
                TextSecondary = "#b0b0b0",
                AppbarBackground = "#1a1a2e",
                AppbarText = "#e0e0e0",
                DrawerBackground = "#1a1a2e",
                DrawerText = "#b0b0b0",
                Primary = "#4fc3f7",
                Secondary = "#ffb74d",
                Tertiary = "#4fc3f7",
                Info = "#4fc3f7",
                Success = "#66bb6a",
                Warning = "#ffb74d",
                Error = "#f06292"
            },
            "warm" => new PaletteLight()
            {
                Primary = "#c0392b",        // Rust Red
                Secondary = "#e67e22",      // Burnt Orange
                Tertiary = "#f39c12",       // Golden Yellow
                AppbarBackground = "#c0392b",
                AppbarText = "#ffffff",
                Background = "#fdf2e9",     // Warm Beige
                Surface = "#ffffff",
                DrawerBackground = "#c0392b",
                DrawerText = "#f8d7da",
                TextPrimary = "#5d4037",    // Coffee Brown
                TextSecondary = "#8d6e63",
                Info = "#e67e22",
                Success = "#689f38",
                Warning = "#ffa000",
                Error = "#d32f2f"
            },
            "cool" => new PaletteLight()
            {
                Primary = "#006064",        // Deep Teal
                Secondary = "#0097a7",      // Cyan Blue
                Tertiary = "#4db6ac",       // Mint Green
                AppbarBackground = "#006064",
                AppbarText = "#ffffff",
                Background = "#e0f2f1",     // Ice Blue
                Surface = "#ffffff",
                DrawerBackground = "#006064",
                DrawerText = "#b2dfdb",
                TextPrimary = "#37474f",    // Slate Gray
                TextSecondary = "#607d8b",
                Info = "#0097a7",
                Success = "#388e3c",
                Warning = "#f57c00",
                Error = "#d32f2f"
            },
            "high-contrast" => new PaletteLight()
            {
                Primary = "#000000",        // Pure Black
                Secondary = "#ffeb3b",      // Bright Yellow
                Tertiary = "#ff9800",       // Warning Orange
                AppbarBackground = "#000000",
                AppbarText = "#ffffff",
                Background = "#ffffff",     // Pure White
                Surface = "#f5f5f5",
                DrawerBackground = "#000000",
                DrawerText = "#ffffff",
                TextPrimary = "#000000",
                TextSecondary = "#000000",
                Info = "#1565c0",
                Success = "#2e7d32",
                Warning = "#e65100",
                Error = "#c62828"
            },
            "fun" => new PaletteLight()
            {
                Primary = "#9c27b0",        // Vibrant Purple
                Secondary = "#e91e63",      // Hot Pink
                Tertiary = "#8bc34a",       // Lime Green
                AppbarBackground = "#9c27b0",
                AppbarText = "#ffffff",
                Background = "#f3e5f5",     // Soft Lavender
                Surface = "#ffffff",
                DrawerBackground = "#9c27b0",
                DrawerText = "#e1bee7",
                TextPrimary = "#4a148c",    // Deep Purple
                TextSecondary = "#7b1fa2",
                Info = "#e91e63",
                Success = "#4caf50",
                Warning = "#ff9800",
                Error = "#f44336"
            },
            _ => new PaletteLight() // Default "light" theme
            {
                Primary = "#1F2F46",        // Navy Blue
                Secondary = "#247BFF",      // Electric Blue
                Tertiary = "#FF6B2C",       // Orange Fire
                AppbarBackground = "#1F2F46",
                AppbarText = "#ffffff",
                Background = "#F5F6FA",     // Light Gray
                Surface = "#ffffff",
                DrawerBackground = "#1F2F46",
                DrawerText = "#d7d7d7",
                TextPrimary = "#2D2D2D",    // Charcoal
                TextSecondary = "#666666",
                Info = "#247BFF",
                Success = "#4caf50",
                Warning = "#ff9800",
                Error = "#f44336"
            }
        };
    }

    private PaletteDark GetDarkPalette(string themeKey)
    {
        // For now, use a consistent dark palette that works well with all themes
        return new PaletteDark()
        {
            Black = "#1a1a2e",
            Background = "#1a1a2e",
            Surface = "#2d2d30",
            TextPrimary = "#e0e0e0",
            TextSecondary = "#b0b0b0",
            AppbarBackground = "#1a1a2e",
            AppbarText = "#e0e0e0",
            DrawerBackground = "#1a1a2e",
            DrawerText = "#b0b0b0",
            Primary = "#4fc3f7",
            Secondary = "#ffb74d",
            Tertiary = "#4fc3f7",
            Info = "#4fc3f7",
            Success = "#66bb6a",
            Warning = "#ffb74d",
            Error = "#f06292"
        };
    }



    private async Task CheckAuthenticationState()
    {
        _isAuthenticated = await AuthService.IsAuthenticatedAsync();
        StateHasChanged();
    }

    private async void OnAuthenticationStateChanged()
    {
        await CheckAuthenticationState();
    }

    private void OnLocationChanged(object? sender, Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs e)
    {
        InvokeAsync(StateHasChanged);
    }

    private async Task HandleLogout()
    {
        // This method is called from UserAccountMenu component
        // Default behavior is handled by the component itself
        await Task.CompletedTask;
    }

    private Task HandleError(Exception exception)
    {
        // Log the error and show a user-friendly message
        Snackbar.Add(TranslationService.GetTranslation("error.operationMayNotCompleted", "Si è verificato un errore. L'operazione potrebbe non essere stata completata correttamente."), Severity.Error);
        
        // You could also send error reports to a logging service here
        return Task.CompletedTask;
        // await ErrorReportingService.ReportErrorAsync(exception);
    }

    public void Dispose()
    {
        AuthService.OnAuthenticationStateChanged -= OnAuthenticationStateChanged;
        ThemeService.OnThemeChanged -= OnThemeChanged;
        TranslationService.LanguageChanged -= OnLanguageChanged;
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}
