@inherits LayoutComponentBase
@using EventForge.Client.Constants
@inject IAuthService AuthService
@inject IThemeService ThemeService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject ITranslationService TranslationService
@implements IDisposable

<MudThemeProvider @ref="_mudThemeProvider" Theme="_currentTheme" />

<MudLayout>
    <!-- Improved AppBar with accessibility enhancements -->
    <MudAppBar Elevation="1" role="banner">
        <MudIconButton Icon="Icons.Material.Filled.Menu" 
                       Color="Color.Inherit" 
                       Edge="Edge.Start" 
                       OnClick="@(() => _drawerOpen = !_drawerOpen)"
                       aria-label="Apri menu di navigazione"
                       aria-expanded="@_drawerOpen"
                       aria-controls="navigation-drawer" />
        <MudSpacer />
        
        <!-- Logo and brand with improved accessibility -->
        <div class="d-flex align-center" role="img" aria-label="EventForge Logo">
            <MudImage Src="trace.svg" 
                      Alt="EventForge Logo" 
                      Height="32" 
                      Width="32" 
                      Class="mr-2" />
            <MudText Typo="Typo.h6" 
                     Class="d-none d-sm-block"
                     aria-hidden="true">
                EventForge
            </MudText>
        </div>
        <MudSpacer />
        
        @if (_isAuthenticated)
        {
            <!-- Responsive user controls -->
            <nav class="d-flex align-center ga-2" role="navigation" aria-label="User controls">
                <!-- Language Selector - hide on small screens -->
                <div class="d-none d-md-block">
                    <LanguageSelector Dense="true" />
                </div>
                
                <!-- Theme Toggle Button with improved accessibility -->
                <MudTooltip Text="@(ThemeService.IsDarkMode ? ButtonLabels.LightMode : ButtonLabels.DarkMode)">
                    <MudIconButton Icon="@(ThemeService.IsDarkMode ? Icons.Material.Filled.LightMode : Icons.Material.Filled.DarkMode)"
                                   Color="Color.Inherit"
                                   OnClick="@ToggleTheme"
                                   aria-label="@(ThemeService.IsDarkMode ? "Passa al tema chiaro" : "Passa al tema scuro")" />
                </MudTooltip>
                
                @if (_currentUser != null)
                {
                    <!-- User Profile Menu with responsive layout -->
                    <MudMenu Icon="@Icons.Material.Filled.AccountCircle" 
                             Color="Color.Inherit" 
                             Direction="Origin.BottomLeft"
                             OffsetX="true"
                             Dense="true"
                             aria-label="Menu utente">
                        <ActivatorContent>
                            <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                                <MudAvatar Color="Color.Primary" 
                                           Size="Size.Small"
                                           aria-label="Avatar utente">
                                    @GetUserInitials()
                                </MudAvatar>
                                <!-- User info - responsive visibility -->
                                <div class="d-none d-sm-flex flex-column">
                                    <MudText Typo="Typo.body2" Class="ma-0">@_currentUser.FullName</MudText>
                                    @if (_currentUser.Roles?.Any() == true)
                                    {
                                        <MudChip T="string"
                                                 Size="Size.Small" 
                                                 Color="Color.Secondary" 
                                                 Variant="Variant.Filled"
                                                 Text="@GetRolesDisplayText()" />
                                    }
                                </div>
                                <MudIcon Icon="@Icons.Material.Filled.ArrowDropDown" 
                                         Size="Size.Small" 
                                         aria-hidden="true" />
                            </MudStack>
                        </ActivatorContent>
                        <ChildContent>
                            <MudMenuItem Icon="@Icons.Material.Filled.Person" 
                                         OnClick="@(() => NavigationManager.NavigateTo("/profile"))"
                                         aria-label="Vai al profilo utente">
                                @ButtonLabels.Profile
                            </MudMenuItem>
                            <MudMenuItem Icon="@Icons.Material.Filled.Settings" 
                                         OnClick="@(() => NavigationManager.NavigateTo("/settings"))"
                                         aria-label="Vai alle impostazioni">
                                @ButtonLabels.Settings
                            </MudMenuItem>
                            
                            <!-- Mobile-only language selector -->
                            <div class="d-block d-md-none">
                                <MudDivider />
                                <MudMenuItem Icon="@Icons.Material.Filled.Language">
                                    <LanguageSelector Dense="true" />
                                </MudMenuItem>
                            </div>
                            
                            <MudDivider />
                            <MudMenuItem Icon="@(ThemeService.IsDarkMode ? Icons.Material.Filled.LightMode : Icons.Material.Filled.DarkMode)"
                                         OnClick="@ToggleTheme"
                                         aria-label="@(ThemeService.IsDarkMode ? "Passa al tema chiaro" : "Passa al tema scuro")">
                                @(ThemeService.IsDarkMode ? ButtonLabels.LightMode : ButtonLabels.DarkMode)
                            </MudMenuItem>
                            <MudDivider />
                            <MudMenuItem Icon="@Icons.Material.Filled.Logout" 
                                         OnClick="@HandleLogout"
                                         aria-label="Esci dal sistema">
                                @ButtonLabels.Logout
                            </MudMenuItem>
                        </ChildContent>
                    </MudMenu>
                }
            </nav>
        }
        else
        {
            <!-- Login button for unauthenticated users -->
            <MudButton Variant="Variant.Text" 
                       Color="Color.Inherit" 
                       StartIcon="Icons.Material.Filled.Login"
                       OnClick="@(() => NavigationManager.NavigateTo("/login"))"
                       aria-label="Accedi al sistema">
                @ButtonLabels.Login
            </MudButton>
        }
    </MudAppBar>
    
    @if (_isAuthenticated)
    {
        <!-- Navigation drawer with accessibility improvements -->
        <MudDrawer @bind-Open="@_drawerOpen" 
                   ClipMode="DrawerClipMode.Always" 
                   Elevation="2"
                   id="navigation-drawer"
                   aria-label="Menu di navigazione principale">
            <NavMenu />
        </MudDrawer>
    }
    
    <!-- Main content area with proper semantic structure -->
    <MudMainContent Class="mt-16 pa-2 pa-sm-4" role="main">
        <!-- Skip link for accessibility -->
        <a href="#main-content" 
           class="sr-only sr-only-focusable position-absolute" 
           style="top: 1rem; left: 1rem; z-index: 9999;">
            Vai al contenuto principale
        </a>
        
        <div id="main-content" tabindex="-1">
            @Body
            <CustomErrorBoundary OnError="HandleError">
            </CustomErrorBoundary>
        </div>
    </MudMainContent>
</MudLayout>

@code {
    private bool _drawerOpen = true;
    private bool _isAuthenticated = false;
    private UserDto? _currentUser;
    private MudThemeProvider? _mudThemeProvider;
    private MudTheme _currentTheme = new();

    protected override async Task OnInitializedAsync()
    {
        AuthService.OnAuthenticationStateChanged += OnAuthenticationStateChanged;
        ThemeService.OnThemeChanged += OnThemeChanged;
        
        await ThemeService.InitializeAsync();
        await CheckAuthenticationState();
        
        UpdateTheme();
    }

    private void OnThemeChanged()
    {
        UpdateTheme();
        InvokeAsync(StateHasChanged);
    }

    private void UpdateTheme()
    {
        _currentTheme = new MudTheme()
        {
            PaletteLight = ThemeService.IsDarkMode ? 
                new PaletteLight()
                {
                    Black = "#27272f",
                    Background = "#32333d",
                    Surface = "#373740",
                    TextPrimary = "#ffffffDE",
                    TextSecondary = "#ffffff89",
                    AppbarBackground = "#27272f",
                    AppbarText = "#ffffffDE",
                    DrawerBackground = "#27272f",
                    DrawerText = "#ffffffDE"
                } :
                new PaletteLight()
                {
                    // EventForge Custom Theme Integration
                    // These values correspond to the CSS variables defined in custom-theme.css
                    // This ensures MudBlazor components use our custom color palette consistently
                    
                    Primary = "#1F2F46",        // --primary (Navy Blue) - headers, navbar, dark backgrounds
                    Secondary = "#247BFF",      // --secondary (Electric Blue) - buttons, links, highlights
                    Tertiary = "#FF6B2C",       // --accent (Orange Fire) - CTAs, badges, active states
                    AppbarBackground = "#1F2F46", // --appbar-background
                    AppbarText = "#ffffff",     // --appbar-text
                    Background = "#F5F6FA",     // --background-primary (Light Gray)
                    Surface = "#ffffff",        // --card-background
                    DrawerBackground = "#1F2F46", // --sidebar-background
                    DrawerText = "#d7d7d7",     // --sidebar-text
                    TextPrimary = "#2D2D2D",    // --text-primary (Charcoal)
                    TextSecondary = "#666666",  // --text-secondary
                    // Status and interaction colors
                    Info = "#247BFF",           // --link-color (Electric Blue)
                    Success = "#4caf50",        // --success
                    Warning = "#ff9800",        // --warning
                    Error = "#f44336"           // --error
                }
        };
    }

    private async Task ToggleTheme()
    {
        await ThemeService.ToggleThemeAsync();
    }

    private async Task CheckAuthenticationState()
    {
        _isAuthenticated = await AuthService.IsAuthenticatedAsync();
        if (_isAuthenticated)
        {
            _currentUser = await AuthService.GetCurrentUserAsync();
        }
        else
        {
            _currentUser = null;
        }
        StateHasChanged();
    }

    private async void OnAuthenticationStateChanged()
    {
        await CheckAuthenticationState();
    }

    private async Task HandleLogout()
    {
        try
        {
            await AuthService.LogoutAsync();
            Snackbar.Add(Messages.OperationSuccessful, Severity.Success);
            NavigationManager.NavigateTo("/login");
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Logout error: {ex.Message}", Severity.Error);
        }
    }

    private string GetUserInitials()
    {
        if (_currentUser == null) return "?";
        
        var firstName = _currentUser.FirstName?.Trim();
        var lastName = _currentUser.LastName?.Trim();
        
        if (string.IsNullOrEmpty(firstName) && string.IsNullOrEmpty(lastName))
            return _currentUser.Username?.Substring(0, 1).ToUpper() ?? "?";
        
        var firstInitial = !string.IsNullOrEmpty(firstName) ? firstName.Substring(0, 1).ToUpper() : "";
        var lastInitial = !string.IsNullOrEmpty(lastName) ? lastName.Substring(0, 1).ToUpper() : "";
        
        return $"{firstInitial}{lastInitial}";
    }

    private string GetRolesDisplayText()
    {
        if (_currentUser?.Roles == null || !_currentUser.Roles.Any())
            return "No Role";
        
        if (_currentUser.Roles.Count == 1)
            return _currentUser.Roles.First();
        
        return $"{_currentUser.Roles.Count} Roles";
    }

    private Task HandleError(Exception exception)
    {
        // Log the error and show a user-friendly message
        Snackbar.Add(TranslationService.GetTranslation("error.operationMayNotCompleted", "Si è verificato un errore. L'operazione potrebbe non essere stata completata correttamente."), Severity.Error);
        
        // You could also send error reports to a logging service here
        return Task.CompletedTask;
        // await ErrorReportingService.ReportErrorAsync(exception);
    }

    public void Dispose()
    {
        AuthService.OnAuthenticationStateChanged -= OnAuthenticationStateChanged;
        ThemeService.OnThemeChanged -= OnThemeChanged;
    }
}
