@inherits LayoutComponentBase
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@implements IDisposable

<MudLayout>
    <MudAppBar Elevation="1">
        <MudIconButton Icon="Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@(() => _drawerOpen = !_drawerOpen)" />
        <MudSpacer />
        <MudText Typo="Typo.h6">EventForge</MudText>
        <MudSpacer />
        
        @if (_isAuthenticated)
        {
            <div class="d-flex align-center ga-2">
                @if (_currentUser != null)
                {
                    <MudText Typo="Typo.body2" Class="mr-2">Welcome, @_currentUser.FullName</MudText>
                }
                <MudButton Variant="Variant.Text" 
                           Color="Color.Inherit" 
                           StartIcon="Icons.Material.Filled.Logout"
                           OnClick="HandleLogout">
                    Logout
                </MudButton>
            </div>
        }
    </MudAppBar>
    
    @if (_isAuthenticated)
    {
        <MudDrawer @bind-Open="@_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
            <NavMenu />
        </MudDrawer>
    }
    
    <MudMainContent Class="mt-16 pa-4">
        @Body
    </MudMainContent>
</MudLayout>

@code {
    private bool _drawerOpen = true;
    private bool _isAuthenticated = false;
    private UserDto? _currentUser;

    protected override async Task OnInitializedAsync()
    {
        AuthService.OnAuthenticationStateChanged += OnAuthenticationStateChanged;
        await CheckAuthenticationState();
    }

    private async Task CheckAuthenticationState()
    {
        _isAuthenticated = await AuthService.IsAuthenticatedAsync();
        if (_isAuthenticated)
        {
            _currentUser = await AuthService.GetCurrentUserAsync();
        }
        else
        {
            _currentUser = null;
        }
        StateHasChanged();
    }

    private async void OnAuthenticationStateChanged()
    {
        await CheckAuthenticationState();
    }

    private async Task HandleLogout()
    {
        try
        {
            await AuthService.LogoutAsync();
            Snackbar.Add("Logged out successfully!", Severity.Success);
            NavigationManager.NavigateTo("/login");
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Logout error: {ex.Message}", Severity.Error);
        }
    }

    public void Dispose()
    {
        AuthService.OnAuthenticationStateChanged -= OnAuthenticationStateChanged;
    }
}
