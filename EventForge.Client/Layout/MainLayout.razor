@inherits LayoutComponentBase
@using EventForge.Client.Constants
@inject IAuthService AuthService
@inject IThemeService ThemeService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject ITranslationService TranslationService
@implements IDisposable

<MudThemeProvider @ref="_mudThemeProvider" Theme="_currentTheme" />

<MudLayout>
    <!-- Improved AppBar with accessibility enhancements and dynamic title -->
    <MudAppBar Elevation="1" role="banner">
        <MudIconButton Icon="Icons.Material.Filled.Menu" 
                       Color="Color.Surface" 
                       Edge="Edge.Start" 
                       OnClick="@(() => _drawerOpen = !_drawerOpen)"
                       aria-label="@TranslationService.GetTranslation("navigation.openMenu", "Open navigation menu")"
                       aria-expanded="@_drawerOpen"
                       aria-controls="navigation-drawer"
                       Class="menu-toggle-button" />
        
        <!-- Logo and brand with improved accessibility -->
        <div class="d-flex align-center" role="img" aria-label="EventForge Logo">
            <MudImage Src="trace.svg" 
                      Alt="EventForge Logo" 
                      Height="32" 
                      Width="32" 
                      Class="mr-2" />
        </div>
        
        <!-- Dynamic Page Title -->
        <MudText Typo="Typo.h6" 
                 Class="ml-4 d-none d-md-block"
                 Color="Color.Inherit">
            @GetPageTitle()
        </MudText>
        
        <MudSpacer />
        
        @if (_isAuthenticated)
        {
            <!-- User Account Menu - no longer includes theme/language controls -->
            <nav class="d-flex align-center ga-2" role="navigation" aria-label="User controls">
                <UserAccountMenu OnLogout="@HandleLogout" />
            </nav>
        }
        else
        {
            <!-- Login button for unauthenticated users -->
            <MudButton Variant="Variant.Text" 
                       Color="Color.Inherit" 
                       StartIcon="Icons.Material.Filled.Login"
                       OnClick="@(() => NavigationManager.NavigateTo("/login"))"
                       aria-label="@TranslationService.GetTranslation("auth.loginDescription", "Login to system")">
                @TranslationService.GetTranslation("auth.login", "Login")
            </MudButton>
        }
    </MudAppBar>
    
    @if (_isAuthenticated)
    {
        <!-- Navigation drawer with accessibility improvements -->
        <MudDrawer @bind-Open="@_drawerOpen" 
                   ClipMode="DrawerClipMode.Always" 
                   Elevation="2"
                   id="navigation-drawer"
                   aria-label="@TranslationService.GetTranslation("navigation.mainMenu", "Main navigation menu")">
            <NavMenu />
        </MudDrawer>
    }
    
    <!-- Main content area with proper semantic structure -->
    <MudMainContent Class="mt-16 pa-2 pa-sm-4 main-content-with-footer" role="main">
        <!-- Skip link for accessibility -->
        <a href="#main-content" 
           class="sr-only sr-only-focusable position-absolute" 
           style="top: 1rem; left: 1rem; z-index: 9999;">
            @TranslationService.GetTranslation("accessibility.skipToContent", "Skip to main content")
        </a>
        
        <div id="main-content" tabindex="-1">
            @Body
        </div>
    </MudMainContent>
</MudLayout>

<!-- Health Footer - centralized for all layouts -->
<HealthFooter />

<!-- Global Loading Dialog - centralized modal loading component -->
<GlobalLoadingDialog />

@code {
    private bool _drawerOpen = true;
    private bool _isAuthenticated = false;
    private MudThemeProvider? _mudThemeProvider;
    private MudTheme _currentTheme = new();

    protected override async Task OnInitializedAsync()
    {
        AuthService.OnAuthenticationStateChanged += OnAuthenticationStateChanged;
        ThemeService.OnThemeChanged += OnThemeChanged;
        TranslationService.LanguageChanged += OnLanguageChanged;
        NavigationManager.LocationChanged += OnLocationChanged;
        
        await ThemeService.InitializeAsync();
        await CheckAuthenticationState();
        
        UpdateTheme();
    }

    private void OnThemeChanged()
    {
        UpdateTheme();
        InvokeAsync(StateHasChanged);
    }

    private void OnLanguageChanged(object? sender, string newLanguage)
    {
        InvokeAsync(StateHasChanged);
    }

    private void UpdateTheme()
    {
        _currentTheme = new MudTheme()
        {
            PaletteLight = GetLightPalette(ThemeService.CurrentTheme),
            PaletteDark = GetDarkPalette(ThemeService.CurrentTheme)
        };
    }

    private string GetPageTitle()
    {
        var currentPath = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        var routePath = "/" + currentPath.Split('?')[0].Split('#')[0];

        return routePath.ToLower() switch
        {
            "/" => TranslationService.GetTranslation("navigation.home", "Home"),
            "/admin" => TranslationService.GetTranslation("navigation.admin", "Administration"),
            "/events" => TranslationService.GetTranslation("navigation.events", "Events"),
            "/notifications" => TranslationService.GetTranslation("navigation.notifications", "Notifications"),
            "/chat" => TranslationService.GetTranslation("navigation.chat", "Chat"),
            "/profile" => TranslationService.GetTranslation("navigation.profile", "Profile"),
            "/settings" => TranslationService.GetTranslation("navigation.settings", "Settings"),
            "/superadmin" => TranslationService.GetTranslation("navigation.superadmin", "Super Admin"),
            var path when path.StartsWith("/superadmin/") => TranslationService.GetTranslation("navigation.superadmin", "Super Admin"),
            var path when path.StartsWith("/admin/") => TranslationService.GetTranslation("navigation.admin", "Administration"),
            _ => TranslationService.GetTranslation("navigation.eventforge", "EventForge")
        };
    }

    private PaletteLight GetLightPalette(string themeKey)
    {
        // Light theme variants
        return themeKey switch
        {
            "carbon-neon-light" => new PaletteLight()
            {
                Primary = "#0099CC",        // Bright Cyan
                Secondary = "#00D9FF",      // Electric Blue
                Tertiary = "#7B68EE",       // Medium Slate Blue
                AppbarBackground = "#FFFFFF",
                AppbarText = "#1A1A1A",
                Background = "#F5F5F5",     // Light Gray
                Surface = "#FFFFFF",
                DrawerBackground = "#FFFFFF",
                DrawerText = "#1A1A1A",
                TextPrimary = "#1A1A1A",    // Near Black
                TextSecondary = "#6B6B6B",  // Medium Gray
                Info = "#0099CC",
                Success = "#00C853",
                Warning = "#FFB300",
                Error = "#FF3D00"
            },
            _ => GetDefaultLightPalette()
        };
    }

    private PaletteLight GetDefaultLightPalette()
    {
        return new PaletteLight()
        {
            Primary = "#1F2F46",        // Navy Blue
            Secondary = "#247BFF",      // Electric Blue
            Tertiary = "#FF6B2C",       // Orange Fire
            AppbarBackground = "#1F2F46",
            AppbarText = "#ffffff",
            Background = "#F5F6FA",     // Light Gray
            Surface = "#ffffff",
            DrawerBackground = "#1F2F46",
            DrawerText = "#d7d7d7",
            TextPrimary = "#2D2D2D",    // Charcoal
            TextSecondary = "#666666",
            Info = "#247BFF",
            Success = "#4caf50",
            Warning = "#ff9800",
            Error = "#f44336"
        };
    }

    private PaletteDark GetDarkPalette(string themeKey)
    {
        // Dark theme variants
        return themeKey switch
        {
            "carbon-neon-dark" => new PaletteDark()
            {
                Primary = "#00F5FF",           // Neon cyan
                Secondary = "#FF006E",         // Vivid magenta
                Background = "#121212",        // Pure MD dark
                Surface = "#262626",
                DrawerBackground = "#1A1A1A",
                DrawerText = "#F5F5F5",
                AppbarBackground = "#000000",
                AppbarText = "#FFFFFF",
                TextPrimary = "#FFFFFF",
                TextSecondary = "#B3B3B3",
                ActionDefault = "#00E5FF",
                Divider = "rgba(255,255,255,0.1)",
                Info = "#00E5FF",
                Success = "#10B981",
                Warning = "#F59E0B",
                Error = "#EF4444"
            },
            _ => GetDefaultDarkPalette()
        };
    }

    private PaletteDark GetDefaultDarkPalette()
    {
        return new PaletteDark()
        {
            Black = "#1a1a2e",
            Background = "#1a1a2e",
            Surface = "#2d2d30",
            TextPrimary = "#e0e0e0",
            TextSecondary = "#b0b0b0",
            AppbarBackground = "#1a1a2e",
            AppbarText = "#e0e0e0",
            DrawerBackground = "#1a1a2e",
            DrawerText = "#b0b0b0",
            Primary = "#4fc3f7",
            Secondary = "#ffb74d",
            Tertiary = "#4fc3f7",
            Info = "#4fc3f7",
            Success = "#66bb6a",
            Warning = "#ffb74d",
            Error = "#f06292"
        };
    }



    private async Task CheckAuthenticationState()
    {
        _isAuthenticated = await AuthService.IsAuthenticatedAsync();
        StateHasChanged();
    }

    private async void OnAuthenticationStateChanged()
    {
        await CheckAuthenticationState();
    }

    private void OnLocationChanged(object? sender, Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs e)
    {
        InvokeAsync(StateHasChanged);
    }

    private async Task HandleLogout()
    {
        // This method is called from UserAccountMenu component
        // Default behavior is handled by the component itself
        await Task.CompletedTask;
    }

    public void Dispose()
    {
        AuthService.OnAuthenticationStateChanged -= OnAuthenticationStateChanged;
        ThemeService.OnThemeChanged -= OnThemeChanged;
        TranslationService.LanguageChanged -= OnLanguageChanged;
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}
