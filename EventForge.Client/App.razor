@* EventForge Client App.razor - Main application routing configuration
   Routing: Standard Blazor routing without forced authentication redirects
   Landing page: "/" -> Home.razor (accessible without authentication)
   Authentication: Handled per-page with [Authorize] attributes as needed
   
   NOTE: I18N REMOVED - TranslationService removed to support minimal home without i18n *@

@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@implements IDisposable

<MudThemeProvider />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<CascadingAuthenticationState>
    <Router AppAssembly="@typeof(App).Assembly">
        <Found Context="routeData">
            <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
                <NotAuthorized>
                    @* Only redirect if not already on login page and accessing a protected route *@
                    @{
                        if (!NavigationManager.Uri.Contains("/login"))
                        {
                            NavigationManager.NavigateTo("/login");
                        }
                    }
                    <MudContainer MaxWidth="MaxWidth.Medium" Class="mt-8">
                        <MudPaper Class="pa-8" Elevation="4">
                            <MudGrid Justify="Justify.Center">
                                <MudItem xs="12">
                                    <div class="d-flex flex-column align-center">
                                        <MudIcon Icon="Icons.Material.Filled.Block" Color="Color.Warning" Size="Size.Large" Class="mb-4" Style="font-size: 72px;" />
                                        <MudText Typo="Typo.h4" Align="Align.Center" Class="mb-4">Authentication Required</MudText>
                                        <MudText Typo="Typo.body1" Align="Align.Center" Class="mb-6">
                                            Please log in to access this page.
                                        </MudText>
                                        <MudButton Variant="Variant.Filled" 
                                                   Color="Color.Primary" 
                                                   StartIcon="Icons.Material.Filled.Login"
                                                   OnClick="@(() => NavigationManager.NavigateTo("/login"))">
                                            Go to Login
                                        </MudButton>
                                    </div>
                                </MudItem>
                            </MudGrid>
                        </MudPaper>
                    </MudContainer>
                </NotAuthorized>
            </AuthorizeRouteView>
            <FocusOnNavigate RouteData="@routeData" Selector="h1" />
        </Found>
        <NotFound>
            <PageTitle>Not found</PageTitle>
            <LayoutView Layout="@typeof(MainLayout)">
                <MudContainer MaxWidth="MaxWidth.Medium" Class="mt-8">
                    <MudPaper Class="pa-8" Elevation="4">
                        <MudGrid Justify="Justify.Center">
                            <MudItem xs="12">
                                <div class="d-flex flex-column align-center">
                                    <MudIcon Icon="Icons.Material.Filled.QuestionMark" Color="Color.Warning" Size="Size.Large" Class="mb-4" Style="font-size: 72px;" />
                                    <MudText Typo="Typo.h4" Align="Align.Center" Class="mb-4">Page Not Found</MudText>
                                    <MudText Typo="Typo.body1" Align="Align.Center" Class="mb-6">
                                        Sorry, there's nothing at this address.
                                    </MudText>
                                    <MudButton Variant="Variant.Filled" 
                                               Color="Color.Primary" 
                                               StartIcon="Icons.Material.Filled.Home"
                                               OnClick="@(() => NavigationManager.NavigateTo("/login"))">
                                        Return to Login
                                    </MudButton>
                                </div>
                            </MudItem>
                        </MudGrid>
                    </MudPaper>
                </MudContainer>
            </LayoutView>
        </NotFound>
    </Router>
</CascadingAuthenticationState>

@code {
    protected override async Task OnInitializedAsync()
    {
        // NOTE: I18N REMOVED - TranslationService initialization removed to support minimal home
        // without internationalization dependencies
        
        // Subscribe to authentication state changes for protected routes
        AuthService.OnAuthenticationStateChanged += OnAuthenticationStateChanged;
    }

    private async void OnAuthenticationStateChanged()
    {
        // Authentication state management for protected routes
        // Note: Home page ("/") is accessible without authentication due to [AllowAnonymous]
        var isAuthenticated = await AuthService.IsAuthenticatedAsync();
        var currentUri = NavigationManager.Uri;
        
        // Only redirect to login if on a protected route and not authenticated
        // Home page and other [AllowAnonymous] pages should remain accessible
        Console.WriteLine($"Auth state changed - Authenticated: {isAuthenticated}, URI: {currentUri}");
    }

    public void Dispose()
    {
        AuthService.OnAuthenticationStateChanged -= OnAuthenticationStateChanged;
    }
}
