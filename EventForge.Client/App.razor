@inject IAuthService AuthService
@inject ITranslationService TranslationService
@inject NavigationManager NavigationManager
@implements IDisposable

<MudThemeProvider />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<CascadingAuthenticationState>
    <Router AppAssembly="@typeof(App).Assembly">
        <Found Context="routeData">
            <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
                <NotAuthorized>
                    @{
                        // Only redirect if not already on login page
                        if (!NavigationManager.Uri.Contains("/login"))
                        {
                            NavigationManager.NavigateTo("/login");
                        }
                    }
                    <MudContainer MaxWidth="MaxWidth.Medium" Class="mt-8">
                        <MudPaper Class="pa-8" Elevation="4">
                            <MudGrid Justify="Justify.Center">
                                <MudItem xs="12">
                                    <div class="d-flex flex-column align-center">
                                        <MudIcon Icon="Icons.Material.Filled.Block" Color="Color.Warning" Size="Size.Large" Class="mb-4" Style="font-size: 72px;" />
                                        <MudText Typo="Typo.h4" Align="Align.Center" Class="mb-4">Authentication Required</MudText>
                                        <MudText Typo="Typo.body1" Align="Align.Center" Class="mb-6">
                                            Please log in to access this page.
                                        </MudText>
                                        <MudButton Variant="Variant.Filled" 
                                                   Color="Color.Primary" 
                                                   StartIcon="Icons.Material.Filled.Login"
                                                   OnClick="@(() => NavigationManager.NavigateTo("/login"))">
                                            Go to Login
                                        </MudButton>
                                    </div>
                                </MudItem>
                            </MudGrid>
                        </MudPaper>
                    </MudContainer>
                </NotAuthorized>
            </AuthorizeRouteView>
            <FocusOnNavigate RouteData="@routeData" Selector="h1" />
        </Found>
        <NotFound>
            <PageTitle>Not found</PageTitle>
            <LayoutView Layout="@typeof(MainLayout)">
                <MudContainer MaxWidth="MaxWidth.Medium" Class="mt-8">
                    <MudPaper Class="pa-8" Elevation="4">
                        <MudGrid Justify="Justify.Center">
                            <MudItem xs="12">
                                <div class="d-flex flex-column align-center">
                                    <MudIcon Icon="Icons.Material.Filled.QuestionMark" Color="Color.Warning" Size="Size.Large" Class="mb-4" Style="font-size: 72px;" />
                                    <MudText Typo="Typo.h4" Align="Align.Center" Class="mb-4">Page Not Found</MudText>
                                    <MudText Typo="Typo.body1" Align="Align.Center" Class="mb-6">
                                        Sorry, there's nothing at this address.
                                    </MudText>
                                    <MudButton Variant="Variant.Filled" 
                                               Color="Color.Primary" 
                                               StartIcon="Icons.Material.Filled.Home"
                                               OnClick="@(() => NavigationManager.NavigateTo("/login"))">
                                        Return to Login
                                    </MudButton>
                                </div>
                            </MudItem>
                        </MudGrid>
                    </MudPaper>
                </MudContainer>
            </LayoutView>
        </NotFound>
    </Router>
</CascadingAuthenticationState>

@code {
    protected override async Task OnInitializedAsync()
    {
        // TEMPORARY DEBUG: Log available routes for diagnostics
        Console.WriteLine("=== ROUTE DIAGNOSTICS START ===");
        Console.WriteLine($"App.razor OnInitializedAsync - Current URI: {NavigationManager.Uri}");
        Console.WriteLine($"App.razor OnInitializedAsync - Base URI: {NavigationManager.BaseUri}");
        
        // Get all available routes from the router
        var assembly = typeof(App).Assembly;
        var pageComponents = assembly.GetTypes()
            .Where(t => t.GetCustomAttributes(typeof(Microsoft.AspNetCore.Components.RouteAttribute), false).Any())
            .ToList();
            
        Console.WriteLine("Available routes:");
        foreach (var component in pageComponents)
        {
            var routeAttributes = component.GetCustomAttributes(typeof(Microsoft.AspNetCore.Components.RouteAttribute), false);
            foreach (Microsoft.AspNetCore.Components.RouteAttribute route in routeAttributes)
            {
                Console.WriteLine($"  - {route.Template} -> {component.Name}");
            }
        }
        Console.WriteLine("=== ROUTE DIAGNOSTICS END ===");
        
        // Initialize translation service
        try
        {
            await ((TranslationService)TranslationService).InitializeAsync();
        }
        catch (Exception ex)
        {
            // Log error but don't fail the app
            Console.Error.WriteLine($"Translation service initialization error: {ex.Message}");
        }
        
        // TEMPORARY DEBUG: Enhanced authentication state logging
        Console.WriteLine("=== AUTH DIAGNOSTICS START ===");
        var isAuthenticated = await AuthService.IsAuthenticatedAsync();
        var currentUri = NavigationManager.Uri;
        
        Console.WriteLine($"App.razor - Authentication state: {isAuthenticated}");
        Console.WriteLine($"App.razor - Current URI: {currentUri}");
        Console.WriteLine($"App.razor - Contains '/login': {currentUri.Contains("/login")}");
        
        // If not authenticated and not on login page, redirect to login
        if (!isAuthenticated && !currentUri.Contains("/login"))
        {
            Console.WriteLine($"App.razor - Redirecting to login from: {currentUri}");
            NavigationManager.NavigateTo("/login");
        }
        else
        {
            Console.WriteLine($"App.razor - No redirect needed. Authenticated: {isAuthenticated}, On login: {currentUri.Contains("/login")}");
        }
        Console.WriteLine("=== AUTH DIAGNOSTICS END ===");
        
        // Subscribe to authentication state changes
        AuthService.OnAuthenticationStateChanged += OnAuthenticationStateChanged;
    }

    private async void OnAuthenticationStateChanged()
    {
        // TEMPORARY DEBUG: Enhanced authentication state change logging
        Console.WriteLine("=== AUTH STATE CHANGE DIAGNOSTICS START ===");
        var isAuthenticated = await AuthService.IsAuthenticatedAsync();
        var currentUri = NavigationManager.Uri;
        
        Console.WriteLine($"App.razor - Auth state changed. Authenticated: {isAuthenticated}");
        Console.WriteLine($"App.razor - Current URI: {currentUri}");
        Console.WriteLine($"App.razor - Contains '/login': {currentUri.Contains("/login")}");
        
        // If not authenticated and not on login page, redirect to login
        if (!isAuthenticated && !currentUri.Contains("/login"))
        {
            Console.WriteLine($"App.razor - Auth state change: Redirecting to login from: {currentUri}");
            NavigationManager.NavigateTo("/login");
        }
        else
        {
            Console.WriteLine($"App.razor - Auth state change: No redirect needed");
        }
        Console.WriteLine("=== AUTH STATE CHANGE DIAGNOSTICS END ===");
    }

    public void Dispose()
    {
        AuthService.OnAuthenticationStateChanged -= OnAuthenticationStateChanged;
    }
}
